/* Generated by Cython 0.29.5 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [],
        "language": "c++",
        "name": "psychxr.libovr._libovr",
        "sources": [
            "psychxr/libovr/_libovr.pyx"
        ]
    },
    "module_name": "psychxr.libovr._libovr"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_5"
#define CYTHON_HEX_VERSION 0x001D05F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
  #define PyObject_Unicode             PyObject_Str
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__psychxr__libovr___libovr
#define __PYX_HAVE_API__psychxr__libovr___libovr
/* Early includes */
#include <stdint.h>
#include "OVR_Version.h"
#include "OVR_ErrorCode.h"
#include "OVR_CAPI.h"
#include "OVR_CAPI_Util.h"
#include "OVR_CAPI_GL.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "OVR_Math.h"
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <stdio.h>
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "pythread.h"
#include "pystate.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "psychxr\\libovr\\_libovr.pyx",
  "stringsource",
  "__init__.pxd",
  "type.pxd",
};
/* BufferFormatStructs.proto */
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __pyx_atomic_int_type int
#if CYTHON_ATOMICS && __GNUC__ >= 4 && (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL >= 2)) &&\
                    !defined(__i386__)
    #define __pyx_atomic_incr_aligned(value, lock) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value, lock) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER) && 0
    #include <Windows.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type LONG
    #define __pyx_atomic_incr_aligned(value, lock) InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#elif CYTHON_ATOMICS && (defined(__ICC) || defined(__INTEL_COMPILER)) && 0
    #define __pyx_atomic_incr_aligned(value, lock) _InterlockedIncrement(value)
    #define __pyx_atomic_decr_aligned(value, lock) _InterlockedDecrement(value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using Intel atomics"
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
typedef volatile __pyx_atomic_int_type __pyx_atomic_int;
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview), memview->lock)
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()


/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":776
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":777
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":779
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":783
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":784
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":785
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":786
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":790
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":791
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":800
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":801
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":804
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":805
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":806
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":808
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":809
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":811
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":812
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);


/*--- Type declarations ---*/
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose;
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState;
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState;
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo;
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus;
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo;
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat;
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":815
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":816
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":817
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":819
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_7psychxr_6libovr_7_libovr_10LibOVRPose_fromPtr;
struct __pyx_opt_args_7psychxr_6libovr_7_libovr_15LibOVRPoseState_fromPtr;
struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_fromPtr;
struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_fromPtr;
struct __pyx_opt_args_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_fromPtr;

/* "psychxr/libovr/_libovr.pyx":678
 * 
 *     @staticmethod
 *     cdef LibOVRPose fromPtr(libovr_capi.ovrPosef* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         cdef LibOVRPose wrapper = LibOVRPose.__new__(LibOVRPose)
 *         wrapper.c_data = ptr
 */
struct __pyx_opt_args_7psychxr_6libovr_7_libovr_10LibOVRPose_fromPtr {
  int __pyx_n;
  int owner;
};

/* "psychxr/libovr/_libovr.pyx":1522
 * 
 *     @staticmethod
 *     cdef LibOVRPoseState fromPtr(libovr_capi.ovrPoseStatef* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRPoseState wrapper = LibOVRPoseState.__new__(LibOVRPoseState)
 */
struct __pyx_opt_args_7psychxr_6libovr_7_libovr_15LibOVRPoseState_fromPtr {
  int __pyx_n;
  int owner;
};

/* "psychxr/libovr/_libovr.pyx":1689
 * 
 *     @staticmethod
 *     cdef LibOVRTrackingState fromPtr(libovr_capi.ovrTrackingState* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRTrackingState wrapper = LibOVRTrackingState.__new__(LibOVRTrackingState)
 */
struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_fromPtr {
  int __pyx_n;
  int owner;
};

/* "psychxr/libovr/_libovr.pyx":1915
 * 
 *     @staticmethod
 *     cdef LibOVRSessionStatus fromPtr(libovr_capi.ovrSessionStatus* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRSessionStatus wrapper = \
 */
struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_fromPtr {
  int __pyx_n;
  int owner;
};

/* "psychxr/libovr/_libovr.pyx":2003
 * 
 *     @staticmethod
 *     cdef LibOVRHmdInfo fromPtr(libovr_capi.ovrHmdDesc* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRHmdInfo wrapper = LibOVRHmdInfo.__new__(LibOVRHmdInfo)
 */
struct __pyx_opt_args_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_fromPtr {
  int __pyx_n;
  int owner;
};

/* "psychxr/libovr/_libovr.pyx":636
 * # Classes and extension types
 * #
 * cdef class LibOVRPose(object):             # <<<<<<<<<<<<<<
 *     """Class for LibOVR rigid body pose.
 * 
 */
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose {
  PyObject_HEAD
  struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_vtab;
  ovrPosef *c_data;
  int ptr_owner;
  PyArrayObject *_pos;
  PyArrayObject *_ori;
};


/* "psychxr/libovr/_libovr.pyx":1483
 * 
 * 
 * cdef class LibOVRPoseState(object):             # <<<<<<<<<<<<<<
 *     """Class for data about rigid body configuration with derivatives computed
 *     by the LibOVR runtime.
 */
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState {
  PyObject_HEAD
  struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_vtab;
  ovrPoseStatef *c_data;
  int ptr_owner;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *_pose;
  PyArrayObject *_linearVelocity;
  PyArrayObject *_angularVelocity;
  PyArrayObject *_linearAcceleration;
  PyArrayObject *_angularAcceleration;
};


/* "psychxr/libovr/_libovr.pyx":1656
 * 
 * 
 * cdef class LibOVRTrackingState(object):             # <<<<<<<<<<<<<<
 *     """Class for tracking state information."""
 *     cdef libovr_capi.ovrTrackingState* c_data
 */
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState {
  PyObject_HEAD
  struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_vtab;
  ovrTrackingState *c_data;
  int ptr_owner;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *_headPose;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *_leftHandPose;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *_rightHandPose;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *_calibratedOrigin;
};


/* "psychxr/libovr/_libovr.pyx":1784
 * 
 * 
 * cdef class LibOVRTrackerInfo(object):             # <<<<<<<<<<<<<<
 *     """Class for information about camera-based tracking sensors.
 * 
 */
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo {
  PyObject_HEAD
  ovrTrackerPose *c_data;
  ovrTrackerPose c_ovrTrackerPose;
  ovrTrackerDesc c_ovrTrackerDesc;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *_pose;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *_leveledPose;
  unsigned int _trackerIndex;
};


/* "psychxr/libovr/_libovr.pyx":1887
 * 
 * 
 * cdef class LibOVRSessionStatus(object):             # <<<<<<<<<<<<<<
 *     """Class for session status information.
 * 
 */
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus {
  PyObject_HEAD
  struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_vtab;
  ovrSessionStatus *c_data;
  int ptr_owner;
};


/* "psychxr/libovr/_libovr.pyx":1990
 * 
 * 
 * cdef class LibOVRHmdInfo(object):             # <<<<<<<<<<<<<<
 *     """Class for HMD information returned by 'getHmdInfo'."""
 * 
 */
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo {
  PyObject_HEAD
  struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_vtab;
  ovrHmdDesc *c_data;
  int ptr_owner;
};


/* "psychxr/libovr/_libovr.pyx":2216
 * 
 * 
 * cdef class LibOVRFrameStat(object):             # <<<<<<<<<<<<<<
 *     """Performance stats for a compositor frame.
 * 
 */
struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat {
  PyObject_HEAD
  ovrPerfStatsPerCompositorFrame *c_data;
  ovrPerfStatsPerCompositorFrame c_ovrPerfStatsPerCompositorFrame;
};


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":279
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int acquisition_count[2];
  __pyx_atomic_int *acquisition_count_aligned_p;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":961
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "psychxr/libovr/_libovr.pyx":636
 * # Classes and extension types
 * #
 * cdef class LibOVRPose(object):             # <<<<<<<<<<<<<<
 *     """Class for LibOVR rigid body pose.
 * 
 */

struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRPose {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *(*fromPtr)(ovrPosef *, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_10LibOVRPose_fromPtr *__pyx_optional_args);
  void (*newStruct)(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPose;


/* "psychxr/libovr/_libovr.pyx":1483
 * 
 * 
 * cdef class LibOVRPoseState(object):             # <<<<<<<<<<<<<<
 *     """Class for data about rigid body configuration with derivatives computed
 *     by the LibOVR runtime.
 */

struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRPoseState {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *(*fromPtr)(ovrPoseStatef *, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_15LibOVRPoseState_fromPtr *__pyx_optional_args);
  void (*newStruct)(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *);
};
static struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPoseState;


/* "psychxr/libovr/_libovr.pyx":1656
 * 
 * 
 * cdef class LibOVRTrackingState(object):             # <<<<<<<<<<<<<<
 *     """Class for tracking state information."""
 *     cdef libovr_capi.ovrTrackingState* c_data
 */

struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRTrackingState {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *(*fromPtr)(ovrTrackingState *, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_fromPtr *__pyx_optional_args);
  void (*newStruct)(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *);
};
static struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRTrackingState;


/* "psychxr/libovr/_libovr.pyx":1887
 * 
 * 
 * cdef class LibOVRSessionStatus(object):             # <<<<<<<<<<<<<<
 *     """Class for session status information.
 * 
 */

struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRSessionStatus {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *(*fromPtr)(ovrSessionStatus *, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_fromPtr *__pyx_optional_args);
  void (*newStruct)(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *);
};
static struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRSessionStatus;


/* "psychxr/libovr/_libovr.pyx":1990
 * 
 * 
 * cdef class LibOVRHmdInfo(object):             # <<<<<<<<<<<<<<
 *     """Class for HMD information returned by 'getHmdInfo'."""
 * 
 */

struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRHmdInfo {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *(*fromPtr)(ovrHmdDesc *, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_fromPtr *__pyx_optional_args);
  void (*newStruct)(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *);
};
static struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRHmdInfo;


/* "View.MemoryView":105
 * 
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":330
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview(object):             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":961
 * 
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* IncludeStringH.proto */
#include <string.h>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely((Py_TYPE(obj) == type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* SliceObject.proto */
#define __Pyx_PyObject_DelSlice(obj, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)\
    __Pyx_PyObject_SetSlice(obj, (PyObject*)NULL, cstart, cstop, py_start, py_stop, py_slice, has_cstart, has_cstop, wraparound)
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(
        PyObject* obj, PyObject* value, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* BufferGetAndValidate.proto */
#define __Pyx_GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack)\
    ((obj == Py_None || obj == NULL) ?\
    (__Pyx_ZeroBuffer(buf), 0) :\
    __Pyx__GetBufferAndValidate(buf, obj, dtype, flags, nd, cast, stack))
static int  __Pyx__GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static void __Pyx_ZeroBuffer(Py_buffer* buf);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);
static Py_ssize_t __Pyx_minusones[] = { -1, -1, -1, -1, -1, -1, -1, -1 };
static Py_ssize_t __Pyx_zeros[] = { 0, 0, 0, 0, 0, 0, 0, 0 };

/* BufferFallbackError.proto */
static void __Pyx_RaiseBufferFallbackError(void);

/* BufferIndexError.proto */
static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (memview->acquisition_count_aligned_p)
#define __pyx_get_slice_count(memview) (*__pyx_get_slice_count_pointer(memview))
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XDEC_MEMVIEW(slice, have_gil) __Pyx_XDEC_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *, int, int);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_DivideObjC(op1, op2, floatval, inplace, zerodivision_check)\
    ((inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2)))
    #endif

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* None.proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* UnaryNegOverflows.proto */
#define UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* None.proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* Capsule.proto */
static CYTHON_INLINE PyObject *__pyx_capsule_create(void *p, const char *sig);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrTextureFormat(ovrTextureFormat value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrPerfHudMode(ovrPerfHudMode value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrMirrorOptions(ovrMirrorOptions value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrControllerType(ovrControllerType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrButton(ovrButton value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrTouch(ovrTouch value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrSuccessType(ovrSuccessType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrSuccessTypes(ovrSuccessTypes value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrErrorType(ovrErrorType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrEyeType(ovrEyeType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrHandType(ovrHandType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrTrackedDeviceType(ovrTrackedDeviceType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrBool(ovrBool value);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value);

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE ovrTrackedDeviceType __Pyx_PyInt_As_ovrTrackedDeviceType(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_float(PyObject *, int writable_flag);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_f_7psychxr_6libovr_7_libovr_10LibOVRPose_fromPtr(ovrPosef *__pyx_v_ptr, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_10LibOVRPose_fromPtr *__pyx_optional_args); /* proto*/
static void __pyx_f_7psychxr_6libovr_7_libovr_10LibOVRPose_newStruct(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_pos, PyObject *__pyx_v_ori); /* proto*/
static struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_f_7psychxr_6libovr_7_libovr_15LibOVRPoseState_fromPtr(ovrPoseStatef *__pyx_v_ptr, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_15LibOVRPoseState_fromPtr *__pyx_optional_args); /* proto*/
static void __pyx_f_7psychxr_6libovr_7_libovr_15LibOVRPoseState_newStruct(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self); /* proto*/
static struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_f_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_fromPtr(ovrTrackingState *__pyx_v_ptr, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_fromPtr *__pyx_optional_args); /* proto*/
static void __pyx_f_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_newStruct(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self); /* proto*/
static struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_f_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_fromPtr(ovrSessionStatus *__pyx_v_ptr, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_fromPtr *__pyx_optional_args); /* proto*/
static void __pyx_f_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_newStruct(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto*/
static struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_f_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_fromPtr(ovrHmdDesc *__pyx_v_ptr, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_fromPtr *__pyx_optional_args); /* proto*/
static void __pyx_f_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_newStruct(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/

/* Module declarations from 'psychxr.libovr' */

/* Module declarations from 'libc.stdint' */

/* Module declarations from 'psychxr.libovr.libovr_capi' */
static CYTHON_INLINE int __pyx_f_7psychxr_6libovr_11libovr_capi_OVR_SUCCESS(ovrResult); /*proto*/
static CYTHON_INLINE int __pyx_f_7psychxr_6libovr_11libovr_capi_OVR_UNQUALIFIED_SUCCESS(ovrResult); /*proto*/
static CYTHON_INLINE int __pyx_f_7psychxr_6libovr_11libovr_capi_OVR_FAILURE(ovrResult); /*proto*/

/* Module declarations from 'libcpp' */

/* Module declarations from 'psychxr.libovr.libovr_math' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'libc.math' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'cpython' */

/* Module declarations from 'cpython.object' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/
static CYTHON_INLINE int __pyx_f_5numpy_import_array(void); /*proto*/

/* Module declarations from 'psychxr.libovr._libovr' */
static PyTypeObject *__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose = 0;
static PyTypeObject *__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPoseState = 0;
static PyTypeObject *__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRTrackingState = 0;
static PyTypeObject *__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo = 0;
static PyTypeObject *__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRSessionStatus = 0;
static PyTypeObject *__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRHmdInfo = 0;
static PyTypeObject *__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRFrameStat = 0;
static PyTypeObject *__pyx_array_type = 0;
static PyTypeObject *__pyx_MemviewEnum_type = 0;
static PyTypeObject *__pyx_memoryview_type = 0;
static PyTypeObject *__pyx_memoryviewslice_type = 0;
static ovrInitParams __pyx_v_7psychxr_6libovr_7_libovr__initParams;
static ovrSession __pyx_v_7psychxr_6libovr_7_libovr__ptrSession;
static ovrGraphicsLuid __pyx_v_7psychxr_6libovr_7_libovr__gfxLuid;
static ovrHmdDesc __pyx_v_7psychxr_6libovr_7_libovr__hmdDesc;
static ovrBoundaryLookAndFeel __pyx_v_7psychxr_6libovr_7_libovr__boundryStyle;
static ovrTextureSwapChain __pyx_v_7psychxr_6libovr_7_libovr__swapChains[8];
static ovrMirrorTexture __pyx_v_7psychxr_6libovr_7_libovr__mirrorTexture;
static ovrLayerEyeFov __pyx_v_7psychxr_6libovr_7_libovr__eyeLayer;
static ovrEyeRenderDesc __pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[2];
static ovrPerfStats __pyx_v_7psychxr_6libovr_7_libovr__frameStats;
static ovrPerfStatsPerCompositorFrame __pyx_v_7psychxr_6libovr_7_libovr__lastFrameStats;
static ovrInputState __pyx_v_7psychxr_6libovr_7_libovr__inputStates[5];
static ovrInputState __pyx_v_7psychxr_6libovr_7_libovr__prevInputState[5];
static OVR::Matrix4f __pyx_v_7psychxr_6libovr_7_libovr__eyeProjectionMatrix[2];
static OVR::Matrix4f __pyx_v_7psychxr_6libovr_7_libovr__eyeViewMatrix[2];
static OVR::Matrix4f __pyx_v_7psychxr_6libovr_7_libovr__eyeViewProjectionMatrix[2];
static ovrErrorInfo __pyx_v_7psychxr_6libovr_7_libovr__last_error_info_;
static PyObject *__pyx_v_7psychxr_6libovr_7_libovr__supported_texture_formats = 0;
static PyObject *__pyx_v_7psychxr_6libovr_7_libovr__performance_hud_modes = 0;
static PyObject *__pyx_v_7psychxr_6libovr_7_libovr__mirror_texture_options = 0;
static PyObject *__pyx_v_7psychxr_6libovr_7_libovr__controller_type_enum = 0;
static PyObject *__pyx_v_7psychxr_6libovr_7_libovr__controller_buttons = 0;
static PyObject *__pyx_v_7psychxr_6libovr_7_libovr__touch_states = 0;
static PyObject *__pyx_v_7psychxr_6libovr_7_libovr__controller_types = 0;
static npy_intp __pyx_v_7psychxr_6libovr_7_libovr_VEC3_SHAPE[1];
static npy_intp __pyx_v_7psychxr_6libovr_7_libovr_QUAT_SHAPE[1];
static npy_intp __pyx_v_7psychxr_6libovr_7_libovr_MAT4_SHAPE[2];
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static float __pyx_f_7psychxr_6libovr_7_libovr_maxf(float, float); /*proto*/
static PyArrayObject *__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray(ovrVector3f *); /*proto*/
static PyArrayObject *__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrQuatf_as_ndarray(ovrQuatf *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static void *__pyx_align_pointer(void *, size_t); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static PyObject *assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, char *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, char *); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t = { "float32_t", NULL, sizeof(__pyx_t_5numpy_float32_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_float = { "float", NULL, sizeof(float), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int_t = { "int_t", NULL, sizeof(__pyx_t_5numpy_int_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int_t), 0 };
#define __Pyx_MODULE_NAME "psychxr.libovr._libovr"
extern int __pyx_module_is_main_psychxr__libovr___libovr;
int __pyx_module_is_main_psychxr__libovr___libovr = 0;

/* Implementation of 'psychxr.libovr._libovr' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static const char __pyx_k_[] = ": ";
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_N[] = "N";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_X[] = "X";
static const char __pyx_k_Y[] = "Y";
static const char __pyx_k_c[] = "c";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_Up[] = "Up";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_mv[] = "mv";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_px[] = "px";
static const char __pyx_k_py[] = "py";
static const char __pyx_k_pz[] = "pz";
static const char __pyx_k_rm[] = "rm";
static const char __pyx_k_rw[] = "rw";
static const char __pyx_k_rx[] = "rx";
static const char __pyx_k_ry[] = "ry";
static const char __pyx_k_rz[] = "rz";
static const char __pyx_k_up[] = "up";
static const char __pyx_k_MIT[] = "MIT";
static const char __pyx_k_Off[] = "Off";
static const char __pyx_k_all[] = "__all__";
static const char __pyx_k_eye[] = "eye";
static const char __pyx_k_fov[] = "fov";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_low[] = "low";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_off[] = "off";
static const char __pyx_k_ori[] = "ori";
static const char __pyx_k_pos[] = "pos";
static const char __pyx_k_red[] = "red";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_Back[] = "Back";
static const char __pyx_k_Beta[] = "Beta";
static const char __pyx_k_Down[] = "Down";
static const char __pyx_k_Home[] = "Home";
static const char __pyx_k_Left[] = "Left";
static const char __pyx_k_Xbox[] = "Xbox";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_blue[] = "blue";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_fast[] = "fast";
static const char __pyx_k_freq[] = "freq";
static const char __pyx_k_high[] = "high";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_stat[] = "stat";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_vals[] = "vals";
static const char __pyx_k_0_2_0[] = "0.2.0";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_Enter[] = "Enter";
static const char __pyx_k_LMask[] = "LMask";
static const char __pyx_k_Outer[] = "Outer";
static const char __pyx_k_RMask[] = "RMask";
static const char __pyx_k_Right[] = "Right";
static const char __pyx_k_Touch[] = "Touch";
static const char __pyx_k_VolUp[] = "VolUp";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_btype[] = "btype";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_color[] = "color";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_email[] = "__email__";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_floor[] = "floor";
static const char __pyx_k_getAt[] = "getAt";
static const char __pyx_k_getUp[] = "getUp";
static const char __pyx_k_green[] = "green";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_t_sec[] = "t_sec";
static const char __pyx_k_touch[] = "touch";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_LThumb[] = "LThumb";
static const char __pyx_k_RThumb[] = "RThumb";
static const char __pyx_k_Remote[] = "Remote";
static const char __pyx_k_author[] = "__author__";
static const char __pyx_k_button[] = "button";
static const char __pyx_k_create[] = "create";
static const char __pyx_k_distVp[] = "distVp";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_fov_in[] = "fov_in";
static const char __pyx_k_height[] = "height";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_layers[] = "layers";
static const char __pyx_k_levels[] = "levels";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_origin[] = "origin";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_radius[] = "radius";
static const char __pyx_k_rayDir[] = "rayDir";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_rising[] = "rising";
static const char __pyx_k_status[] = "__status__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_tex_id[] = "tex_id";
static const char __pyx_k_toPose[] = "toPose";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_Default[] = "Default";
static const char __pyx_k_Private[] = "Private";
static const char __pyx_k_VolDown[] = "VolDown";
static const char __pyx_k_absTime[] = "absTime";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_credits[] = "__credits__";
static const char __pyx_k_destroy[] = "destroy";
static const char __pyx_k_devices[] = "devices";
static const char __pyx_k_eyePose[] = "eyePose";
static const char __pyx_k_failure[] = "failure";
static const char __pyx_k_falling[] = "falling";
static const char __pyx_k_farClip[] = "farClip";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_forward[] = "forward";
static const char __pyx_k_fovPort[] = "fovPort";
static const char __pyx_k_inverse[] = "inverse";
static const char __pyx_k_license[] = "__license__";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_outRect[] = "outRect";
static const char __pyx_k_pressed[] = "pressed";
static const char __pyx_k_refPose[] = "refPose";
static const char __pyx_k_statIdx[] = "statIdx";
static const char __pyx_k_success[] = "success";
static const char __pyx_k_vec_out[] = "vec_out";
static const char __pyx_k_version[] = "__version__";
static const char __pyx_k_AswStats[] = "AswStats";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_LThumbUp[] = "LThumbUp";
static const char __pyx_k_PlayArea[] = "PlayArea";
static const char __pyx_k_RThumbUp[] = "RThumbUp";
static const char __pyx_k_buffSize[] = "buffSize";
static const char __pyx_k_deadzone[] = "deadzone";
static const char __pyx_k_endFrame[] = "endFrame";
static const char __pyx_k_getTouch[] = "getTouch";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_headPose[] = "headPose";
static const char __pyx_k_inverted[] = "inverted";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_maxRange[] = "maxRange";
static const char __pyx_k_nearClip[] = "nearClip";
static const char __pyx_k_numStats[] = "numStats";
static const char __pyx_k_outPoses[] = "outPoses";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_released[] = "released";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_shutdown[] = "shutdown";
static const char __pyx_k_thisPose[] = "thisPose";
static const char __pyx_k_toReturn[] = "toReturn";
static const char __pyx_k_LShoulder[] = "LShoulder";
static const char __pyx_k_LeftTouch[] = "LeftTouch";
static const char __pyx_k_RShoulder[] = "RShoulder";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_amplitude[] = "amplitude";
static const char __pyx_k_copyright[] = "__copyright__";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_frameStat[] = "frameStat";
static const char __pyx_k_frequency[] = "frequency";
static const char __pyx_k_getButton[] = "getButton";
static const char __pyx_k_mirror_id[] = "mirror_id";
static const char __pyx_k_newOrigin[] = "newOrigin";
static const char __pyx_k_outLength[] = "outLength";
static const char __pyx_k_outMatrix[] = "outMatrix";
static const char __pyx_k_outVector[] = "outVector";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_swapChain[] = "swapChain";
static const char __pyx_k_testState[] = "testState";
static const char __pyx_k_timeoutMS[] = "timeoutMS";
static const char __pyx_k_to_return[] = "to_return";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_LThumbRest[] = "LThumbRest";
static const char __pyx_k_LibOVRPose[] = "LibOVRPose";
static const char __pyx_k_RThumbRest[] = "RThumbRest";
static const char __pyx_k_RightTouch[] = "RightTouch";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_beginFrame[] = "beginFrame";
static const char __pyx_k_continuous[] = "continuous";
static const char __pyx_k_controller[] = "controller";
static const char __pyx_k_curButtons[] = "curButtons";
static const char __pyx_k_curTouches[] = "curTouches";
static const char __pyx_k_focusAware[] = "focusAware";
static const char __pyx_k_frameIndex[] = "frameIndex";
static const char __pyx_k_getHmdInfo[] = "getHmdInfo";
static const char __pyx_k_initialize[] = "initialize";
static const char __pyx_k_is_visible[] = "is_visible";
static const char __pyx_k_maintainer[] = "__maintainer__";
static const char __pyx_k_mirrorDesc[] = "mirrorDesc";
static const char __pyx_k_prvButtons[] = "prvButtons";
static const char __pyx_k_prvTouches[] = "prvTouches";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_swapConfig[] = "swapConfig";
static const char __pyx_k_targetPose[] = "targetPose";
static const char __pyx_k_timeout_ms[] = "timeout_ms";
static const char __pyx_k_use_marker[] = "use_marker";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_LeftEyeOnly[] = "LeftEyeOnly";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PerfSummary[] = "PerfSummary";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_VersionInfo[] = "VersionInfo";
static const char __pyx_k_current_idx[] = "current_idx";
static const char __pyx_k_devicePoses[] = "devicePoses";
static const char __pyx_k_deviceTypes[] = "deviceTypes";
static const char __pyx_k_errorString[] = "errorString";
static const char __pyx_k_hidePerfHud[] = "hidePerfHud";
static const char __pyx_k_perfHudMode[] = "perfHudMode";
static const char __pyx_k_stateResult[] = "stateResult";
static const char __pyx_k_triggerLeft[] = "triggerLeft";
static const char __pyx_k_RightEyeOnly[] = "RightEyeOnly";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_boundaryType[] = "boundaryType";
static const char __pyx_k_calcEyePoses[] = "calcEyePoses";
static const char __pyx_k_check_result[] = "check_result";
static const char __pyx_k_getEyeHeight[] = "getEyeHeight";
static const char __pyx_k_hideBoundary[] = "hideBoundary";
static const char __pyx_k_perfHudModes[] = "perfHudModes";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_showBoundary[] = "showBoundary";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_trackerCount[] = "trackerCount";
static const char __pyx_k_trackerIndex[] = "trackerIndex";
static const char __pyx_k_triggerRight[] = "triggerRight";
static const char __pyx_k_LIndexTrigger[] = "LIndexTrigger";
static const char __pyx_k_LatencyTiming[] = "LatencyTiming";
static const char __pyx_k_LibOVRHmdInfo[] = "LibOVRHmdInfo";
static const char __pyx_k_RIndexTrigger[] = "RIndexTrigger";
static const char __pyx_k_getFrameStats[] = "getFrameStats";
static const char __pyx_k_getUserHeight[] = "getUserHeight";
static const char __pyx_k_hmdToEyePoses[] = "hmdToEyePoses";
static const char __pyx_k_lastErrorInfo[] = "lastErrorInfo";
static const char __pyx_k_latencyMarker[] = "latencyMarker";
static const char __pyx_k_pyx_getbuffer[] = "__pyx_getbuffer";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_setHeadLocked[] = "setHeadLocked";
static const char __pyx_k_textureFormat[] = "textureFormat";
static const char __pyx_k_thumbstick_x0[] = "thumbstick_x0";
static const char __pyx_k_thumbstick_x1[] = "thumbstick_x1";
static const char __pyx_k_thumbstick_y0[] = "thumbstick_y0";
static const char __pyx_k_thumbstick_y1[] = "thumbstick_y1";
static const char __pyx_k_timeInSeconds[] = "timeInSeconds";
static const char __pyx_k_LIBOVR_SUCCESS[] = "LIBOVR_SUCCESS";
static const char __pyx_k_LIBOVR_TOUCH_A[] = "LIBOVR_TOUCH_A";
static const char __pyx_k_LIBOVR_TOUCH_B[] = "LIBOVR_TOUCH_B";
static const char __pyx_k_LIBOVR_TOUCH_X[] = "LIBOVR_TOUCH_X";
static const char __pyx_k_LIBOVR_TOUCH_Y[] = "LIBOVR_TOUCH_Y";
static const char __pyx_k_LIndexPointing[] = "LIndexPointing";
static const char __pyx_k_PostDistortion[] = "PostDistortion";
static const char __pyx_k_R8G8B8A8_UNORM[] = "R8G8B8A8_UNORM";
static const char __pyx_k_RIndexPointing[] = "RIndexPointing";
static const char __pyx_k_compFrameStats[] = "compFrameStats";
static const char __pyx_k_frameStatIndex[] = "frameStatIndex";
static const char __pyx_k_getDevicePoses[] = "getDevicePoses";
static const char __pyx_k_getNeckEyeDist[] = "getNeckEyeDist";
static const char __pyx_k_getTrackerInfo[] = "getTrackerInfo";
static const char __pyx_k_isHmdConnected[] = "isHmdConnected";
static const char __pyx_k_setHighQuality[] = "setHighQuality";
static const char __pyx_k_texelsPerPixel[] = "texelsPerPixel";
static const char __pyx_k_AppRenderTiming[] = "AppRenderTiming";
static const char __pyx_k_IncludeGuardian[] = "IncludeGuardian";
static const char __pyx_k_LIBOVR_BUTTON_A[] = "LIBOVR_BUTTON_A";
static const char __pyx_k_LIBOVR_BUTTON_B[] = "LIBOVR_BUTTON_B";
static const char __pyx_k_LIBOVR_BUTTON_X[] = "LIBOVR_BUTTON_X";
static const char __pyx_k_LIBOVR_BUTTON_Y[] = "LIBOVR_BUTTON_Y";
static const char __pyx_k_LIBOVR_EYE_LEFT[] = "LIBOVR_EYE_LEFT";
static const char __pyx_k_Laurie_M_Wilcox[] = "Laurie M. Wilcox";
static const char __pyx_k_LibOVRFrameStat[] = "LibOVRFrameStat";
static const char __pyx_k_LibOVRPoseState[] = "LibOVRPoseState";
static const char __pyx_k_R11G11B10_FLOAT[] = "R11G11B10_FLOAT";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_getEyeRenderFov[] = "getEyeRenderFov";
static const char __pyx_k_getGraphicsLUID[] = "getGraphicsLUID";
static const char __pyx_k_getHmdToEyePose[] = "getHmdToEyePose";
static const char __pyx_k_getTrackerCount[] = "getTrackerCount";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_resetFrameStats[] = "resetFrameStats";
static const char __pyx_k_setEyeRenderFov[] = "setEyeRenderFov";
static const char __pyx_k_setHmdToEyePose[] = "setHmdToEyePose";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_updatePerfStats[] = "updatePerfStats";
static const char __pyx_k_CompRenderTiming[] = "CompRenderTiming";
static const char __pyx_k_IncludeSystemGui[] = "IncludeSystemGui";
static const char __pyx_k_LIBOVR_BUTTON_UP[] = "LIBOVR_BUTTON_UP";
static const char __pyx_k_LIBOVR_EYE_COUNT[] = "LIBOVR_EYE_COUNT";
static const char __pyx_k_LIBOVR_EYE_RIGHT[] = "LIBOVR_EYE_RIGHT";
static const char __pyx_k_LIBOVR_HAND_LEFT[] = "LIBOVR_HAND_LEFT";
static const char __pyx_k_Matthew_D_Cutone[] = "Matthew D. Cutone";
static const char __pyx_k_cutonem_yorku_ca[] = "cutonem@yorku.ca";
static const char __pyx_k_getEyeRenderPose[] = "getEyeRenderPose";
static const char __pyx_k_getEyeToNoseDist[] = "getEyeToNoseDist";
static const char __pyx_k_getEyeViewMatrix[] = "getEyeViewMatrix";
static const char __pyx_k_getLastErrorInfo[] = "getLastErrorInfo";
static const char __pyx_k_getMirrorTexture[] = "getMirrorTexture";
static const char __pyx_k_getSessionStatus[] = "getSessionStatus";
static const char __pyx_k_getTrackingState[] = "getTrackingState";
static const char __pyx_k_setBoundaryColor[] = "setBoundaryColor";
static const char __pyx_k_setEyeRenderPose[] = "setEyeRenderPose";
static const char __pyx_k_updateInputState[] = "updateInputState";
static const char __pyx_k_waitToBeginFrame[] = "waitToBeginFrame";
static const char __pyx_k_LIBOVR_HAND_COUNT[] = "LIBOVR_HAND_COUNT";
static const char __pyx_k_LIBOVR_HAND_RIGHT[] = "LIBOVR_HAND_RIGHT";
static const char __pyx_k_LibOVRTrackerInfo[] = "LibOVRTrackerInfo";
static const char __pyx_k_calcEyeBufferSize[] = "calcEyeBufferSize";
static const char __pyx_k_connectionTimeout[] = "connectionTimeout";
static const char __pyx_k_currentInputState[] = "currentInputState";
static const char __pyx_k_getEyeAspectRatio[] = "getEyeAspectRatio";
static const char __pyx_k_getEyeFocalLength[] = "getEyeFocalLength";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_unqualifedSuccess[] = "unqualifedSuccess";
static const char __pyx_k_LIBOVR_BUTTON_BACK[] = "LIBOVR_BUTTON_BACK";
static const char __pyx_k_LIBOVR_BUTTON_DOWN[] = "LIBOVR_BUTTON_DOWN";
static const char __pyx_k_LIBOVR_BUTTON_HOME[] = "LIBOVR_BUTTON_HOME";
static const char __pyx_k_LIBOVR_BUTTON_LEFT[] = "LIBOVR_BUTTON_LEFT";
static const char __pyx_k_R16G16B16A16_FLOAT[] = "R16G16B16A16_FLOAT";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_getBoundaryVisible[] = "getBoundaryVisible";
static const char __pyx_k_getFrameStatsCount[] = "getFrameStatsCount";
static const char __pyx_k_previousInputState[] = "previousInputState";
static const char __pyx_k_resetBoundaryColor[] = "resetBoundaryColor";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_LIBOVR_BUTTON_ENTER[] = "LIBOVR_BUTTON_ENTER";
static const char __pyx_k_LIBOVR_BUTTON_LMASK[] = "LIBOVR_BUTTON_LMASK";
static const char __pyx_k_LIBOVR_BUTTON_RIGHT[] = "LIBOVR_BUTTON_RIGHT";
static const char __pyx_k_LIBOVR_BUTTON_RMASK[] = "LIBOVR_BUTTON_RMASK";
static const char __pyx_k_LIBOVR_BUTTON_VOLUP[] = "LIBOVR_BUTTON_VOLUP";
static const char __pyx_k_LIBOVR_ERROR_NO_HMD[] = "LIBOVR_ERROR_NO_HMD";
static const char __pyx_k_LIBOVR_TOUCH_LTHUMB[] = "LIBOVR_TOUCH_LTHUMB";
static const char __pyx_k_LIBOVR_TOUCH_RTHUMB[] = "LIBOVR_TOUCH_RTHUMB";
static const char __pyx_k_LibOVRSessionStatus[] = "LibOVRSessionStatus";
static const char __pyx_k_LibOVRTrackingState[] = "LibOVRTrackingState";
static const char __pyx_k_R8G8B8A8_UNORM_SRGB[] = "R8G8B8A8_UNORM_SRGB";
static const char __pyx_k_checkAswIsAvailable[] = "checkAswIsAvailable";
static const char __pyx_k_createMirrorTexture[] = "createMirrorTexture";
static const char __pyx_k_getThumbstickValues[] = "getThumbstickValues";
static const char __pyx_k_getVisibleProcessId[] = "getVisibleProcessId";
static const char __pyx_k_IncludeNotifications[] = "IncludeNotifications";
static const char __pyx_k_LIBOVR_BUTTON_LTHUMB[] = "LIBOVR_BUTTON_LTHUMB";
static const char __pyx_k_LIBOVR_BUTTON_RTHUMB[] = "LIBOVR_BUTTON_RTHUMB";
static const char __pyx_k_LIBOVR_ERROR_TIMEOUT[] = "LIBOVR_ERROR_TIMEOUT";
static const char __pyx_k_anyFrameStatsDropped[] = "anyFrameStatsDropped";
static const char __pyx_k_destroyMirrorTexture[] = "destroyMirrorTexture";
static const char __pyx_k_getDistortedViewport[] = "getDistortedViewport";
static const char __pyx_k_getEyeRenderViewport[] = "getEyeRenderViewport";
static const char __pyx_k_getHandTriggerValues[] = "getHandTriggerValues";
static const char __pyx_k_setEyeRenderViewport[] = "setEyeRenderViewport";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_LIBOVR_BUTTON_PRIVATE[] = "LIBOVR_BUTTON_PRIVATE";
static const char __pyx_k_LIBOVR_BUTTON_VOLDOWN[] = "LIBOVR_BUTTON_VOLDOWN";
static const char __pyx_k_LIBOVR_ERROR_LIB_LOAD[] = "LIBOVR_ERROR_LIB_LOAD";
static const char __pyx_k_LIBOVR_ERROR_LIB_PATH[] = "LIBOVR_ERROR_LIB_PATH";
static const char __pyx_k_LIBOVR_ERROR_OBSOLETE[] = "LIBOVR_ERROR_OBSOLETE";
static const char __pyx_k_LIBOVR_TOUCH_LTHUMBUP[] = "LIBOVR_TOUCH_LTHUMBUP";
static const char __pyx_k_LIBOVR_TOUCH_RTHUMBUP[] = "LIBOVR_TOUCH_RTHUMBUP";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_getBoundaryDimensions[] = "getBoundaryDimensions";
static const char __pyx_k_getIndexTriggerValues[] = "getIndexTriggerValues";
static const char __pyx_k_getTrackingOriginType[] = "getTrackingOriginType";
static const char __pyx_k_setTrackingOriginType[] = "setTrackingOriginType";
static const char __pyx_k_specifyTrackingOrigin[] = "specifyTrackingOrigin";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_commitTextureSwapChain[] = "commitTextureSwapChain";
static const char __pyx_k_getEyeProjectionMatrix[] = "getEyeProjectionMatrix";
static const char __pyx_k_isOculusServiceRunning[] = "isOculusServiceRunning";
static const char __pyx_k_psychxr_libovr__libovr[] = "psychxr.libovr._libovr";
static const char __pyx_k_recenterTrackingOrigin[] = "recenterTrackingOrigin";
static const char __pyx_k_setControllerVibration[] = "setControllerVibration";
static const char __pyx_k_LIBOVR_BUTTON_LSHOULDER[] = "LIBOVR_BUTTON_LSHOULDER";
static const char __pyx_k_LIBOVR_BUTTON_RSHOULDER[] = "LIBOVR_BUTTON_RSHOULDER";
static const char __pyx_k_LIBOVR_ERROR_DISALLOWED[] = "LIBOVR_ERROR_DISALLOWED";
static const char __pyx_k_LIBOVR_ERROR_INITIALIZE[] = "LIBOVR_ERROR_INITIALIZE";
static const char __pyx_k_LIBOVR_FORMAT_D16_UNORM[] = "LIBOVR_FORMAT_D16_UNORM";
static const char __pyx_k_LIBOVR_FORMAT_D32_FLOAT[] = "LIBOVR_FORMAT_D32_FLOAT";
static const char __pyx_k_LIBOVR_TOUCH_RTHUMBREST[] = "LIBOVR_TOUCH_RTHUMBREST";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_clearShouldRecenterFlag[] = "clearShouldRecenterFlag";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_destroyTextureSwapChain[] = "destroyTextureSwapChain";
static const char __pyx_k_getPredictedDisplayTime[] = "getPredictedDisplayTime";
static const char __pyx_k_refreshPerformanceStats[] = "refreshPerformanceStats";
static const char __pyx_k_Cannot_index_with_type_s[] = "Cannot index with type '%s'";
static const char __pyx_k_LIBOVR_ERROR_LIB_SYMBOLS[] = "LIBOVR_ERROR_LIB_SYMBOLS";
static const char __pyx_k_LIBOVR_ERROR_OLD_VERSION[] = "LIBOVR_ERROR_OLD_VERSION";
static const char __pyx_k_LIBOVR_ERROR_UNSUPPORTED[] = "LIBOVR_ERROR_UNSUPPORTED";
static const char __pyx_k_checkAppLastFrameDropped[] = "checkAppLastFrameDropped";
static const char __pyx_k_createTextureSwapChainGL[] = "createTextureSwapChainGL";
static const char __pyx_k_getEyeVerticalFovRadians[] = "getEyeVerticalFovRadians";
static const char __pyx_k_Invalid_shape_in_axis_d_d[] = "Invalid shape in axis %d: %d.";
static const char __pyx_k_LIBOVR_ERROR_DISPLAY_INIT[] = "LIBOVR_ERROR_DISPLAY_INIT";
static const char __pyx_k_LIBOVR_ERROR_DISPLAY_LOST[] = "LIBOVR_ERROR_DISPLAY_LOST";
static const char __pyx_k_LIBOVR_ERROR_SERVER_START[] = "LIBOVR_ERROR_SERVER_START";
static const char __pyx_k_checkCompLastFrameDropped[] = "checkCompLastFrameDropped";
static const char __pyx_k_LIBOVR_ERROR_LOST_TRACKING[] = "LIBOVR_ERROR_LOST_TRACKING";
static const char __pyx_k_LIBOVR_ERROR_SERVICE_ERROR[] = "LIBOVR_ERROR_SERVICE_ERROR";
static const char __pyx_k_LIBOVR_SUCCESS_NOT_VISIBLE[] = "LIBOVR_SUCCESS_NOT_VISIBLE";
static const char __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN0[] = "LIBOVR_TEXTURE_SWAP_CHAIN0";
static const char __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN1[] = "LIBOVR_TEXTURE_SWAP_CHAIN1";
static const char __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN2[] = "LIBOVR_TEXTURE_SWAP_CHAIN2";
static const char __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN3[] = "LIBOVR_TEXTURE_SWAP_CHAIN3";
static const char __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN4[] = "LIBOVR_TEXTURE_SWAP_CHAIN4";
static const char __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN5[] = "LIBOVR_TEXTURE_SWAP_CHAIN5";
static const char __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN6[] = "LIBOVR_TEXTURE_SWAP_CHAIN6";
static const char __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN7[] = "LIBOVR_TEXTURE_SWAP_CHAIN7";
static const char __pyx_k_LIBOVR_TOUCH_LINDEXTRIGGER[] = "LIBOVR_TOUCH_LINDEXTRIGGER";
static const char __pyx_k_getEyeHorizontalFovRadians[] = "getEyeHorizontalFovRadians";
static const char __pyx_k_psychxr_libovr__libovr_pyx[] = "psychxr\\libovr\\_libovr.pyx";
static const char __pyx_k_Invalid_frequency_specified[] = "Invalid frequency specified.";
static const char __pyx_k_LIBOVR_CONTROLLER_TYPE_XBOX[] = "LIBOVR_CONTROLLER_TYPE_XBOX";
static const char __pyx_k_LIBOVR_ERROR_CLIENT_VERSION[] = "LIBOVR_ERROR_CLIENT_VERSION";
static const char __pyx_k_LIBOVR_ERROR_LIB_SIGN_CHECK[] = "LIBOVR_ERROR_LIB_SIGN_CHECK";
static const char __pyx_k_LIBOVR_ERROR_NO_CALIBRATION[] = "LIBOVR_ERROR_NO_CALIBRATION";
static const char __pyx_k_LIBOVR_ERROR_OUT_OF_DATE_OS[] = "LIBOVR_ERROR_OUT_OF_DATE_OS";
static const char __pyx_k_LIBOVR_ERROR_REMOTE_SESSION[] = "LIBOVR_ERROR_REMOTE_SESSION";
static const char __pyx_k_LIBOVR_TOUCH_LINDEXPOINTING[] = "LIBOVR_TOUCH_LINDEXPOINTING";
static const char __pyx_k_LIBOVR_TOUCH_RINDEXPOINTING[] = "LIBOVR_TOUCH_RINDEXPOINTING";
static const char __pyx_k_getConnectedControllerTypes[] = "getConnectedControllerTypes";
static const char __pyx_k_getTextureSwapChainBufferGL[] = "getTextureSwapChainBufferGL";
static const char __pyx_k_getTextureSwapChainLengthGL[] = "getTextureSwapChainLengthGL";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static const char __pyx_k_setEyeColorTextureSwapChain[] = "setEyeColorTextureSwapChain";
static const char __pyx_k_LIBOVR_CONTROLLER_TYPE_TOUCH[] = "LIBOVR_CONTROLLER_TYPE_TOUCH";
static const char __pyx_k_LIBOVR_ERROR_AUDIO_COM_ERROR[] = "LIBOVR_ERROR_AUDIO_COM_ERROR";
static const char __pyx_k_LIBOVR_ERROR_DISPLAY_REMOVED[] = "LIBOVR_ERROR_DISPLAY_REMOVED";
static const char __pyx_k_LIBOVR_ERROR_INCOMPATIBLE_OS[] = "LIBOVR_ERROR_INCOMPATIBLE_OS";
static const char __pyx_k_LIBOVR_ERROR_INVALID_SESSION[] = "LIBOVR_ERROR_INVALID_SESSION";
static const char __pyx_k_LIBOVR_ERROR_NOT_INITIALIZED[] = "LIBOVR_ERROR_NOT_INITIALIZED";
static const char __pyx_k_LIBOVR_ERROR_SERVICE_VERSION[] = "LIBOVR_ERROR_SERVICE_VERSION";
static const char __pyx_k_LIBOVR_FORMAT_R8G8B8A8_UNORM[] = "LIBOVR_FORMAT_R8G8B8A8_UNORM";
static const char __pyx_k_getPixelsPerTanAngleAtCenter[] = "getPixelsPerTanAngleAtCenter";
static const char __pyx_k_LIBOVR_CONTROLLER_TYPE_LTOUCH[] = "LIBOVR_CONTROLLER_TYPE_LTOUCH";
static const char __pyx_k_LIBOVR_CONTROLLER_TYPE_REMOTE[] = "LIBOVR_CONTROLLER_TYPE_REMOTE";
static const char __pyx_k_LIBOVR_CONTROLLER_TYPE_RTOUCH[] = "LIBOVR_CONTROLLER_TYPE_RTOUCH";
static const char __pyx_k_LIBOVR_ERROR_REINITIALIZATION[] = "LIBOVR_ERROR_REINITIALIZATION";
static const char __pyx_k_LIBOVR_FORMAT_R11G11B10_FLOAT[] = "LIBOVR_FORMAT_R11G11B10_FLOAT";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_Frame_stats_index_out_of_range[] = "Frame stats index out of range.";
static const char __pyx_k_Invalid_trigger_mode_specified[] = "Invalid trigger mode specified.";
static const char __pyx_k_LIBOVR_ERROR_INITIALIZE_VULKAN[] = "LIBOVR_ERROR_INITIALIZE_VULKAN";
static const char __pyx_k_LIBOVR_ERROR_INVALID_OPERATION[] = "LIBOVR_ERROR_INVALID_OPERATION";
static const char __pyx_k_LIBOVR_ERROR_INVALID_PARAMETER[] = "LIBOVR_ERROR_INVALID_PARAMETER";
static const char __pyx_k_LIBOVR_ERROR_LEAKING_RESOURCES[] = "LIBOVR_ERROR_LEAKING_RESOURCES";
static const char __pyx_k_LIBOVR_ERROR_RUNTIME_EXCEPTION[] = "LIBOVR_ERROR_RUNTIME_EXCEPTION";
static const char __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_HMD[] = "LIBOVR_TRACKED_DEVICE_TYPE_HMD";
static const char __pyx_k_getAdaptiveGpuPerformanceScale[] = "getAdaptiveGpuPerformanceScale";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_Copyright_2019_Matthew_D_Cutone[] = "Copyright 2019 Matthew D. Cutone";
static const char __pyx_k_Invalid_boundary_type_specified[] = "Invalid boundary type specified.";
static const char __pyx_k_LIBOVR_ERROR_CONTENT_PROTECTION[] = "LIBOVR_ERROR_CONTENT_PROTECTION_NOT_AVAILABLE";
static const char __pyx_k_LIBOVR_ERROR_DEVICE_UNAVAILABLE[] = "LIBOVR_ERROR_DEVICE_UNAVAILABLE";
static const char __pyx_k_LIBOVR_ERROR_MISFORMATTED_BLOCK[] = "LIBOVR_ERROR_MISFORMATTED_BLOCK";
static const char __pyx_k_LIBOVR_ERROR_NO_EXTERNAL_CAMERA[] = "LIBOVR_ERROR_NO_EXTERNAL_CAMERA_INFO";
static const char __pyx_k_LIBOVR_ERROR_SERVICE_CONNECTION[] = "LIBOVR_ERROR_SERVICE_CONNECTION";
static const char __pyx_k_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN[] = "LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_FULL";
static const char __pyx_k_LIBOVR_FORMAT_D24_UNORM_S8_UINT[] = "LIBOVR_FORMAT_D24_UNORM_S8_UINT";
static const char __pyx_k_LIBOVR_MAX_PROVIDED_FRAME_STATS[] = "LIBOVR_MAX_PROVIDED_FRAME_STATS";
static const char __pyx_k_LIBOVR_SUCCESS_BOUNDARY_INVALID[] = "LIBOVR_SUCCESS_BOUNDARY_INVALID";
static const char __pyx_k_LibOVRPose_px_py_pz_rx_ry_rz_rw[] = "LibOVRPose(({px}, {py}, {pz}), ({rx}, {ry}, {rz}, {rw}))";
static const char __pyx_k_getTextureSwapChainCurrentIndex[] = "getTextureSwapChainCurrentIndex";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Cannot_get_buffer_ID_NULL_eye_bu[] = "Cannot get buffer ID, NULL eye buffer texture.";
static const char __pyx_k_Cannot_get_swap_chain_length_NUL[] = "Cannot get swap chain length, NULL eye buffer texture.";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Failed_to_allocate_array_deviceP[] = "Failed to allocate array 'devicePoses'.";
static const char __pyx_k_Failed_to_allocate_array_devices[] = "Failed to allocate array 'devices'.";
static const char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static const char __pyx_k_Incompatible_checksums_s_vs_0xb0[] = "Incompatible checksums (%s vs 0xb068931 = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Invalid_controller_type_specifie[] = "Invalid controller type specified.";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got %s";
static const char __pyx_k_Invalid_performance_HUD_mode_spe[] = "Invalid performance HUD mode specified.";
static const char __pyx_k_LIBOVR_ERROR_APPLICATION_VISIBLE[] = "LIBOVR_ERROR_APPLICATION_VISIBLE";
static const char __pyx_k_LIBOVR_ERROR_AUDIO_DEVICE_NOT_FO[] = "LIBOVR_ERROR_AUDIO_DEVICE_NOT_FOUND";
static const char __pyx_k_LIBOVR_ERROR_BLACKLISTED_GFX_DRI[] = "LIBOVR_ERROR_BLACKLISTED_GFX_DRIVER";
static const char __pyx_k_LIBOVR_ERROR_CLIENT_SKIPPED_DEST[] = "LIBOVR_ERROR_CLIENT_SKIPPED_DESTROY";
static const char __pyx_k_LIBOVR_ERROR_CLIENT_SKIPPED_SHUT[] = "LIBOVR_ERROR_CLIENT_SKIPPED_SHUTDOWN";
static const char __pyx_k_LIBOVR_ERROR_DISABLED_OR_DEFAULT[] = "LIBOVR_ERROR_DISABLED_OR_DEFAULT_ADAPTER";
static const char __pyx_k_LIBOVR_ERROR_DISPLAY_LIMIT_REACH[] = "LIBOVR_ERROR_DISPLAY_LIMIT_REACHED";
static const char __pyx_k_LIBOVR_ERROR_DISPLAY_MANAGER_INI[] = "LIBOVR_ERROR_DISPLAY_MANAGER_INIT";
static const char __pyx_k_LIBOVR_ERROR_DISPLAY_PLUGGED_INC[] = "LIBOVR_ERROR_DISPLAY_PLUGGED_INCORRECTY";
static const char __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_CAP[] = "LIBOVR_ERROR_EXTERNAL_CAMERA_CAPTURE_FAILED";
static const char __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_INI[] = "LIBOVR_ERROR_EXTERNAL_CAMERA_INITIALIZED_FAILED";
static const char __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM[] = "LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_BUFFER_SIZE";
static const char __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NOT[] = "LIBOVR_ERROR_EXTERNAL_CAMERA_NOT_CALIBRATED";
static const char __pyx_k_LIBOVR_ERROR_GRAPHICS_DEVICE_RES[] = "LIBOVR_ERROR_GRAPHICS_DEVICE_RESET";
static const char __pyx_k_LIBOVR_ERROR_HYBRID_GRAPHICS_NOT[] = "LIBOVR_ERROR_HYBRID_GRAPHICS_NOT_SUPPORTED";
static const char __pyx_k_LIBOVR_ERROR_INSUFFICENT_ARRAY_S[] = "LIBOVR_ERROR_INSUFFICENT_ARRAY_SIZE";
static const char __pyx_k_LIBOVR_ERROR_INVALID_HEADSET_ORI[] = "LIBOVR_ERROR_INVALID_HEADSET_ORIENTATION";
static const char __pyx_k_LIBOVR_ERROR_MEMORY_ALLOCATION_F[] = "LIBOVR_ERROR_MEMORY_ALLOCATION_FAILURE";
static const char __pyx_k_LIBOVR_ERROR_MISMATCHED_ADAPTERS[] = "LIBOVR_ERROR_MISMATCHED_ADAPTERS";
static const char __pyx_k_LIBOVR_ERROR_NO_VALID_VR_DISPLAY[] = "LIBOVR_ERROR_NO_VALID_VR_DISPLAY_SYSTEM";
static const char __pyx_k_LIBOVR_ERROR_OUT_OF_DATE_GFX_DRI[] = "LIBOVR_ERROR_OUT_OF_DATE_GFX_DRIVER";
static const char __pyx_k_LIBOVR_ERROR_SERVICE_DEADLOCK_DE[] = "LIBOVR_ERROR_SERVICE_DEADLOCK_DETECTED";
static const char __pyx_k_LIBOVR_ERROR_TRACKER_DRIVER_INIT[] = "LIBOVR_ERROR_TRACKER_DRIVER_INIT";
static const char __pyx_k_LIBOVR_FORMAT_R16G16B16A16_FLOAT[] = "LIBOVR_FORMAT_R16G16B16A16_FLOAT";
static const char __pyx_k_LIBOVR_FORMAT_R8G8B8A8_UNORM_SRG[] = "LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB";
static const char __pyx_k_LIBOVR_SUCCESS_DEVICE_UNAVAILABL[] = "LIBOVR_SUCCESS_DEVICE_UNAVAILABLE";
static const char __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_LTOUC[] = "LIBOVR_TRACKED_DEVICE_TYPE_LTOUCH";
static const char __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC[] = "LIBOVR_TRACKED_DEVICE_TYPE_OBJECT0";
static const char __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_RTOUC[] = "LIBOVR_TRACKED_DEVICE_TYPE_RTOUCH";
static const char __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_TOUCH[] = "LIBOVR_TRACKED_DEVICE_TYPE_TOUCH";
static const char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis %d)";
static const char __pyx_k_This_extension_module_exposes_th[] = "This extension module exposes the LibOVR API to Python using the official,\nproprietary Oculus PC SDK.\n\nThis extension module makes use of the official Oculus PC SDK. A C/C++ interface\nfor tracking, rendering, and VR math for Oculus products. The Oculus PC SDK is\nCopyright (c) Facebook Technologies, LLC and its affiliates. All rights\nreserved. You must accept the 'EULA', 'Terms of Use' and 'Privacy Policy'\nassociated with the Oculus PC SDK to use this module in your software (which you\ndid when you downloaded the SDK to build this module, didn't ya?), if not see\nhttps://www.oculus.com/legal/terms-of-service/ to access those documents.\n\n";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension %d (got %d and %d)";
static const char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
static const char __pyx_k_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_2[] = "LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_INVALID";
static const char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static const char __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_2[] = "LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_MISMATCH";
static const char __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_3[] = "LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_WRONG_SIZE";
static const char __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_2[] = "LIBOVR_TRACKED_DEVICE_TYPE_OBJECT1";
static const char __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_3[] = "LIBOVR_TRACKED_DEVICE_TYPE_OBJECT2";
static const char __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_4[] = "LIBOVR_TRACKED_DEVICE_TYPE_OBJECT3";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_s_0_2_0;
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_ASCII;
static PyObject *__pyx_n_s_AppRenderTiming;
static PyObject *__pyx_n_s_AswStats;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_s_Back;
static PyObject *__pyx_n_s_Beta;
static PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
static PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
static PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
static PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
static PyObject *__pyx_kp_s_Cannot_get_buffer_ID_NULL_eye_bu;
static PyObject *__pyx_kp_s_Cannot_get_swap_chain_length_NUL;
static PyObject *__pyx_kp_s_Cannot_index_with_type_s;
static PyObject *__pyx_n_s_CompRenderTiming;
static PyObject *__pyx_kp_s_Copyright_2019_Matthew_D_Cutone;
static PyObject *__pyx_n_s_Default;
static PyObject *__pyx_n_s_Down;
static PyObject *__pyx_n_s_Ellipsis;
static PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
static PyObject *__pyx_n_s_Enter;
static PyObject *__pyx_kp_s_Failed_to_allocate_array_deviceP;
static PyObject *__pyx_kp_s_Failed_to_allocate_array_devices;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_kp_s_Frame_stats_index_out_of_range;
static PyObject *__pyx_n_s_Home;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_IncludeGuardian;
static PyObject *__pyx_n_s_IncludeNotifications;
static PyObject *__pyx_n_s_IncludeSystemGui;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xb0;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
static PyObject *__pyx_kp_s_Invalid_boundary_type_specified;
static PyObject *__pyx_kp_s_Invalid_controller_type_specifie;
static PyObject *__pyx_kp_s_Invalid_frequency_specified;
static PyObject *__pyx_kp_s_Invalid_mode_expected_c_or_fortr;
static PyObject *__pyx_kp_s_Invalid_performance_HUD_mode_spe;
static PyObject *__pyx_kp_s_Invalid_shape_in_axis_d_d;
static PyObject *__pyx_kp_s_Invalid_trigger_mode_specified;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_A;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_B;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_BACK;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_DOWN;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_ENTER;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_HOME;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_LEFT;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_LMASK;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_LSHOULDER;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_LTHUMB;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_PRIVATE;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_RIGHT;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_RMASK;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_RSHOULDER;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_RTHUMB;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_UP;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_VOLDOWN;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_VOLUP;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_X;
static PyObject *__pyx_n_s_LIBOVR_BUTTON_Y;
static PyObject *__pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH;
static PyObject *__pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE;
static PyObject *__pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH;
static PyObject *__pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH;
static PyObject *__pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX;
static PyObject *__pyx_n_s_LIBOVR_ERROR_APPLICATION_VISIBLE;
static PyObject *__pyx_n_s_LIBOVR_ERROR_AUDIO_COM_ERROR;
static PyObject *__pyx_n_s_LIBOVR_ERROR_AUDIO_DEVICE_NOT_FO;
static PyObject *__pyx_n_s_LIBOVR_ERROR_BLACKLISTED_GFX_DRI;
static PyObject *__pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_DEST;
static PyObject *__pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_SHUT;
static PyObject *__pyx_n_s_LIBOVR_ERROR_CLIENT_VERSION;
static PyObject *__pyx_n_s_LIBOVR_ERROR_CONTENT_PROTECTION;
static PyObject *__pyx_n_s_LIBOVR_ERROR_DEVICE_UNAVAILABLE;
static PyObject *__pyx_n_s_LIBOVR_ERROR_DISABLED_OR_DEFAULT;
static PyObject *__pyx_n_s_LIBOVR_ERROR_DISALLOWED;
static PyObject *__pyx_n_s_LIBOVR_ERROR_DISPLAY_INIT;
static PyObject *__pyx_n_s_LIBOVR_ERROR_DISPLAY_LIMIT_REACH;
static PyObject *__pyx_n_s_LIBOVR_ERROR_DISPLAY_LOST;
static PyObject *__pyx_n_s_LIBOVR_ERROR_DISPLAY_MANAGER_INI;
static PyObject *__pyx_n_s_LIBOVR_ERROR_DISPLAY_PLUGGED_INC;
static PyObject *__pyx_n_s_LIBOVR_ERROR_DISPLAY_REMOVED;
static PyObject *__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_CAP;
static PyObject *__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_INI;
static PyObject *__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM;
static PyObject *__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_2;
static PyObject *__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_3;
static PyObject *__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NOT;
static PyObject *__pyx_n_s_LIBOVR_ERROR_GRAPHICS_DEVICE_RES;
static PyObject *__pyx_n_s_LIBOVR_ERROR_HYBRID_GRAPHICS_NOT;
static PyObject *__pyx_n_s_LIBOVR_ERROR_INCOMPATIBLE_OS;
static PyObject *__pyx_n_s_LIBOVR_ERROR_INITIALIZE;
static PyObject *__pyx_n_s_LIBOVR_ERROR_INITIALIZE_VULKAN;
static PyObject *__pyx_n_s_LIBOVR_ERROR_INSUFFICENT_ARRAY_S;
static PyObject *__pyx_n_s_LIBOVR_ERROR_INVALID_HEADSET_ORI;
static PyObject *__pyx_n_s_LIBOVR_ERROR_INVALID_OPERATION;
static PyObject *__pyx_n_s_LIBOVR_ERROR_INVALID_PARAMETER;
static PyObject *__pyx_n_s_LIBOVR_ERROR_INVALID_SESSION;
static PyObject *__pyx_n_s_LIBOVR_ERROR_LEAKING_RESOURCES;
static PyObject *__pyx_n_s_LIBOVR_ERROR_LIB_LOAD;
static PyObject *__pyx_n_s_LIBOVR_ERROR_LIB_PATH;
static PyObject *__pyx_n_s_LIBOVR_ERROR_LIB_SIGN_CHECK;
static PyObject *__pyx_n_s_LIBOVR_ERROR_LIB_SYMBOLS;
static PyObject *__pyx_n_s_LIBOVR_ERROR_LOST_TRACKING;
static PyObject *__pyx_n_s_LIBOVR_ERROR_MEMORY_ALLOCATION_F;
static PyObject *__pyx_n_s_LIBOVR_ERROR_MISFORMATTED_BLOCK;
static PyObject *__pyx_n_s_LIBOVR_ERROR_MISMATCHED_ADAPTERS;
static PyObject *__pyx_n_s_LIBOVR_ERROR_NOT_INITIALIZED;
static PyObject *__pyx_n_s_LIBOVR_ERROR_NO_CALIBRATION;
static PyObject *__pyx_n_s_LIBOVR_ERROR_NO_EXTERNAL_CAMERA;
static PyObject *__pyx_n_s_LIBOVR_ERROR_NO_HMD;
static PyObject *__pyx_n_s_LIBOVR_ERROR_NO_VALID_VR_DISPLAY;
static PyObject *__pyx_n_s_LIBOVR_ERROR_OBSOLETE;
static PyObject *__pyx_n_s_LIBOVR_ERROR_OLD_VERSION;
static PyObject *__pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_GFX_DRI;
static PyObject *__pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_OS;
static PyObject *__pyx_n_s_LIBOVR_ERROR_REINITIALIZATION;
static PyObject *__pyx_n_s_LIBOVR_ERROR_REMOTE_SESSION;
static PyObject *__pyx_n_s_LIBOVR_ERROR_RUNTIME_EXCEPTION;
static PyObject *__pyx_n_s_LIBOVR_ERROR_SERVER_START;
static PyObject *__pyx_n_s_LIBOVR_ERROR_SERVICE_CONNECTION;
static PyObject *__pyx_n_s_LIBOVR_ERROR_SERVICE_DEADLOCK_DE;
static PyObject *__pyx_n_s_LIBOVR_ERROR_SERVICE_ERROR;
static PyObject *__pyx_n_s_LIBOVR_ERROR_SERVICE_VERSION;
static PyObject *__pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN;
static PyObject *__pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_2;
static PyObject *__pyx_n_s_LIBOVR_ERROR_TIMEOUT;
static PyObject *__pyx_n_s_LIBOVR_ERROR_TRACKER_DRIVER_INIT;
static PyObject *__pyx_n_s_LIBOVR_ERROR_UNSUPPORTED;
static PyObject *__pyx_n_s_LIBOVR_EYE_COUNT;
static PyObject *__pyx_n_s_LIBOVR_EYE_LEFT;
static PyObject *__pyx_n_s_LIBOVR_EYE_RIGHT;
static PyObject *__pyx_n_s_LIBOVR_FORMAT_D16_UNORM;
static PyObject *__pyx_n_s_LIBOVR_FORMAT_D24_UNORM_S8_UINT;
static PyObject *__pyx_n_s_LIBOVR_FORMAT_D32_FLOAT;
static PyObject *__pyx_n_s_LIBOVR_FORMAT_R11G11B10_FLOAT;
static PyObject *__pyx_n_s_LIBOVR_FORMAT_R16G16B16A16_FLOAT;
static PyObject *__pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM;
static PyObject *__pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM_SRG;
static PyObject *__pyx_n_s_LIBOVR_HAND_COUNT;
static PyObject *__pyx_n_s_LIBOVR_HAND_LEFT;
static PyObject *__pyx_n_s_LIBOVR_HAND_RIGHT;
static PyObject *__pyx_n_s_LIBOVR_MAX_PROVIDED_FRAME_STATS;
static PyObject *__pyx_n_s_LIBOVR_SUCCESS;
static PyObject *__pyx_n_s_LIBOVR_SUCCESS_BOUNDARY_INVALID;
static PyObject *__pyx_n_s_LIBOVR_SUCCESS_DEVICE_UNAVAILABL;
static PyObject *__pyx_n_s_LIBOVR_SUCCESS_NOT_VISIBLE;
static PyObject *__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN0;
static PyObject *__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN1;
static PyObject *__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN2;
static PyObject *__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN3;
static PyObject *__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN4;
static PyObject *__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN5;
static PyObject *__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN6;
static PyObject *__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN7;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_A;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_B;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_LINDEXPOINTING;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_LINDEXTRIGGER;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_LTHUMB;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_LTHUMBUP;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_RINDEXPOINTING;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_RTHUMB;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_RTHUMBREST;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_RTHUMBUP;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_X;
static PyObject *__pyx_n_s_LIBOVR_TOUCH_Y;
static PyObject *__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_HMD;
static PyObject *__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_LTOUC;
static PyObject *__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC;
static PyObject *__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_2;
static PyObject *__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_3;
static PyObject *__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_4;
static PyObject *__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_RTOUC;
static PyObject *__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_TOUCH;
static PyObject *__pyx_n_s_LIndexPointing;
static PyObject *__pyx_n_s_LIndexTrigger;
static PyObject *__pyx_n_s_LMask;
static PyObject *__pyx_n_s_LShoulder;
static PyObject *__pyx_n_s_LThumb;
static PyObject *__pyx_n_s_LThumbRest;
static PyObject *__pyx_n_s_LThumbUp;
static PyObject *__pyx_n_s_LatencyTiming;
static PyObject *__pyx_kp_s_Laurie_M_Wilcox;
static PyObject *__pyx_n_s_Left;
static PyObject *__pyx_n_s_LeftEyeOnly;
static PyObject *__pyx_n_s_LeftTouch;
static PyObject *__pyx_n_s_LibOVRFrameStat;
static PyObject *__pyx_n_s_LibOVRHmdInfo;
static PyObject *__pyx_n_s_LibOVRPose;
static PyObject *__pyx_n_s_LibOVRPoseState;
static PyObject *__pyx_kp_s_LibOVRPose_px_py_pz_rx_ry_rz_rw;
static PyObject *__pyx_n_s_LibOVRSessionStatus;
static PyObject *__pyx_n_s_LibOVRTrackerInfo;
static PyObject *__pyx_n_s_LibOVRTrackingState;
static PyObject *__pyx_n_s_MIT;
static PyObject *__pyx_kp_s_Matthew_D_Cutone;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
static PyObject *__pyx_kp_s_MemoryView_of_r_object;
static PyObject *__pyx_n_s_N;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_b_O;
static PyObject *__pyx_n_s_Off;
static PyObject *__pyx_kp_s_Out_of_bounds_on_buffer_access_a;
static PyObject *__pyx_n_s_Outer;
static PyObject *__pyx_n_s_PerfSummary;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_PlayArea;
static PyObject *__pyx_n_s_PostDistortion;
static PyObject *__pyx_n_s_Private;
static PyObject *__pyx_n_s_R11G11B10_FLOAT;
static PyObject *__pyx_n_s_R16G16B16A16_FLOAT;
static PyObject *__pyx_n_s_R8G8B8A8_UNORM;
static PyObject *__pyx_n_s_R8G8B8A8_UNORM_SRGB;
static PyObject *__pyx_n_s_RIndexPointing;
static PyObject *__pyx_n_s_RIndexTrigger;
static PyObject *__pyx_n_s_RMask;
static PyObject *__pyx_n_s_RShoulder;
static PyObject *__pyx_n_s_RThumb;
static PyObject *__pyx_n_s_RThumbRest;
static PyObject *__pyx_n_s_RThumbUp;
static PyObject *__pyx_n_s_Remote;
static PyObject *__pyx_n_s_Right;
static PyObject *__pyx_n_s_RightEyeOnly;
static PyObject *__pyx_n_s_RightTouch;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_Touch;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
static PyObject *__pyx_n_s_Up;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_VersionInfo;
static PyObject *__pyx_n_s_View_MemoryView;
static PyObject *__pyx_n_s_VolDown;
static PyObject *__pyx_n_s_VolUp;
static PyObject *__pyx_n_s_X;
static PyObject *__pyx_n_s_Xbox;
static PyObject *__pyx_n_s_Y;
static PyObject *__pyx_n_s_absTime;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_allocate_buffer;
static PyObject *__pyx_n_s_amplitude;
static PyObject *__pyx_n_s_anyFrameStatsDropped;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_asarray;
static PyObject *__pyx_n_s_author;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_beginFrame;
static PyObject *__pyx_n_s_blue;
static PyObject *__pyx_n_s_boundaryType;
static PyObject *__pyx_n_s_btype;
static PyObject *__pyx_n_s_buffSize;
static PyObject *__pyx_n_s_button;
static PyObject *__pyx_n_s_c;
static PyObject *__pyx_n_u_c;
static PyObject *__pyx_n_s_calcEyeBufferSize;
static PyObject *__pyx_n_s_calcEyePoses;
static PyObject *__pyx_n_s_checkAppLastFrameDropped;
static PyObject *__pyx_n_s_checkAswIsAvailable;
static PyObject *__pyx_n_s_checkCompLastFrameDropped;
static PyObject *__pyx_n_s_check_result;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_clearShouldRecenterFlag;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_color;
static PyObject *__pyx_n_s_commitTextureSwapChain;
static PyObject *__pyx_n_s_compFrameStats;
static PyObject *__pyx_n_s_connectionTimeout;
static PyObject *__pyx_kp_s_contiguous_and_direct;
static PyObject *__pyx_kp_s_contiguous_and_indirect;
static PyObject *__pyx_n_s_continuous;
static PyObject *__pyx_n_s_controller;
static PyObject *__pyx_n_s_copyright;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_create;
static PyObject *__pyx_n_s_createMirrorTexture;
static PyObject *__pyx_n_s_createTextureSwapChainGL;
static PyObject *__pyx_n_s_credits;
static PyObject *__pyx_n_s_curButtons;
static PyObject *__pyx_n_s_curTouches;
static PyObject *__pyx_n_s_currentInputState;
static PyObject *__pyx_n_s_current_idx;
static PyObject *__pyx_kp_s_cutonem_yorku_ca;
static PyObject *__pyx_n_s_deadzone;
static PyObject *__pyx_n_s_destroy;
static PyObject *__pyx_n_s_destroyMirrorTexture;
static PyObject *__pyx_n_s_destroyTextureSwapChain;
static PyObject *__pyx_n_s_devicePoses;
static PyObject *__pyx_n_s_deviceTypes;
static PyObject *__pyx_n_s_devices;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_distVp;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtype_is_object;
static PyObject *__pyx_n_s_email;
static PyObject *__pyx_n_s_enable;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_endFrame;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_errorString;
static PyObject *__pyx_n_s_eye;
static PyObject *__pyx_n_s_eyePose;
static PyObject *__pyx_n_s_failure;
static PyObject *__pyx_n_s_falling;
static PyObject *__pyx_n_s_farClip;
static PyObject *__pyx_n_s_fast;
static PyObject *__pyx_n_s_flags;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_floor;
static PyObject *__pyx_n_s_focusAware;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_fortran;
static PyObject *__pyx_n_u_fortran;
static PyObject *__pyx_n_s_forward;
static PyObject *__pyx_n_s_fov;
static PyObject *__pyx_n_s_fovPort;
static PyObject *__pyx_n_s_fov_in;
static PyObject *__pyx_n_s_frameIndex;
static PyObject *__pyx_n_s_frameStat;
static PyObject *__pyx_n_s_frameStatIndex;
static PyObject *__pyx_n_s_freq;
static PyObject *__pyx_n_s_frequency;
static PyObject *__pyx_n_s_getAdaptiveGpuPerformanceScale;
static PyObject *__pyx_n_s_getAt;
static PyObject *__pyx_n_s_getBoundaryDimensions;
static PyObject *__pyx_n_s_getBoundaryVisible;
static PyObject *__pyx_n_s_getButton;
static PyObject *__pyx_n_s_getConnectedControllerTypes;
static PyObject *__pyx_n_s_getDevicePoses;
static PyObject *__pyx_n_s_getDistortedViewport;
static PyObject *__pyx_n_s_getEyeAspectRatio;
static PyObject *__pyx_n_s_getEyeFocalLength;
static PyObject *__pyx_n_s_getEyeHeight;
static PyObject *__pyx_n_s_getEyeHorizontalFovRadians;
static PyObject *__pyx_n_s_getEyeProjectionMatrix;
static PyObject *__pyx_n_s_getEyeRenderFov;
static PyObject *__pyx_n_s_getEyeRenderPose;
static PyObject *__pyx_n_s_getEyeRenderViewport;
static PyObject *__pyx_n_s_getEyeToNoseDist;
static PyObject *__pyx_n_s_getEyeVerticalFovRadians;
static PyObject *__pyx_n_s_getEyeViewMatrix;
static PyObject *__pyx_n_s_getFrameStats;
static PyObject *__pyx_n_s_getFrameStatsCount;
static PyObject *__pyx_n_s_getGraphicsLUID;
static PyObject *__pyx_n_s_getHandTriggerValues;
static PyObject *__pyx_n_s_getHmdInfo;
static PyObject *__pyx_n_s_getHmdToEyePose;
static PyObject *__pyx_n_s_getIndexTriggerValues;
static PyObject *__pyx_n_s_getLastErrorInfo;
static PyObject *__pyx_n_s_getMirrorTexture;
static PyObject *__pyx_n_s_getNeckEyeDist;
static PyObject *__pyx_n_s_getPixelsPerTanAngleAtCenter;
static PyObject *__pyx_n_s_getPredictedDisplayTime;
static PyObject *__pyx_n_s_getSessionStatus;
static PyObject *__pyx_n_s_getTextureSwapChainBufferGL;
static PyObject *__pyx_n_s_getTextureSwapChainCurrentIndex;
static PyObject *__pyx_n_s_getTextureSwapChainLengthGL;
static PyObject *__pyx_n_s_getThumbstickValues;
static PyObject *__pyx_n_s_getTouch;
static PyObject *__pyx_n_s_getTrackerCount;
static PyObject *__pyx_n_s_getTrackerInfo;
static PyObject *__pyx_n_s_getTrackingOriginType;
static PyObject *__pyx_n_s_getTrackingState;
static PyObject *__pyx_n_s_getUp;
static PyObject *__pyx_n_s_getUserHeight;
static PyObject *__pyx_n_s_getVisibleProcessId;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_s_got_differing_extents_in_dimensi;
static PyObject *__pyx_n_s_green;
static PyObject *__pyx_n_s_headPose;
static PyObject *__pyx_n_s_height;
static PyObject *__pyx_n_s_hideBoundary;
static PyObject *__pyx_n_s_hidePerfHud;
static PyObject *__pyx_n_s_high;
static PyObject *__pyx_n_s_hmdToEyePoses;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_initialize;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_inverse;
static PyObject *__pyx_n_s_inverted;
static PyObject *__pyx_n_s_isHmdConnected;
static PyObject *__pyx_n_s_isOculusServiceRunning;
static PyObject *__pyx_n_s_is_visible;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_lastErrorInfo;
static PyObject *__pyx_n_s_latencyMarker;
static PyObject *__pyx_n_s_layers;
static PyObject *__pyx_n_s_levels;
static PyObject *__pyx_n_s_license;
static PyObject *__pyx_n_s_low;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_maintainer;
static PyObject *__pyx_n_s_maxRange;
static PyObject *__pyx_n_s_memview;
static PyObject *__pyx_n_s_mirrorDesc;
static PyObject *__pyx_n_s_mirror_id;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_mv;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_ndim;
static PyObject *__pyx_n_s_nearClip;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_newOrigin;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numStats;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_s_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_s_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_off;
static PyObject *__pyx_n_s_ori;
static PyObject *__pyx_n_s_origin;
static PyObject *__pyx_n_s_outLength;
static PyObject *__pyx_n_s_outMatrix;
static PyObject *__pyx_n_s_outPoses;
static PyObject *__pyx_n_s_outRect;
static PyObject *__pyx_n_s_outVector;
static PyObject *__pyx_n_s_pack;
static PyObject *__pyx_n_s_perfHudMode;
static PyObject *__pyx_n_s_perfHudModes;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_pressed;
static PyObject *__pyx_n_s_previousInputState;
static PyObject *__pyx_n_s_prvButtons;
static PyObject *__pyx_n_s_prvTouches;
static PyObject *__pyx_n_s_psychxr_libovr__libovr;
static PyObject *__pyx_kp_s_psychxr_libovr__libovr_pyx;
static PyObject *__pyx_n_s_px;
static PyObject *__pyx_n_s_py;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_getbuffer;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_Enum;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_pz;
static PyObject *__pyx_n_s_radius;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rayDir;
static PyObject *__pyx_n_s_recenterTrackingOrigin;
static PyObject *__pyx_n_s_red;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_refPose;
static PyObject *__pyx_n_s_refreshPerformanceStats;
static PyObject *__pyx_n_s_released;
static PyObject *__pyx_n_s_resetBoundaryColor;
static PyObject *__pyx_n_s_resetFrameStats;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_n_s_rising;
static PyObject *__pyx_n_s_rm;
static PyObject *__pyx_n_s_rw;
static PyObject *__pyx_n_s_rx;
static PyObject *__pyx_n_s_ry;
static PyObject *__pyx_n_s_rz;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_setBoundaryColor;
static PyObject *__pyx_n_s_setControllerVibration;
static PyObject *__pyx_n_s_setEyeColorTextureSwapChain;
static PyObject *__pyx_n_s_setEyeRenderFov;
static PyObject *__pyx_n_s_setEyeRenderPose;
static PyObject *__pyx_n_s_setEyeRenderViewport;
static PyObject *__pyx_n_s_setHeadLocked;
static PyObject *__pyx_n_s_setHighQuality;
static PyObject *__pyx_n_s_setHmdToEyePose;
static PyObject *__pyx_n_s_setTrackingOriginType;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_showBoundary;
static PyObject *__pyx_n_s_shutdown;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_specifyTrackingOrigin;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_stat;
static PyObject *__pyx_n_s_statIdx;
static PyObject *__pyx_n_s_stateResult;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_kp_s_strided_and_direct;
static PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
static PyObject *__pyx_kp_s_strided_and_indirect;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_struct;
static PyObject *__pyx_n_s_success;
static PyObject *__pyx_n_s_swapChain;
static PyObject *__pyx_n_s_swapConfig;
static PyObject *__pyx_n_s_t_sec;
static PyObject *__pyx_n_s_targetPose;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_testState;
static PyObject *__pyx_n_s_tex_id;
static PyObject *__pyx_n_s_texelsPerPixel;
static PyObject *__pyx_n_s_textureFormat;
static PyObject *__pyx_n_s_thisPose;
static PyObject *__pyx_n_s_thumbstick_x0;
static PyObject *__pyx_n_s_thumbstick_x1;
static PyObject *__pyx_n_s_thumbstick_y0;
static PyObject *__pyx_n_s_thumbstick_y1;
static PyObject *__pyx_n_s_timeInSeconds;
static PyObject *__pyx_n_s_timeoutMS;
static PyObject *__pyx_n_s_timeout_ms;
static PyObject *__pyx_n_s_toPose;
static PyObject *__pyx_n_s_toReturn;
static PyObject *__pyx_n_s_to_return;
static PyObject *__pyx_n_s_touch;
static PyObject *__pyx_n_s_trackerCount;
static PyObject *__pyx_n_s_trackerIndex;
static PyObject *__pyx_n_s_triggerLeft;
static PyObject *__pyx_n_s_triggerRight;
static PyObject *__pyx_kp_s_unable_to_allocate_array_data;
static PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_unpack;
static PyObject *__pyx_n_s_unqualifedSuccess;
static PyObject *__pyx_n_s_up;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_updateInputState;
static PyObject *__pyx_n_s_updatePerfStats;
static PyObject *__pyx_n_s_use_marker;
static PyObject *__pyx_n_s_vals;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_vec_out;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_s_waitToBeginFrame;
static PyObject *__pyx_n_s_width;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_check_result(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_result); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose___init__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_pos, PyObject *__pyx_v_ori); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static void __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_4__dealloc__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_6__mul__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_a, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_b); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_8__invert__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_10__eq__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_12__ne__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_14__str__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_16setIdentity(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_2at___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_18getAt(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_outVector); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_2up___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_20getUp(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_outVector); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_22getYawPitchRoll(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_refPose); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_24getTransformMatrix(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, int __pyx_v_inverse); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_26normalize(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_28inverted(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_30rotate(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_32inverseRotate(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_34translate(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_36transform(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_38inverseTransform(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_40transformNormal(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_42inverseTransformNormal(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_44apply(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_46distanceTo(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_48raycastSphere(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_targetPose, float __pyx_v_radius, PyObject *__pyx_v_rayDir, float __pyx_v_maxRange); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_50interp(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_toPose, float __pyx_v_s, int __pyx_v_fast); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_52__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_54__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState___init__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self); /* proto */
static void __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4__dealloc__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_6timeIntegrate(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, float __pyx_v_dt); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState___init__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self); /* proto */
static void __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_4__dealloc__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_8headPose___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10headStatus___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_9handPoses___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10handStatus___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_16calibratedOrigin___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo___init__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_12trackerIndex___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4pose___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11leveledPose___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11isConnected___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13isPoseTracked___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_7frustum___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13horizontalFov___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11verticalFov___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_5nearZ___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4farZ___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus___init__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static void __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_4__dealloc__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_9isVisible___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdPresent___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdMounted___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_11displayLost___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10shouldQuit___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14shouldRecenter___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_13hasInputFocus___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14overlayPresent___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14depthRequested___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo___init__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static void __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_4__dealloc__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11productName___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12manufacturer___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12serialNumber___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_10resolution___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11refreshRate___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_3hid___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15firmwareVersion___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_13defaultEyeFov___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_9maxEyeFov___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15symmetricEyeFov___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat___cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13hmdVsyncIndex___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13appFrameIndex___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20appDroppedFrameCount___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appQueueAheadTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appCpuElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appGpuElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20compositorFrameIndex___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17compositorLatency___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorCpuElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorGpuElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_37compositorCpuStartToGpuEndElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_34compositorGpuEndToVsyncElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_2success(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_result); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_4unqualifedSuccess(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_result); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_6failure(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_result); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_8isOculusServiceRunning(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_timeoutMS); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10isHmdConnected(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_timeout_ms); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_12getHmdInfo(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_14getUserHeight(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_16getEyeHeight(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_18getNeckEyeDist(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_20getEyeToNoseDist(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_22initialize(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_focusAware, int __pyx_v_connectionTimeout); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_24create(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_26destroyTextureSwapChain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_swapChain); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_28destroyMirrorTexture(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_30destroy(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_32shutdown(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_34getGraphicsLUID(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_36setHighQuality(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_enable); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_38setHeadLocked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_enable); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_40getPixelsPerTanAngleAtCenter(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_42getDistortedViewport(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_44getEyeRenderFov(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_46setEyeRenderFov(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, PyObject *__pyx_v_fov); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_48getEyeAspectRatio(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_50getEyeHorizontalFovRadians(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_52getEyeVerticalFovRadians(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_54getEyeFocalLength(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_56calcEyeBufferSize(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED int __pyx_v_eye, float __pyx_v_texelsPerPixel); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_58getTextureSwapChainLengthGL(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_swapChain); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_60getTextureSwapChainCurrentIndex(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_swapChain); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_62getTextureSwapChainBufferGL(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_swapChain, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_64createTextureSwapChainGL(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_swapChain, int __pyx_v_width, int __pyx_v_height, int __pyx_v_textureFormat, int __pyx_v_levels); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_66setEyeColorTextureSwapChain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, int __pyx_v_swapChain); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_68createMirrorTexture(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_width, int __pyx_v_height, int __pyx_v_textureFormat); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_70getMirrorTexture(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_72getTrackingState(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_absTime, int __pyx_v_latencyMarker); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_74getDevicePoses(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_deviceTypes, double __pyx_v_absTime, int __pyx_v_latencyMarker); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_76calcEyePoses(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_headPose); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_78getHmdToEyePose(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_80setHmdToEyePose(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED int __pyx_v_eye, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_eyePose); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_82getEyeRenderPose(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_84setEyeRenderPose(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_86getEyeProjectionMatrix(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, float __pyx_v_nearClip, float __pyx_v_farClip, PyObject *__pyx_v_outMatrix); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_88getEyeRenderViewport(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, PyObject *__pyx_v_outRect); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_90setEyeRenderViewport(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, PyObject *__pyx_v_values); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_92getEyeViewMatrix(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, PyObject *__pyx_v_outMatrix); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_94getPredictedDisplayTime(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_frameIndex); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_96timeInSeconds(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_98perfHudMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_100hidePerfHud(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_102perfHudModes(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_104waitToBeginFrame(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_frameIndex); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_106beginFrame(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_frameIndex); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_108commitTextureSwapChain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_110endFrame(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_frameIndex); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_112resetFrameStats(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_114getTrackingOriginType(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_116setTrackingOriginType(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_118recenterTrackingOrigin(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_120specifyTrackingOrigin(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_newOrigin); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_122clearShouldRecenterFlag(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_124getTrackerCount(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_126getTrackerInfo(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_trackerIndex); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_128refreshPerformanceStats(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_130updatePerfStats(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_132getAdaptiveGpuPerformanceScale(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_134getFrameStatsCount(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_136anyFrameStatsDropped(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_138checkAswIsAvailable(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_140getVisibleProcessId(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_142checkAppLastFrameDropped(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_144checkCompLastFrameDropped(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_146getFrameStats(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_frameStatIndex); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_148getLastErrorInfo(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_150setBoundaryColor(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_red, float __pyx_v_green, float __pyx_v_blue); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_152resetBoundaryColor(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_154getBoundaryVisible(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_156showBoundary(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_158hideBoundary(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_160getBoundaryDimensions(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_boundaryType); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_162getConnectedControllerTypes(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_164updateInputState(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_controller); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_166getButton(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_controller, int __pyx_v_button, PyObject *__pyx_v_testState); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_168getTouch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_controller, PyObject *__pyx_v_touch, PyObject *__pyx_v_testState); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_170getThumbstickValues(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_controller, int __pyx_v_deadzone); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_172getIndexTriggerValues(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_controller, int __pyx_v_deadzone); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_174getHandTriggerValues(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_controller, int __pyx_v_deadzone); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_176setControllerVibration(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_controller, PyObject *__pyx_v_frequency, float __pyx_v_amplitude); /* proto */
static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_178getSessionStatus(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRPose(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRPoseState(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRTrackingState(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRSessionStatus(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRHmdInfo(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRFrameStat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_float_0_;
static PyObject *__pyx_float_1_;
static PyObject *__pyx_float_2_0;
static PyObject *__pyx_float_neg_1_;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_6;
static PyObject *__pyx_int_7;
static PyObject *__pyx_int_184977713;
static PyObject *__pyx_int_neg_1;
static int __pyx_k__26;
static int __pyx_k__27;
static PyObject *__pyx_slice__4;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_tuple__154;
static PyObject *__pyx_tuple__156;
static PyObject *__pyx_tuple__158;
static PyObject *__pyx_tuple__161;
static PyObject *__pyx_tuple__163;
static PyObject *__pyx_tuple__165;
static PyObject *__pyx_tuple__167;
static PyObject *__pyx_tuple__169;
static PyObject *__pyx_tuple__171;
static PyObject *__pyx_tuple__173;
static PyObject *__pyx_tuple__175;
static PyObject *__pyx_tuple__177;
static PyObject *__pyx_tuple__180;
static PyObject *__pyx_tuple__182;
static PyObject *__pyx_tuple__184;
static PyObject *__pyx_tuple__186;
static PyObject *__pyx_tuple__195;
static PyObject *__pyx_tuple__197;
static PyObject *__pyx_tuple__199;
static PyObject *__pyx_tuple__201;
static PyObject *__pyx_tuple__203;
static PyObject *__pyx_tuple__205;
static PyObject *__pyx_tuple__207;
static PyObject *__pyx_tuple__209;
static PyObject *__pyx_tuple__211;
static PyObject *__pyx_tuple__213;
static PyObject *__pyx_tuple__215;
static PyObject *__pyx_tuple__217;
static PyObject *__pyx_tuple__219;
static PyObject *__pyx_tuple__221;
static PyObject *__pyx_tuple__223;
static PyObject *__pyx_tuple__225;
static PyObject *__pyx_tuple__227;
static PyObject *__pyx_tuple__229;
static PyObject *__pyx_tuple__230;
static PyObject *__pyx_tuple__231;
static PyObject *__pyx_tuple__232;
static PyObject *__pyx_tuple__233;
static PyObject *__pyx_tuple__234;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__133;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__137;
static PyObject *__pyx_codeobj__139;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__149;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__153;
static PyObject *__pyx_codeobj__155;
static PyObject *__pyx_codeobj__157;
static PyObject *__pyx_codeobj__159;
static PyObject *__pyx_codeobj__160;
static PyObject *__pyx_codeobj__162;
static PyObject *__pyx_codeobj__164;
static PyObject *__pyx_codeobj__166;
static PyObject *__pyx_codeobj__168;
static PyObject *__pyx_codeobj__170;
static PyObject *__pyx_codeobj__172;
static PyObject *__pyx_codeobj__174;
static PyObject *__pyx_codeobj__176;
static PyObject *__pyx_codeobj__178;
static PyObject *__pyx_codeobj__179;
static PyObject *__pyx_codeobj__181;
static PyObject *__pyx_codeobj__183;
static PyObject *__pyx_codeobj__185;
static PyObject *__pyx_codeobj__187;
static PyObject *__pyx_codeobj__188;
static PyObject *__pyx_codeobj__189;
static PyObject *__pyx_codeobj__190;
static PyObject *__pyx_codeobj__191;
static PyObject *__pyx_codeobj__192;
static PyObject *__pyx_codeobj__193;
static PyObject *__pyx_codeobj__194;
static PyObject *__pyx_codeobj__196;
static PyObject *__pyx_codeobj__198;
static PyObject *__pyx_codeobj__200;
static PyObject *__pyx_codeobj__202;
static PyObject *__pyx_codeobj__204;
static PyObject *__pyx_codeobj__206;
static PyObject *__pyx_codeobj__208;
static PyObject *__pyx_codeobj__210;
static PyObject *__pyx_codeobj__212;
static PyObject *__pyx_codeobj__214;
static PyObject *__pyx_codeobj__216;
static PyObject *__pyx_codeobj__218;
static PyObject *__pyx_codeobj__220;
static PyObject *__pyx_codeobj__222;
static PyObject *__pyx_codeobj__224;
static PyObject *__pyx_codeobj__226;
static PyObject *__pyx_codeobj__228;
static PyObject *__pyx_codeobj__235;
/* Late includes */

/* "psychxr/libovr/_libovr.pyx":345
 * #
 * cdef libovr_capi.ovrErrorInfo _last_error_info_  # store our last error here
 * def check_result(result):             # <<<<<<<<<<<<<<
 *     if libovr_capi.OVR_FAILURE(result):
 *         libovr_capi.ovr_GetLastErrorInfo(&_last_error_info_)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_1check_result(PyObject *__pyx_self, PyObject *__pyx_v_result); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_check_result[] = "check_result(result)";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_1check_result = {"check_result", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_1check_result, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_check_result};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_1check_result(PyObject *__pyx_self, PyObject *__pyx_v_result) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_result (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_check_result(__pyx_self, ((PyObject *)__pyx_v_result));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_check_result(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ovrResult __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("check_result", 0);

  /* "psychxr/libovr/_libovr.pyx":346
 * cdef libovr_capi.ovrErrorInfo _last_error_info_  # store our last error here
 * def check_result(result):
 *     if libovr_capi.OVR_FAILURE(result):             # <<<<<<<<<<<<<<
 *         libovr_capi.ovr_GetLastErrorInfo(&_last_error_info_)
 *         raise RuntimeError(
 */
  __pyx_t_1 = __Pyx_PyInt_As_int32_t(__pyx_v_result); if (unlikely((__pyx_t_1 == ((ovrResult)-1)) && PyErr_Occurred())) __PYX_ERR(0, 346, __pyx_L1_error)
  __pyx_t_2 = (__pyx_f_7psychxr_6libovr_11libovr_capi_OVR_FAILURE(__pyx_t_1) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "psychxr/libovr/_libovr.pyx":347
 * def check_result(result):
 *     if libovr_capi.OVR_FAILURE(result):
 *         libovr_capi.ovr_GetLastErrorInfo(&_last_error_info_)             # <<<<<<<<<<<<<<
 *         raise RuntimeError(
 *             str(result) + ": " + _last_error_info_.ErrorString.decode("utf-8"))
 */
    ovr_GetLastErrorInfo((&__pyx_v_7psychxr_6libovr_7_libovr__last_error_info_));

    /* "psychxr/libovr/_libovr.pyx":349
 *         libovr_capi.ovr_GetLastErrorInfo(&_last_error_info_)
 *         raise RuntimeError(
 *             str(result) + ": " + _last_error_info_.ErrorString.decode("utf-8"))             # <<<<<<<<<<<<<<
 * 
 * # helper functions
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyString_Type)), __pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __pyx_v_7psychxr_6libovr_7_libovr__last_error_info_.ErrorString;
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_t_5, 0, strlen(__pyx_t_5), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "psychxr/libovr/_libovr.pyx":348
 *     if libovr_capi.OVR_FAILURE(result):
 *         libovr_capi.ovr_GetLastErrorInfo(&_last_error_info_)
 *         raise RuntimeError(             # <<<<<<<<<<<<<<
 *             str(result) + ": " + _last_error_info_.ErrorString.decode("utf-8"))
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 348, __pyx_L1_error)

    /* "psychxr/libovr/_libovr.pyx":346
 * cdef libovr_capi.ovrErrorInfo _last_error_info_  # store our last error here
 * def check_result(result):
 *     if libovr_capi.OVR_FAILURE(result):             # <<<<<<<<<<<<<<
 *         libovr_capi.ovr_GetLastErrorInfo(&_last_error_info_)
 *         raise RuntimeError(
 */
  }

  /* "psychxr/libovr/_libovr.pyx":345
 * #
 * cdef libovr_capi.ovrErrorInfo _last_error_info_  # store our last error here
 * def check_result(result):             # <<<<<<<<<<<<<<
 *     if libovr_capi.OVR_FAILURE(result):
 *         libovr_capi.ovr_GetLastErrorInfo(&_last_error_info_)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("psychxr.libovr._libovr.check_result", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":352
 * 
 * # helper functions
 * cdef float maxf(float a, float b):             # <<<<<<<<<<<<<<
 *     return a if a >= b else b
 * 
 */

static float __pyx_f_7psychxr_6libovr_7_libovr_maxf(float __pyx_v_a, float __pyx_v_b) {
  float __pyx_r;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  __Pyx_RefNannySetupContext("maxf", 0);

  /* "psychxr/libovr/_libovr.pyx":353
 * # helper functions
 * cdef float maxf(float a, float b):
 *     return a if a >= b else b             # <<<<<<<<<<<<<<
 * 
 * # Color texture formats supported by OpenGL, can be used for creating swap
 */
  if (((__pyx_v_a >= __pyx_v_b) != 0)) {
    __pyx_t_1 = __pyx_v_a;
  } else {
    __pyx_t_1 = __pyx_v_b;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":352
 * 
 * # helper functions
 * cdef float maxf(float a, float b):             # <<<<<<<<<<<<<<
 *     return a if a >= b else b
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":617
 * cdef np.npy_intp[2] MAT4_SHAPE = [4, 4]
 * 
 * cdef np.ndarray _wrap_ovrVector3f_as_ndarray(libovr_capi.ovrVector3f* prtVec):             # <<<<<<<<<<<<<<
 *     """Wrap a ovrVector3f object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(
 */

static PyArrayObject *__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray(ovrVector3f *__pyx_v_prtVec) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_wrap_ovrVector3f_as_ndarray", 0);

  /* "psychxr/libovr/_libovr.pyx":619
 * cdef np.ndarray _wrap_ovrVector3f_as_ndarray(libovr_capi.ovrVector3f* prtVec):
 *     """Wrap a ovrVector3f object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *         1, VEC3_SHAPE, np.NPY_FLOAT32, <void*>prtVec)
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));

  /* "psychxr/libovr/_libovr.pyx":620
 *     """Wrap a ovrVector3f object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(
 *         1, VEC3_SHAPE, np.NPY_FLOAT32, <void*>prtVec)             # <<<<<<<<<<<<<<
 * 
 * cdef np.ndarray _wrap_ovrQuatf_as_ndarray(libovr_capi.ovrQuatf* prtVec):
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_7psychxr_6libovr_7_libovr_VEC3_SHAPE, NPY_FLOAT32, ((void *)__pyx_v_prtVec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":619
 * cdef np.ndarray _wrap_ovrVector3f_as_ndarray(libovr_capi.ovrVector3f* prtVec):
 *     """Wrap a ovrVector3f object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *         1, VEC3_SHAPE, np.NPY_FLOAT32, <void*>prtVec)
 * 
 */
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 619, __pyx_L1_error)
  __pyx_r = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":617
 * cdef np.npy_intp[2] MAT4_SHAPE = [4, 4]
 * 
 * cdef np.ndarray _wrap_ovrVector3f_as_ndarray(libovr_capi.ovrVector3f* prtVec):             # <<<<<<<<<<<<<<
 *     """Wrap a ovrVector3f object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr._wrap_ovrVector3f_as_ndarray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":622
 *         1, VEC3_SHAPE, np.NPY_FLOAT32, <void*>prtVec)
 * 
 * cdef np.ndarray _wrap_ovrQuatf_as_ndarray(libovr_capi.ovrQuatf* prtVec):             # <<<<<<<<<<<<<<
 *     """Wrap a ovrQuatf object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(
 */

static PyArrayObject *__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrQuatf_as_ndarray(ovrQuatf *__pyx_v_prtVec) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_wrap_ovrQuatf_as_ndarray", 0);

  /* "psychxr/libovr/_libovr.pyx":624
 * cdef np.ndarray _wrap_ovrQuatf_as_ndarray(libovr_capi.ovrQuatf* prtVec):
 *     """Wrap a ovrQuatf object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *         1, QUAT_SHAPE, np.NPY_FLOAT32, <void*>prtVec)
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));

  /* "psychxr/libovr/_libovr.pyx":625
 *     """Wrap a ovrQuatf object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(
 *         1, QUAT_SHAPE, np.NPY_FLOAT32, <void*>prtVec)             # <<<<<<<<<<<<<<
 * 
 * cdef np.ndarray _wrap_ovrMatrix4f_as_ndarray(libovr_capi.ovrMatrix4f* prtVec):
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(1, __pyx_v_7psychxr_6libovr_7_libovr_QUAT_SHAPE, NPY_FLOAT32, ((void *)__pyx_v_prtVec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":624
 * cdef np.ndarray _wrap_ovrQuatf_as_ndarray(libovr_capi.ovrQuatf* prtVec):
 *     """Wrap a ovrQuatf object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *         1, QUAT_SHAPE, np.NPY_FLOAT32, <void*>prtVec)
 * 
 */
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 624, __pyx_L1_error)
  __pyx_r = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":622
 *         1, VEC3_SHAPE, np.NPY_FLOAT32, <void*>prtVec)
 * 
 * cdef np.ndarray _wrap_ovrQuatf_as_ndarray(libovr_capi.ovrQuatf* prtVec):             # <<<<<<<<<<<<<<
 *     """Wrap a ovrQuatf object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr._wrap_ovrQuatf_as_ndarray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":627
 *         1, QUAT_SHAPE, np.NPY_FLOAT32, <void*>prtVec)
 * 
 * cdef np.ndarray _wrap_ovrMatrix4f_as_ndarray(libovr_capi.ovrMatrix4f* prtVec):             # <<<<<<<<<<<<<<
 *     """Wrap a ovrMatrix4f object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(
 */

static PyArrayObject *__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrMatrix4f_as_ndarray(ovrMatrix4f *__pyx_v_prtVec) {
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_wrap_ovrMatrix4f_as_ndarray", 0);

  /* "psychxr/libovr/_libovr.pyx":629
 * cdef np.ndarray _wrap_ovrMatrix4f_as_ndarray(libovr_capi.ovrMatrix4f* prtVec):
 *     """Wrap a ovrMatrix4f object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *         2, MAT4_SHAPE, np.NPY_FLOAT32, <void*>prtVec)
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));

  /* "psychxr/libovr/_libovr.pyx":630
 *     """Wrap a ovrMatrix4f object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(
 *         2, MAT4_SHAPE, np.NPY_FLOAT32, <void*>prtVec)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyArray_SimpleNewFromData(2, __pyx_v_7psychxr_6libovr_7_libovr_MAT4_SHAPE, NPY_FLOAT32, ((void *)__pyx_v_prtVec)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":629
 * cdef np.ndarray _wrap_ovrMatrix4f_as_ndarray(libovr_capi.ovrMatrix4f* prtVec):
 *     """Wrap a ovrMatrix4f object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(             # <<<<<<<<<<<<<<
 *         2, MAT4_SHAPE, np.NPY_FLOAT32, <void*>prtVec)
 * 
 */
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 629, __pyx_L1_error)
  __pyx_r = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":627
 *         1, QUAT_SHAPE, np.NPY_FLOAT32, <void*>prtVec)
 * 
 * cdef np.ndarray _wrap_ovrMatrix4f_as_ndarray(libovr_capi.ovrMatrix4f* prtVec):             # <<<<<<<<<<<<<<
 *     """Wrap a ovrMatrix4f object with a NumPy array."""
 *     return np.PyArray_SimpleNewFromData(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr._wrap_ovrMatrix4f_as_ndarray", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":649
 *     cdef np.ndarray _ori
 * 
 *     def __init__(self, pos=(0., 0., 0.), ori=(0., 0., 0., 1.)):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose___init__[] = "\n        Parameters\n        ----------\n        pos : tuple, list, or ndarray of float\n            Position vector (x, y, z).\n        ori : tuple, list, or ndarray of float\n            Orientation quaternion vector (x, y, z, w).\n\n        Attributes\n        ----------\n        pos : ndarray\n            Position vector [X, Y, Z].\n        ori : ndarray\n            Orientation quaternion [X, Y, Z, W].\n        posOri : tuple of ndarray\n            Combined position and orientation.\n        at : ndarray\n            Forward vector of this pose (-Z is forward) (read-only).\n        up : ndarray\n            Up vector of this pose (+Y is up) (read-only).\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose___init__;
#endif
static int __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_ori = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pos,&__pyx_n_s_ori,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_tuple__2);
    values[1] = ((PyObject *)__pyx_tuple__3);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pos);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_ori);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(0, 649, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_pos = values[0];
    __pyx_v_ori = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 649, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose___init__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), __pyx_v_pos, __pyx_v_ori);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose___init__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_pos, PyObject *__pyx_v_ori) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "psychxr/libovr/_libovr.pyx":672
 * 
 *         """
 *         self.newStruct(pos, ori)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, *args, **kwargs):
 */
  ((struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self->__pyx_vtab)->newStruct(__pyx_v_self, __pyx_v_pos, __pyx_v_ori);

  /* "psychxr/libovr/_libovr.pyx":649
 *     cdef np.ndarray _ori
 * 
 *     def __init__(self, pos=(0., 0., 0.), ori=(0., 0., 0., 1.)):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":674
 *         self.newStruct(pos, ori)
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.ptr_owner = False
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_2__cinit__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "psychxr/libovr/_libovr.pyx":675
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         self.ptr_owner = False             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->ptr_owner = 0;

  /* "psychxr/libovr/_libovr.pyx":674
 *         self.newStruct(pos, ori)
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.ptr_owner = False
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":678
 * 
 *     @staticmethod
 *     cdef LibOVRPose fromPtr(libovr_capi.ovrPosef* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         cdef LibOVRPose wrapper = LibOVRPose.__new__(LibOVRPose)
 *         wrapper.c_data = ptr
 */

static struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_f_7psychxr_6libovr_7_libovr_10LibOVRPose_fromPtr(ovrPosef *__pyx_v_ptr, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_10LibOVRPose_fromPtr *__pyx_optional_args) {
  int __pyx_v_owner = ((int)0);
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_wrapper = 0;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fromPtr", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_owner = __pyx_optional_args->owner;
    }
  }

  /* "psychxr/libovr/_libovr.pyx":679
 *     @staticmethod
 *     cdef LibOVRPose fromPtr(libovr_capi.ovrPosef* ptr, bint owner=False):
 *         cdef LibOVRPose wrapper = LibOVRPose.__new__(LibOVRPose)             # <<<<<<<<<<<<<<
 *         wrapper.c_data = ptr
 *         wrapper.ptr_owner = owner
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRPose(((PyTypeObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":680
 *     cdef LibOVRPose fromPtr(libovr_capi.ovrPosef* ptr, bint owner=False):
 *         cdef LibOVRPose wrapper = LibOVRPose.__new__(LibOVRPose)
 *         wrapper.c_data = ptr             # <<<<<<<<<<<<<<
 *         wrapper.ptr_owner = owner
 * 
 */
  __pyx_v_wrapper->c_data = __pyx_v_ptr;

  /* "psychxr/libovr/_libovr.pyx":681
 *         cdef LibOVRPose wrapper = LibOVRPose.__new__(LibOVRPose)
 *         wrapper.c_data = ptr
 *         wrapper.ptr_owner = owner             # <<<<<<<<<<<<<<
 * 
 *         wrapper._pos = _wrap_ovrVector3f_as_ndarray(&ptr.Position)
 */
  __pyx_v_wrapper->ptr_owner = __pyx_v_owner;

  /* "psychxr/libovr/_libovr.pyx":683
 *         wrapper.ptr_owner = owner
 * 
 *         wrapper._pos = _wrap_ovrVector3f_as_ndarray(&ptr.Position)             # <<<<<<<<<<<<<<
 *         wrapper._ori = _wrap_ovrQuatf_as_ndarray(&ptr.Orientation)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray((&__pyx_v_ptr->Position))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_wrapper->_pos);
  __Pyx_DECREF(((PyObject *)__pyx_v_wrapper->_pos));
  __pyx_v_wrapper->_pos = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":684
 * 
 *         wrapper._pos = _wrap_ovrVector3f_as_ndarray(&ptr.Position)
 *         wrapper._ori = _wrap_ovrQuatf_as_ndarray(&ptr.Orientation)             # <<<<<<<<<<<<<<
 * 
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrQuatf_as_ndarray((&__pyx_v_ptr->Orientation))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_wrapper->_ori);
  __Pyx_DECREF(((PyObject *)__pyx_v_wrapper->_ori));
  __pyx_v_wrapper->_ori = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":686
 *         wrapper._ori = _wrap_ovrQuatf_as_ndarray(&ptr.Orientation)
 * 
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     cdef void newStruct(self, object pos, object ori):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":678
 * 
 *     @staticmethod
 *     cdef LibOVRPose fromPtr(libovr_capi.ovrPosef* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         cdef LibOVRPose wrapper = LibOVRPose.__new__(LibOVRPose)
 *         wrapper.c_data = ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.fromPtr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":688
 *         return wrapper
 * 
 *     cdef void newStruct(self, object pos, object ori):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL:
 *             return
 */

static void __pyx_f_7psychxr_6libovr_7_libovr_10LibOVRPose_newStruct(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_pos, PyObject *__pyx_v_ori) {
  ovrPosef *__pyx_v__ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  float __pyx_t_3;
  __Pyx_RefNannySetupContext("newStruct", 0);

  /* "psychxr/libovr/_libovr.pyx":689
 * 
 *     cdef void newStruct(self, object pos, object ori):
 *         if self.c_data is not NULL:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->c_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":690
 *     cdef void newStruct(self, object pos, object ori):
 *         if self.c_data is not NULL:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef libovr_capi.ovrPosef* _ptr = \
 */
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":689
 * 
 *     cdef void newStruct(self, object pos, object ori):
 *         if self.c_data is not NULL:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":693
 * 
 *         cdef libovr_capi.ovrPosef* _ptr = \
 *             <libovr_capi.ovrPosef*>malloc(sizeof(libovr_capi.ovrPosef))             # <<<<<<<<<<<<<<
 * 
 *         if _ptr is NULL:
 */
  __pyx_v__ptr = ((ovrPosef *)malloc((sizeof(ovrPosef))));

  /* "psychxr/libovr/_libovr.pyx":695
 *             <libovr_capi.ovrPosef*>malloc(sizeof(libovr_capi.ovrPosef))
 * 
 *         if _ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  __pyx_t_1 = ((__pyx_v__ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "psychxr/libovr/_libovr.pyx":696
 * 
 *         if _ptr is NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         # clear memory
 */
    PyErr_NoMemory(); __PYX_ERR(0, 696, __pyx_L1_error)

    /* "psychxr/libovr/_libovr.pyx":695
 *             <libovr_capi.ovrPosef*>malloc(sizeof(libovr_capi.ovrPosef))
 * 
 *         if _ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":699
 * 
 *         # clear memory
 *         _ptr.Position.x = <float>pos[0]             # <<<<<<<<<<<<<<
 *         _ptr.Position.y = <float>pos[1]
 *         _ptr.Position.z = <float>pos[2]
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_pos, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v__ptr->Position.x = ((float)__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":700
 *         # clear memory
 *         _ptr.Position.x = <float>pos[0]
 *         _ptr.Position.y = <float>pos[1]             # <<<<<<<<<<<<<<
 *         _ptr.Position.z = <float>pos[2]
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_pos, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 700, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v__ptr->Position.y = ((float)__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":701
 *         _ptr.Position.x = <float>pos[0]
 *         _ptr.Position.y = <float>pos[1]
 *         _ptr.Position.z = <float>pos[2]             # <<<<<<<<<<<<<<
 * 
 *         _ptr.Orientation.x = <float>ori[0]
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_pos, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v__ptr->Position.z = ((float)__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":703
 *         _ptr.Position.z = <float>pos[2]
 * 
 *         _ptr.Orientation.x = <float>ori[0]             # <<<<<<<<<<<<<<
 *         _ptr.Orientation.y = <float>ori[1]
 *         _ptr.Orientation.z = <float>ori[2]
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ori, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 703, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v__ptr->Orientation.x = ((float)__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":704
 * 
 *         _ptr.Orientation.x = <float>ori[0]
 *         _ptr.Orientation.y = <float>ori[1]             # <<<<<<<<<<<<<<
 *         _ptr.Orientation.z = <float>ori[2]
 *         _ptr.Orientation.w = <float>ori[3]
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ori, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 704, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v__ptr->Orientation.y = ((float)__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":705
 *         _ptr.Orientation.x = <float>ori[0]
 *         _ptr.Orientation.y = <float>ori[1]
 *         _ptr.Orientation.z = <float>ori[2]             # <<<<<<<<<<<<<<
 *         _ptr.Orientation.w = <float>ori[3]
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ori, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 705, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v__ptr->Orientation.z = ((float)__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":706
 *         _ptr.Orientation.y = <float>ori[1]
 *         _ptr.Orientation.z = <float>ori[2]
 *         _ptr.Orientation.w = <float>ori[3]             # <<<<<<<<<<<<<<
 * 
 *         self.c_data = _ptr
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_ori, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_2); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v__ptr->Orientation.w = ((float)__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":708
 *         _ptr.Orientation.w = <float>ori[3]
 * 
 *         self.c_data = _ptr             # <<<<<<<<<<<<<<
 *         self.ptr_owner = True
 * 
 */
  __pyx_v_self->c_data = __pyx_v__ptr;

  /* "psychxr/libovr/_libovr.pyx":709
 * 
 *         self.c_data = _ptr
 *         self.ptr_owner = True             # <<<<<<<<<<<<<<
 * 
 *         self._pos = _wrap_ovrVector3f_as_ndarray(&_ptr.Position)
 */
  __pyx_v_self->ptr_owner = 1;

  /* "psychxr/libovr/_libovr.pyx":711
 *         self.ptr_owner = True
 * 
 *         self._pos = _wrap_ovrVector3f_as_ndarray(&_ptr.Position)             # <<<<<<<<<<<<<<
 *         self._ori = _wrap_ovrQuatf_as_ndarray(&_ptr.Orientation)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray((&__pyx_v__ptr->Position))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_pos);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_pos));
  __pyx_v_self->_pos = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "psychxr/libovr/_libovr.pyx":712
 * 
 *         self._pos = _wrap_ovrVector3f_as_ndarray(&_ptr.Position)
 *         self._ori = _wrap_ovrQuatf_as_ndarray(&_ptr.Orientation)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_2 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrQuatf_as_ndarray((&__pyx_v__ptr->Orientation))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_ori);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_ori));
  __pyx_v_self->_ori = ((PyArrayObject *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "psychxr/libovr/_libovr.pyx":688
 *         return wrapper
 * 
 *     cdef void newStruct(self, object pos, object ori):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL:
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("psychxr.libovr._libovr.LibOVRPose.newStruct", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "psychxr/libovr/_libovr.pyx":714
 *         self._ori = _wrap_ovrQuatf_as_ndarray(&_ptr.Orientation)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 */

/* Python wrapper */
static void __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_4__dealloc__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_4__dealloc__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "psychxr/libovr/_libovr.pyx":715
 * 
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:             # <<<<<<<<<<<<<<
 *             free(self.c_data)
 *             self.c_data = NULL
 */
  __pyx_t_2 = ((__pyx_v_self->c_data != NULL) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->ptr_owner == 1) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":716
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)             # <<<<<<<<<<<<<<
 *             self.c_data = NULL
 * 
 */
    free(__pyx_v_self->c_data);

    /* "psychxr/libovr/_libovr.pyx":717
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 *             self.c_data = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __mul__(LibOVRPose a, LibOVRPose b):
 */
    __pyx_v_self->c_data = NULL;

    /* "psychxr/libovr/_libovr.pyx":715
 * 
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:             # <<<<<<<<<<<<<<
 *             free(self.c_data)
 *             self.c_data = NULL
 */
  }

  /* "psychxr/libovr/_libovr.pyx":714
 *         self._ori = _wrap_ovrQuatf_as_ndarray(&_ptr.Orientation)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "psychxr/libovr/_libovr.pyx":719
 *             self.c_data = NULL
 * 
 *     def __mul__(LibOVRPose a, LibOVRPose b):             # <<<<<<<<<<<<<<
 *         """Multiplication operator (*) to combine poses."""
 *         cdef libovr_math.Posef pose_r = \
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_7__mul__(PyObject *__pyx_v_a, PyObject *__pyx_v_b); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_6__mul__[] = "Multiplication operator (*) to combine poses.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_6__mul__;
#endif
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_7__mul__(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__mul__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_a), __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose, 1, "a", 0))) __PYX_ERR(0, 719, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_b), __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose, 1, "b", 0))) __PYX_ERR(0, 719, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_6__mul__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_a), ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_b));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_6__mul__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_a, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_b) {
  OVR::Posef __pyx_v_pose_r;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_to_return = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__mul__", 0);

  /* "psychxr/libovr/_libovr.pyx":722
 *         """Multiplication operator (*) to combine poses."""
 *         cdef libovr_math.Posef pose_r = \
 *             <libovr_math.Posef>a.c_data[0] * <libovr_math.Posef>b.c_data[0]             # <<<<<<<<<<<<<<
 * 
 *         cdef LibOVRPose to_return = \
 */
  __pyx_v_pose_r = (((OVR::Posef)(__pyx_v_a->c_data[0])) * ((OVR::Posef)(__pyx_v_b->c_data[0])));

  /* "psychxr/libovr/_libovr.pyx":726
 *         cdef LibOVRPose to_return = \
 *             LibOVRPose(
 *                 (pose_r.Translation.x,             # <<<<<<<<<<<<<<
 *                  pose_r.Translation.y,
 *                  pose_r.Translation.z),
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_pose_r.Translation.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":727
 *             LibOVRPose(
 *                 (pose_r.Translation.x,
 *                  pose_r.Translation.y,             # <<<<<<<<<<<<<<
 *                  pose_r.Translation.z),
 *                 (pose_r.Rotation.x,
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_pose_r.Translation.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":728
 *                 (pose_r.Translation.x,
 *                  pose_r.Translation.y,
 *                  pose_r.Translation.z),             # <<<<<<<<<<<<<<
 *                 (pose_r.Rotation.x,
 *                  pose_r.Rotation.y,
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pose_r.Translation.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":726
 *         cdef LibOVRPose to_return = \
 *             LibOVRPose(
 *                 (pose_r.Translation.x,             # <<<<<<<<<<<<<<
 *                  pose_r.Translation.y,
 *                  pose_r.Translation.z),
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":729
 *                  pose_r.Translation.y,
 *                  pose_r.Translation.z),
 *                 (pose_r.Rotation.x,             # <<<<<<<<<<<<<<
 *                  pose_r.Rotation.y,
 *                  pose_r.Rotation.z,
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_pose_r.Rotation.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":730
 *                  pose_r.Translation.z),
 *                 (pose_r.Rotation.x,
 *                  pose_r.Rotation.y,             # <<<<<<<<<<<<<<
 *                  pose_r.Rotation.z,
 *                  pose_r.Rotation.w))
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_pose_r.Rotation.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":731
 *                 (pose_r.Rotation.x,
 *                  pose_r.Rotation.y,
 *                  pose_r.Rotation.z,             # <<<<<<<<<<<<<<
 *                  pose_r.Rotation.w))
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_pose_r.Rotation.z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":732
 *                  pose_r.Rotation.y,
 *                  pose_r.Rotation.z,
 *                  pose_r.Rotation.w))             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_pose_r.Rotation.w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "psychxr/libovr/_libovr.pyx":729
 *                  pose_r.Translation.y,
 *                  pose_r.Translation.z),
 *                 (pose_r.Rotation.x,             # <<<<<<<<<<<<<<
 *                  pose_r.Rotation.y,
 *                  pose_r.Rotation.z,
 */
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;

  /* "psychxr/libovr/_libovr.pyx":725
 * 
 *         cdef LibOVRPose to_return = \
 *             LibOVRPose(             # <<<<<<<<<<<<<<
 *                 (pose_r.Translation.x,
 *                  pose_r.Translation.y,
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose), __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_to_return = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "psychxr/libovr/_libovr.pyx":734
 *                  pose_r.Rotation.w))
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     def __invert__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":719
 *             self.c_data = NULL
 * 
 *     def __mul__(LibOVRPose a, LibOVRPose b):             # <<<<<<<<<<<<<<
 *         """Multiplication operator (*) to combine poses."""
 *         cdef libovr_math.Posef pose_r = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.__mul__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":736
 *         return to_return
 * 
 *     def __invert__(self):             # <<<<<<<<<<<<<<
 *         """Invert operator (~) to invert a pose."""
 *         return self.inverted()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_9__invert__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_8__invert__[] = "Invert operator (~) to invert a pose.";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_8__invert__;
#endif
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_9__invert__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__invert__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_8__invert__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_8__invert__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__invert__", 0);

  /* "psychxr/libovr/_libovr.pyx":738
 *     def __invert__(self):
 *         """Invert operator (~) to invert a pose."""
 *         return self.inverted()             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, LibOVRPose other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inverted); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":736
 *         return to_return
 * 
 *     def __invert__(self):             # <<<<<<<<<<<<<<
 *         """Invert operator (~) to invert a pose."""
 *         return self.inverted()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.__invert__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":740
 *         return self.inverted()
 * 
 *     def __eq__(self, LibOVRPose other):             # <<<<<<<<<<<<<<
 *         """Equality operator (==) for two poses.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_11__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_10__eq__[] = "Equality operator (==) for two poses.\n\n        The tolerance of the comparison is defined by the Oculus SDK as 1e-5.\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_10__eq__;
#endif
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_11__eq__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose, 1, "other", 0))) __PYX_ERR(0, 740, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_10__eq__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_10__eq__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "psychxr/libovr/_libovr.pyx":746
 * 
 *         """
 *         return (<libovr_math.Posef>self.c_data[0]).IsEqual(             # <<<<<<<<<<<<<<
 *             <libovr_math.Posef>other.c_data[0], <float>1e-5)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "psychxr/libovr/_libovr.pyx":747
 *         """
 *         return (<libovr_math.Posef>self.c_data[0]).IsEqual(
 *             <libovr_math.Posef>other.c_data[0], <float>1e-5)             # <<<<<<<<<<<<<<
 * 
 *     def __ne__(self, LibOVRPose other):
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(((OVR::Posef)(__pyx_v_self->c_data[0])).IsEqual(((OVR::Posef)(__pyx_v_other->c_data[0])), ((float)1e-5))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":740
 *         return self.inverted()
 * 
 *     def __eq__(self, LibOVRPose other):             # <<<<<<<<<<<<<<
 *         """Equality operator (==) for two poses.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":749
 *             <libovr_math.Posef>other.c_data[0], <float>1e-5)
 * 
 *     def __ne__(self, LibOVRPose other):             # <<<<<<<<<<<<<<
 *         """Inequality operator (!=) for two poses.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_13__ne__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_12__ne__[] = "Inequality operator (!=) for two poses.\n\n        The tolerance of the comparison is defined by the Oculus SDK as 1e-5.\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_12__ne__;
#endif
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_13__ne__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ne__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose, 1, "other", 0))) __PYX_ERR(0, 749, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_12__ne__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_12__ne__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__ne__", 0);

  /* "psychxr/libovr/_libovr.pyx":755
 * 
 *         """
 *         return not (<libovr_math.Posef>self.c_data[0]).IsEqual(             # <<<<<<<<<<<<<<
 *             <libovr_math.Posef>other.c_data[0], <float>1e-5)
 * 
 */
  __Pyx_XDECREF(__pyx_r);

  /* "psychxr/libovr/_libovr.pyx":756
 *         """
 *         return not (<libovr_math.Posef>self.c_data[0]).IsEqual(
 *             <libovr_math.Posef>other.c_data[0], <float>1e-5)             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong((!(((OVR::Posef)(__pyx_v_self->c_data[0])).IsEqual(((OVR::Posef)(__pyx_v_other->c_data[0])), ((float)1e-5)) != 0))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":749
 *             <libovr_math.Posef>other.c_data[0], <float>1e-5)
 * 
 *     def __ne__(self, LibOVRPose other):             # <<<<<<<<<<<<<<
 *         """Inequality operator (!=) for two poses.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.__ne__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":758
 *             <libovr_math.Posef>other.c_data[0], <float>1e-5)
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return \
 *             "LibOVRPose(({px}, {py}, {pz}), ({rx}, {ry}, {rz}, {rw}))".format(
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_15__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_15__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_14__str__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_14__str__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "psychxr/libovr/_libovr.pyx":759
 * 
 *     def __str__(self):
 *         return \             # <<<<<<<<<<<<<<
 *             "LibOVRPose(({px}, {py}, {pz}), ({rx}, {ry}, {rz}, {rw}))".format(
 *                 px=self.c_data[0].Position.x,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "psychxr/libovr/_libovr.pyx":760
 *     def __str__(self):
 *         return \
 *             "LibOVRPose(({px}, {py}, {pz}), ({rx}, {ry}, {rz}, {rw}))".format(             # <<<<<<<<<<<<<<
 *                 px=self.c_data[0].Position.x,
 *                 py=self.c_data[0].Position.y,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_LibOVRPose_px_py_pz_rx_ry_rz_rw, __pyx_n_s_format); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":761
 *         return \
 *             "LibOVRPose(({px}, {py}, {pz}), ({rx}, {ry}, {rz}, {rw}))".format(
 *                 px=self.c_data[0].Position.x,             # <<<<<<<<<<<<<<
 *                 py=self.c_data[0].Position.y,
 *                 pz=self.c_data[0].Position.z,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Position.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_px, __pyx_t_3) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":762
 *             "LibOVRPose(({px}, {py}, {pz}), ({rx}, {ry}, {rz}, {rw}))".format(
 *                 px=self.c_data[0].Position.x,
 *                 py=self.c_data[0].Position.y,             # <<<<<<<<<<<<<<
 *                 pz=self.c_data[0].Position.z,
 *                 rx=self.c_data[0].Orientation.x,
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Position.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_py, __pyx_t_3) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":763
 *                 px=self.c_data[0].Position.x,
 *                 py=self.c_data[0].Position.y,
 *                 pz=self.c_data[0].Position.z,             # <<<<<<<<<<<<<<
 *                 rx=self.c_data[0].Orientation.x,
 *                 ry=self.c_data[0].Orientation.y,
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Position.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_pz, __pyx_t_3) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":764
 *                 py=self.c_data[0].Position.y,
 *                 pz=self.c_data[0].Position.z,
 *                 rx=self.c_data[0].Orientation.x,             # <<<<<<<<<<<<<<
 *                 ry=self.c_data[0].Orientation.y,
 *                 rz=self.c_data[0].Orientation.z,
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Orientation.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_rx, __pyx_t_3) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":765
 *                 pz=self.c_data[0].Position.z,
 *                 rx=self.c_data[0].Orientation.x,
 *                 ry=self.c_data[0].Orientation.y,             # <<<<<<<<<<<<<<
 *                 rz=self.c_data[0].Orientation.z,
 *                 rw=self.c_data[0].Orientation.w)
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Orientation.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_ry, __pyx_t_3) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":766
 *                 rx=self.c_data[0].Orientation.x,
 *                 ry=self.c_data[0].Orientation.y,
 *                 rz=self.c_data[0].Orientation.z,             # <<<<<<<<<<<<<<
 *                 rw=self.c_data[0].Orientation.w)
 * 
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Orientation.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_rz, __pyx_t_3) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":767
 *                 ry=self.c_data[0].Orientation.y,
 *                 rz=self.c_data[0].Orientation.z,
 *                 rw=self.c_data[0].Orientation.w)             # <<<<<<<<<<<<<<
 * 
 *     def setIdentity(self):
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Orientation.w); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_rw, __pyx_t_3) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":760
 *     def __str__(self):
 *         return \
 *             "LibOVRPose(({px}, {py}, {pz}), ({rx}, {ry}, {rz}, {rw}))".format(             # <<<<<<<<<<<<<<
 *                 px=self.c_data[0].Position.x,
 *                 py=self.c_data[0].Position.y,
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":758
 *             <libovr_math.Posef>other.c_data[0], <float>1e-5)
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return \
 *             "LibOVRPose(({px}, {py}, {pz}), ({rx}, {ry}, {rz}, {rw}))".format(
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":769
 *                 rw=self.c_data[0].Orientation.w)
 * 
 *     def setIdentity(self):             # <<<<<<<<<<<<<<
 *         """Clear this pose's translation and orientation."""
 *         (<libovr_math.Posef>self.c_data[0]).SetIdentity()
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_17setIdentity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_16setIdentity[] = "LibOVRPose.setIdentity(self)\nClear this pose's translation and orientation.";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_17setIdentity(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setIdentity (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_16setIdentity(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_16setIdentity(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setIdentity", 0);

  /* "psychxr/libovr/_libovr.pyx":771
 *     def setIdentity(self):
 *         """Clear this pose's translation and orientation."""
 *         (<libovr_math.Posef>self.c_data[0]).SetIdentity()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  ((OVR::Posef)(__pyx_v_self->c_data[0])).SetIdentity();

  /* "psychxr/libovr/_libovr.pyx":769
 *                 rw=self.c_data[0].Orientation.w)
 * 
 *     def setIdentity(self):             # <<<<<<<<<<<<<<
 *         """Clear this pose's translation and orientation."""
 *         (<libovr_math.Posef>self.c_data[0]).SetIdentity()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":774
 * 
 *     @property
 *     def pos(self):             # <<<<<<<<<<<<<<
 *         return self._pos
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":775
 *     @property
 *     def pos(self):
 *         return self._pos             # <<<<<<<<<<<<<<
 * 
 *     @pos.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_pos));
  __pyx_r = ((PyObject *)__pyx_v_self->_pos);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":774
 * 
 *     @property
 *     def pos(self):             # <<<<<<<<<<<<<<
 *         return self._pos
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":778
 * 
 *     @pos.setter
 *     def pos(self, object value):             # <<<<<<<<<<<<<<
 *         self._pos[:] = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos_2__set__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "psychxr/libovr/_libovr.pyx":779
 *     @pos.setter
 *     def pos(self, object value):
 *         self._pos[:] = value             # <<<<<<<<<<<<<<
 * 
 *     # def getPos(self, object outVector=None):
 */
  if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->_pos), __pyx_v_value, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 779, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":778
 * 
 *     @pos.setter
 *     def pos(self, object value):             # <<<<<<<<<<<<<<
 *         self._pos[:] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.pos.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":850
 * 
 *     @property
 *     def ori(self):             # <<<<<<<<<<<<<<
 *         return self._ori
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":851
 *     @property
 *     def ori(self):
 *         return self._ori             # <<<<<<<<<<<<<<
 * 
 *     @ori.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_ori));
  __pyx_r = ((PyObject *)__pyx_v_self->_ori);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":850
 * 
 *     @property
 *     def ori(self):             # <<<<<<<<<<<<<<
 *         return self._ori
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":854
 * 
 *     @ori.setter
 *     def ori(self, object value):             # <<<<<<<<<<<<<<
 *         self._ori[:] = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori_2__set__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "psychxr/libovr/_libovr.pyx":855
 *     @ori.setter
 *     def ori(self, object value):
 *         self._ori[:] = value             # <<<<<<<<<<<<<<
 * 
 *     # def getOri(self, object outVector=None):
 */
  if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->_ori), __pyx_v_value, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 855, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":854
 * 
 *     @ori.setter
 *     def ori(self, object value):             # <<<<<<<<<<<<<<
 *         self._ori[:] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.ori.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":909
 * 
 *     @property
 *     def posOri(self):             # <<<<<<<<<<<<<<
 *         return self.pos, self.ori
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":910
 *     @property
 *     def posOri(self):
 *         return self.pos, self.ori             # <<<<<<<<<<<<<<
 * 
 *     @posOri.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pos); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ori); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":909
 * 
 *     @property
 *     def posOri(self):             # <<<<<<<<<<<<<<
 *         return self.pos, self.ori
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.posOri.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":913
 * 
 *     @posOri.setter
 *     def posOri(self, object value):             # <<<<<<<<<<<<<<
 *         self.pos = value[0]
 *         self.ori = value[1]
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri_2__set__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "psychxr/libovr/_libovr.pyx":914
 *     @posOri.setter
 *     def posOri(self, object value):
 *         self.pos = value[0]             # <<<<<<<<<<<<<<
 *         self.ori = value[1]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pos, __pyx_t_1) < 0) __PYX_ERR(0, 914, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":915
 *     def posOri(self, object value):
 *         self.pos = value[0]
 *         self.ori = value[1]             # <<<<<<<<<<<<<<
 * 
 *     # def getPosOri(self):
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ori, __pyx_t_1) < 0) __PYX_ERR(0, 915, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":913
 * 
 *     @posOri.setter
 *     def posOri(self, object value):             # <<<<<<<<<<<<<<
 *         self.pos = value[0]
 *         self.ori = value[1]
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.posOri.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":933
 * 
 *     @property
 *     def at(self):             # <<<<<<<<<<<<<<
 *         return self.getAt()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_2at_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_2at_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_2at___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_2at___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":934
 *     @property
 *     def at(self):
 *         return self.getAt()             # <<<<<<<<<<<<<<
 * 
 *     def getAt(self, object outVector=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getAt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":933
 * 
 *     @property
 *     def at(self):             # <<<<<<<<<<<<<<
 *         return self.getAt()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.at.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":936
 *         return self.getAt()
 * 
 *     def getAt(self, object outVector=None):             # <<<<<<<<<<<<<<
 *         """Get the 'at' vector for this pose.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_19getAt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_18getAt[] = "LibOVRPose.getAt(self, outVector=None)\nGet the 'at' vector for this pose.\n\n        Parameters\n        ----------\n        outVector : ndarray or None\n            Option array to write values to. If None, the function will return\n            a new array. Must have a float32 data type.\n\n        Returns\n        -------\n        ndarray or None\n            The vector for 'at' if `outVector`=None. Returns None if `outVector`\n            was specified.\n\n        Raises\n        ------\n        ValueError\n            Buffer dtype mismatch where float32 was expected.\n        IndexError\n            Out of bounds on buffer access.\n\n        Notes\n        -----\n        It's better to use the 'at' property if you are not supplying an output\n        array. However, `getAt` will have the same effect as the property if\n        `outVector`=None.\n\n        Examples\n        --------\n\n        Setting the listener orientation for 3D positional audio (PyOpenAL)::\n\n            myListener.set_orientation((*myPose.getAt(), *myPose.getUp()))\n\n        See Also\n        --------\n        getUp : Get the 'up' vector.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_19getAt(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_outVector = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAt (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_outVector,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outVector);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getAt") < 0)) __PYX_ERR(0, 936, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_outVector = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getAt", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 936, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.getAt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_18getAt(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), __pyx_v_outVector);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_18getAt(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_outVector) {
  PyArrayObject *__pyx_v_toReturn = 0;
  OVR::Vector3f __pyx_v_at;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_toReturn;
  __Pyx_Buffer __pyx_pybuffer_toReturn;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  OVR::Vector3f __pyx_t_12;
  float __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  __Pyx_RefNannySetupContext("getAt", 0);
  __pyx_pybuffer_toReturn.pybuffer.buf = NULL;
  __pyx_pybuffer_toReturn.refcount = 0;
  __pyx_pybuffernd_toReturn.data = NULL;
  __pyx_pybuffernd_toReturn.rcbuffer = &__pyx_pybuffer_toReturn;

  /* "psychxr/libovr/_libovr.pyx":977
 *         """
 *         cdef np.ndarray[np.float32_t, ndim=1] toReturn
 *         if outVector is None:             # <<<<<<<<<<<<<<
 *             toReturn = np.zeros((3,), dtype=np.float32)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_outVector == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":978
 *         cdef np.ndarray[np.float32_t, ndim=1] toReturn
 *         if outVector is None:
 *             toReturn = np.zeros((3,), dtype=np.float32)             # <<<<<<<<<<<<<<
 *         else:
 *             toReturn = outVector
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__6, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 978, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer, (PyObject*)__pyx_v_toReturn, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        }
        __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
      }
      __pyx_pybuffernd_toReturn.diminfo[0].strides = __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_toReturn.diminfo[0].shape = __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 978, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __pyx_v_toReturn = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "psychxr/libovr/_libovr.pyx":977
 *         """
 *         cdef np.ndarray[np.float32_t, ndim=1] toReturn
 *         if outVector is None:             # <<<<<<<<<<<<<<
 *             toReturn = np.zeros((3,), dtype=np.float32)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":980
 *             toReturn = np.zeros((3,), dtype=np.float32)
 *         else:
 *             toReturn = outVector             # <<<<<<<<<<<<<<
 * 
 *         cdef libovr_math.Vector3f at = \
 */
  /*else*/ {
    if (!(likely(((__pyx_v_outVector) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_outVector, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 980, __pyx_L1_error)
    __pyx_t_6 = __pyx_v_outVector;
    __Pyx_INCREF(__pyx_t_6);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_6), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer, (PyObject*)__pyx_v_toReturn, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
        }
        __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
      }
      __pyx_pybuffernd_toReturn.diminfo[0].strides = __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_toReturn.diminfo[0].shape = __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 980, __pyx_L1_error)
    }
    __pyx_v_toReturn = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":984
 *         cdef libovr_math.Vector3f at = \
 *             (<libovr_math.Quatf>self.c_data[0].Orientation).Rotate(
 *                 libovr_math.Vector3f(0.0, 0.0, -1.0))             # <<<<<<<<<<<<<<
 * 
 *         toReturn[0] = at.x
 */
  try {
    __pyx_t_12 = OVR::Vector3f(0.0, 0.0, -1.0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 984, __pyx_L1_error)
  }

  /* "psychxr/libovr/_libovr.pyx":983
 * 
 *         cdef libovr_math.Vector3f at = \
 *             (<libovr_math.Quatf>self.c_data[0].Orientation).Rotate(             # <<<<<<<<<<<<<<
 *                 libovr_math.Vector3f(0.0, 0.0, -1.0))
 * 
 */
  __pyx_v_at = ((OVR::Quatf)(__pyx_v_self->c_data[0]).Orientation).Rotate(__pyx_t_12);

  /* "psychxr/libovr/_libovr.pyx":986
 *                 libovr_math.Vector3f(0.0, 0.0, -1.0))
 * 
 *         toReturn[0] = at.x             # <<<<<<<<<<<<<<
 *         toReturn[1] = at.y
 *         toReturn[2] = at.z
 */
  __pyx_t_13 = __pyx_v_at.x;
  __pyx_t_14 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_toReturn.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_toReturn.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 986, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_toReturn.diminfo[0].strides) = __pyx_t_13;

  /* "psychxr/libovr/_libovr.pyx":987
 * 
 *         toReturn[0] = at.x
 *         toReturn[1] = at.y             # <<<<<<<<<<<<<<
 *         toReturn[2] = at.z
 * 
 */
  __pyx_t_13 = __pyx_v_at.y;
  __pyx_t_15 = 1;
  __pyx_t_8 = -1;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_toReturn.diminfo[0].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_toReturn.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 987, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_toReturn.diminfo[0].strides) = __pyx_t_13;

  /* "psychxr/libovr/_libovr.pyx":988
 *         toReturn[0] = at.x
 *         toReturn[1] = at.y
 *         toReturn[2] = at.z             # <<<<<<<<<<<<<<
 * 
 *         if outVector is None:
 */
  __pyx_t_13 = __pyx_v_at.z;
  __pyx_t_16 = 2;
  __pyx_t_8 = -1;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_pybuffernd_toReturn.diminfo[0].shape;
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_toReturn.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 988, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_toReturn.diminfo[0].strides) = __pyx_t_13;

  /* "psychxr/libovr/_libovr.pyx":990
 *         toReturn[2] = at.z
 * 
 *         if outVector is None:             # <<<<<<<<<<<<<<
 *             return toReturn
 * 
 */
  __pyx_t_2 = (__pyx_v_outVector == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":991
 * 
 *         if outVector is None:
 *             return toReturn             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_toReturn));
    __pyx_r = ((PyObject *)__pyx_v_toReturn);
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":990
 *         toReturn[2] = at.z
 * 
 *         if outVector is None:             # <<<<<<<<<<<<<<
 *             return toReturn
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":936
 *         return self.getAt()
 * 
 *     def getAt(self, object outVector=None):             # <<<<<<<<<<<<<<
 *         """Get the 'at' vector for this pose.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.getAt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_toReturn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":994
 * 
 *     @property
 *     def up(self):             # <<<<<<<<<<<<<<
 *         return self.getUp()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_2up_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_2up_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_2up___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_2up___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":995
 *     @property
 *     def up(self):
 *         return self.getUp()             # <<<<<<<<<<<<<<
 * 
 *     def getUp(self, object outVector=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getUp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallNoArg(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":994
 * 
 *     @property
 *     def up(self):             # <<<<<<<<<<<<<<
 *         return self.getUp()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.up.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":997
 *         return self.getUp()
 * 
 *     def getUp(self, object outVector=None):             # <<<<<<<<<<<<<<
 *         """Get the 'up' vector for this pose.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_21getUp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_20getUp[] = "LibOVRPose.getUp(self, outVector=None)\nGet the 'up' vector for this pose.\n\n        Parameters\n        ----------\n        outVector : ndarray, optional\n            Option array to write values to. If None, the function will return\n            a new array. Must have a float32 data type and a length of 3.\n\n        Returns\n        -------\n        ndarray or None\n            The vector for 'up' if `outVector`=None. Returns None if `outVector`\n            was specified.\n\n        Raises\n        ------\n        ValueError\n            Buffer dtype mismatch where float32 was expected.\n        IndexError\n            Out of bounds on buffer access.\n\n        Notes\n        -----\n        It's better to use the `up` property if you are not supplying an output\n        array. However, `getUp` will have the same effect as the `up` property\n        if `outVector`=None.\n\n        Examples\n        --------\n\n        Using the 'up' vector with gluLookAt::\n\n            up = myPose.getUp()  # myPose.up also works\n            center = myPose.pos\n            target = targetPose.pos  # some target pose\n            gluLookAt(*(*up, *center, *target))\n\n        See Also\n        --------\n        getAt : Get the 'at' vector.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_21getUp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_outVector = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getUp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_outVector,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outVector);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getUp") < 0)) __PYX_ERR(0, 997, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_outVector = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getUp", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 997, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.getUp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_20getUp(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), __pyx_v_outVector);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_20getUp(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_outVector) {
  PyArrayObject *__pyx_v_toReturn = 0;
  OVR::Vector3f __pyx_v_up;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_toReturn;
  __Pyx_Buffer __pyx_pybuffer_toReturn;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  OVR::Vector3f __pyx_t_12;
  float __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  __Pyx_RefNannySetupContext("getUp", 0);
  __pyx_pybuffer_toReturn.pybuffer.buf = NULL;
  __pyx_pybuffer_toReturn.refcount = 0;
  __pyx_pybuffernd_toReturn.data = NULL;
  __pyx_pybuffernd_toReturn.rcbuffer = &__pyx_pybuffer_toReturn;

  /* "psychxr/libovr/_libovr.pyx":1041
 *         """
 *         cdef np.ndarray[np.float32_t, ndim=1] toReturn
 *         if outVector is None:             # <<<<<<<<<<<<<<
 *             toReturn = np.zeros((3,), dtype=np.float32)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_outVector == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":1042
 *         cdef np.ndarray[np.float32_t, ndim=1] toReturn
 *         if outVector is None:
 *             toReturn = np.zeros((3,), dtype=np.float32)             # <<<<<<<<<<<<<<
 *         else:
 *             toReturn = outVector
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__6, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1042, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer, (PyObject*)__pyx_v_toReturn, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        }
        __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
      }
      __pyx_pybuffernd_toReturn.diminfo[0].strides = __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_toReturn.diminfo[0].shape = __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1042, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __pyx_v_toReturn = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "psychxr/libovr/_libovr.pyx":1041
 *         """
 *         cdef np.ndarray[np.float32_t, ndim=1] toReturn
 *         if outVector is None:             # <<<<<<<<<<<<<<
 *             toReturn = np.zeros((3,), dtype=np.float32)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":1044
 *             toReturn = np.zeros((3,), dtype=np.float32)
 *         else:
 *             toReturn = outVector             # <<<<<<<<<<<<<<
 * 
 *         cdef libovr_math.Vector3f up = \
 */
  /*else*/ {
    if (!(likely(((__pyx_v_outVector) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_outVector, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1044, __pyx_L1_error)
    __pyx_t_6 = __pyx_v_outVector;
    __Pyx_INCREF(__pyx_t_6);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_6), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer, (PyObject*)__pyx_v_toReturn, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
        }
        __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
      }
      __pyx_pybuffernd_toReturn.diminfo[0].strides = __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_toReturn.diminfo[0].shape = __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 1044, __pyx_L1_error)
    }
    __pyx_v_toReturn = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":1048
 *         cdef libovr_math.Vector3f up = \
 *             (<libovr_math.Quatf>self.c_data[0].Orientation).Rotate(
 *                 libovr_math.Vector3f(0.0, 1.0, 0.0))             # <<<<<<<<<<<<<<
 * 
 *         toReturn[0] = up.x
 */
  try {
    __pyx_t_12 = OVR::Vector3f(0.0, 1.0, 0.0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1048, __pyx_L1_error)
  }

  /* "psychxr/libovr/_libovr.pyx":1047
 * 
 *         cdef libovr_math.Vector3f up = \
 *             (<libovr_math.Quatf>self.c_data[0].Orientation).Rotate(             # <<<<<<<<<<<<<<
 *                 libovr_math.Vector3f(0.0, 1.0, 0.0))
 * 
 */
  __pyx_v_up = ((OVR::Quatf)(__pyx_v_self->c_data[0]).Orientation).Rotate(__pyx_t_12);

  /* "psychxr/libovr/_libovr.pyx":1050
 *                 libovr_math.Vector3f(0.0, 1.0, 0.0))
 * 
 *         toReturn[0] = up.x             # <<<<<<<<<<<<<<
 *         toReturn[1] = up.y
 *         toReturn[2] = up.z
 */
  __pyx_t_13 = __pyx_v_up.x;
  __pyx_t_14 = 0;
  __pyx_t_8 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_toReturn.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_toReturn.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 1050, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_toReturn.diminfo[0].strides) = __pyx_t_13;

  /* "psychxr/libovr/_libovr.pyx":1051
 * 
 *         toReturn[0] = up.x
 *         toReturn[1] = up.y             # <<<<<<<<<<<<<<
 *         toReturn[2] = up.z
 * 
 */
  __pyx_t_13 = __pyx_v_up.y;
  __pyx_t_15 = 1;
  __pyx_t_8 = -1;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_toReturn.diminfo[0].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_toReturn.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 1051, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_toReturn.diminfo[0].strides) = __pyx_t_13;

  /* "psychxr/libovr/_libovr.pyx":1052
 *         toReturn[0] = up.x
 *         toReturn[1] = up.y
 *         toReturn[2] = up.z             # <<<<<<<<<<<<<<
 * 
 *         if outVector is None:
 */
  __pyx_t_13 = __pyx_v_up.z;
  __pyx_t_16 = 2;
  __pyx_t_8 = -1;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_pybuffernd_toReturn.diminfo[0].shape;
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_8 = 0;
  } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_toReturn.diminfo[0].shape)) __pyx_t_8 = 0;
  if (unlikely(__pyx_t_8 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_8);
    __PYX_ERR(0, 1052, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_toReturn.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_toReturn.diminfo[0].strides) = __pyx_t_13;

  /* "psychxr/libovr/_libovr.pyx":1054
 *         toReturn[2] = up.z
 * 
 *         if outVector is None:             # <<<<<<<<<<<<<<
 *             return toReturn
 * 
 */
  __pyx_t_2 = (__pyx_v_outVector == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":1055
 * 
 *         if outVector is None:
 *             return toReturn             # <<<<<<<<<<<<<<
 * 
 *     def getYawPitchRoll(self, LibOVRPose refPose=None):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_toReturn));
    __pyx_r = ((PyObject *)__pyx_v_toReturn);
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":1054
 *         toReturn[2] = up.z
 * 
 *         if outVector is None:             # <<<<<<<<<<<<<<
 *             return toReturn
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":997
 *         return self.getUp()
 * 
 *     def getUp(self, object outVector=None):             # <<<<<<<<<<<<<<
 *         """Get the 'up' vector for this pose.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.getUp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_toReturn.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_toReturn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1057
 *             return toReturn
 * 
 *     def getYawPitchRoll(self, LibOVRPose refPose=None):             # <<<<<<<<<<<<<<
 *         """Get the yaw, pitch, and roll of the orientation quaternion.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_23getYawPitchRoll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_22getYawPitchRoll[] = "LibOVRPose.getYawPitchRoll(self, LibOVRPose refPose=None)\nGet the yaw, pitch, and roll of the orientation quaternion.\n\n        Parameters\n        ----------\n        refPose : LibOVRPose, optional\n            Reference pose to compute angles relative to. If None is specified,\n            computed values are referenced relative to the world axes.\n\n        Returns\n        -------\n        ndarray of floats\n            Yaw, pitch, and roll of the pose in degrees.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_23getYawPitchRoll(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_refPose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getYawPitchRoll (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_refPose,0};
    PyObject* values[1] = {0};
    values[0] = (PyObject *)((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_refPose);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getYawPitchRoll") < 0)) __PYX_ERR(0, 1057, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_refPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getYawPitchRoll", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1057, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.getYawPitchRoll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_refPose), __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose, 1, "refPose", 0))) __PYX_ERR(0, 1057, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_22getYawPitchRoll(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), __pyx_v_refPose);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_22getYawPitchRoll(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_refPose) {
  float __pyx_v_yaw;
  float __pyx_v_pitch;
  float __pyx_v_roll;
  OVR::Posef __pyx_v_inPose;
  OVR::Posef __pyx_v_invRef;
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("getYawPitchRoll", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":1073
 *         """
 *         cdef float yaw, pitch, roll
 *         cdef libovr_math.Posef inPose = <libovr_math.Posef>self.c_data[0]             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Posef invRef
 * 
 */
  __pyx_v_inPose = ((OVR::Posef)(__pyx_v_self->c_data[0]));

  /* "psychxr/libovr/_libovr.pyx":1076
 *         cdef libovr_math.Posef invRef
 * 
 *         if refPose is not None:             # <<<<<<<<<<<<<<
 *             invRef = (<libovr_math.Posef>refPose.c_data[0]).Inverted()
 *             inPose = invRef * inPose
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_refPose) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":1077
 * 
 *         if refPose is not None:
 *             invRef = (<libovr_math.Posef>refPose.c_data[0]).Inverted()             # <<<<<<<<<<<<<<
 *             inPose = invRef * inPose
 * 
 */
    __pyx_v_invRef = ((OVR::Posef)(__pyx_v_refPose->c_data[0])).Inverted();

    /* "psychxr/libovr/_libovr.pyx":1078
 *         if refPose is not None:
 *             invRef = (<libovr_math.Posef>refPose.c_data[0]).Inverted()
 *             inPose = invRef * inPose             # <<<<<<<<<<<<<<
 * 
 *         inPose.Rotation.GetYawPitchRoll(&yaw, &pitch, &roll)
 */
    __pyx_v_inPose = (__pyx_v_invRef * __pyx_v_inPose);

    /* "psychxr/libovr/_libovr.pyx":1076
 *         cdef libovr_math.Posef invRef
 * 
 *         if refPose is not None:             # <<<<<<<<<<<<<<
 *             invRef = (<libovr_math.Posef>refPose.c_data[0]).Inverted()
 *             inPose = invRef * inPose
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1080
 *             inPose = invRef * inPose
 * 
 *         inPose.Rotation.GetYawPitchRoll(&yaw, &pitch, &roll)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 */
  __pyx_v_inPose.Rotation.GetYawPitchRoll((&__pyx_v_yaw), (&__pyx_v_pitch), (&__pyx_v_roll));

  /* "psychxr/libovr/_libovr.pyx":1083
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((yaw, pitch, roll), dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_yaw); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_pitch); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_roll); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1083, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_to_return = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1082, __pyx_L1_error)
    } else {__pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":1085
 *             np.array((yaw, pitch, roll), dtype=np.float32)
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     def getTransformMatrix(self, bint inverse=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1057
 *             return toReturn
 * 
 *     def getYawPitchRoll(self, LibOVRPose refPose=None):             # <<<<<<<<<<<<<<
 *         """Get the yaw, pitch, and roll of the orientation quaternion.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.getYawPitchRoll", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1087
 *         return to_return
 * 
 *     def getTransformMatrix(self, bint inverse=False):             # <<<<<<<<<<<<<<
 *         """Convert this pose into a 4x4 transformation matrix.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_25getTransformMatrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_24getTransformMatrix[] = "LibOVRPose.getTransformMatrix(self, bool inverse=False)\nConvert this pose into a 4x4 transformation matrix.\n\n        Parameters\n        ----------\n        inverse : bool, optional\n            If True, return the inverse of the matrix.\n\n        Returns\n        -------\n        ndarray\n            4x4 transformation matrix.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_25getTransformMatrix(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_inverse;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTransformMatrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_inverse,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_inverse);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getTransformMatrix") < 0)) __PYX_ERR(0, 1087, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_inverse = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_inverse == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1087, __pyx_L3_error)
    } else {
      __pyx_v_inverse = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getTransformMatrix", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1087, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.getTransformMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_24getTransformMatrix(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), __pyx_v_inverse);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_24getTransformMatrix(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, int __pyx_v_inverse) {
  OVR::Matrix4f __pyx_v_m_pose;
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_memviewslice __pyx_v_mv = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_N;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  __Pyx_memviewslice __pyx_t_7 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  __Pyx_RefNannySetupContext("getTransformMatrix", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":1101
 * 
 *         """
 *         cdef libovr_math.Matrix4f m_pose = libovr_math.Matrix4f(             # <<<<<<<<<<<<<<
 *             <libovr_math.Posef>self.c_data[0])
 * 
 */
  __pyx_v_m_pose = OVR::Matrix4f(((OVR::Posef)(__pyx_v_self->c_data[0])));

  /* "psychxr/libovr/_libovr.pyx":1104
 *             <libovr_math.Posef>self.c_data[0])
 * 
 *         if inverse:             # <<<<<<<<<<<<<<
 *             m_pose.InvertHomogeneousTransform()  # faster than Invert() here
 * 
 */
  __pyx_t_1 = (__pyx_v_inverse != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":1105
 * 
 *         if inverse:
 *             m_pose.InvertHomogeneousTransform()  # faster than Invert() here             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=2] to_return = \
 */
    __pyx_v_m_pose.InvertHomogeneousTransform();

    /* "psychxr/libovr/_libovr.pyx":1104
 *             <libovr_math.Posef>self.c_data[0])
 * 
 *         if inverse:             # <<<<<<<<<<<<<<
 *             m_pose.InvertHomogeneousTransform()  # faster than Invert() here
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1108
 * 
 *         cdef np.ndarray[np.float32_t, ndim=2] to_return = \
 *             np.zeros((4, 4), dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         # fast copy matrix to numpy array
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__8, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1108, __pyx_L1_error)
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_to_return = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1107, __pyx_L1_error)
    } else {__pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_to_return.diminfo[1].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_to_return.diminfo[1].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_6 = 0;
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "psychxr/libovr/_libovr.pyx":1111
 * 
 *         # fast copy matrix to numpy array
 *         cdef float [:, :] mv = to_return             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t i, j
 *         cdef Py_ssize_t N = 4
 */
  __pyx_t_7 = __Pyx_PyObject_to_MemoryviewSlice_dsds_float(((PyObject *)__pyx_v_to_return), PyBUF_WRITABLE); if (unlikely(!__pyx_t_7.memview)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __pyx_v_mv = __pyx_t_7;
  __pyx_t_7.memview = NULL;
  __pyx_t_7.data = NULL;

  /* "psychxr/libovr/_libovr.pyx":1113
 *         cdef float [:, :] mv = to_return
 *         cdef Py_ssize_t i, j
 *         cdef Py_ssize_t N = 4             # <<<<<<<<<<<<<<
 *         i = j = 0
 *         for i in range(N):
 */
  __pyx_v_N = 4;

  /* "psychxr/libovr/_libovr.pyx":1114
 *         cdef Py_ssize_t i, j
 *         cdef Py_ssize_t N = 4
 *         i = j = 0             # <<<<<<<<<<<<<<
 *         for i in range(N):
 *             for j in range(N):
 */
  __pyx_v_i = 0;
  __pyx_v_j = 0;

  /* "psychxr/libovr/_libovr.pyx":1115
 *         cdef Py_ssize_t N = 4
 *         i = j = 0
 *         for i in range(N):             # <<<<<<<<<<<<<<
 *             for j in range(N):
 *                 mv[i, j] = m_pose.M[i][j]
 */
  __pyx_t_8 = __pyx_v_N;
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
    __pyx_v_i = __pyx_t_10;

    /* "psychxr/libovr/_libovr.pyx":1116
 *         i = j = 0
 *         for i in range(N):
 *             for j in range(N):             # <<<<<<<<<<<<<<
 *                 mv[i, j] = m_pose.M[i][j]
 * 
 */
    __pyx_t_11 = __pyx_v_N;
    __pyx_t_12 = __pyx_t_11;
    for (__pyx_t_13 = 0; __pyx_t_13 < __pyx_t_12; __pyx_t_13+=1) {
      __pyx_v_j = __pyx_t_13;

      /* "psychxr/libovr/_libovr.pyx":1117
 *         for i in range(N):
 *             for j in range(N):
 *                 mv[i, j] = m_pose.M[i][j]             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
      __pyx_t_14 = __pyx_v_i;
      __pyx_t_15 = __pyx_v_j;
      __pyx_t_16 = -1;
      if (__pyx_t_14 < 0) {
        __pyx_t_14 += __pyx_v_mv.shape[0];
        if (unlikely(__pyx_t_14 < 0)) __pyx_t_16 = 0;
      } else if (unlikely(__pyx_t_14 >= __pyx_v_mv.shape[0])) __pyx_t_16 = 0;
      if (__pyx_t_15 < 0) {
        __pyx_t_15 += __pyx_v_mv.shape[1];
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_16 = 1;
      } else if (unlikely(__pyx_t_15 >= __pyx_v_mv.shape[1])) __pyx_t_16 = 1;
      if (unlikely(__pyx_t_16 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_16);
        __PYX_ERR(0, 1117, __pyx_L1_error)
      }
      *((float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_mv.data + __pyx_t_14 * __pyx_v_mv.strides[0]) ) + __pyx_t_15 * __pyx_v_mv.strides[1]) )) = ((__pyx_v_m_pose.M[__pyx_v_i])[__pyx_v_j]);
    }
  }

  /* "psychxr/libovr/_libovr.pyx":1119
 *                 mv[i, j] = m_pose.M[i][j]
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     def normalize(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1087
 *         return to_return
 * 
 *     def getTransformMatrix(self, bint inverse=False):             # <<<<<<<<<<<<<<
 *         """Convert this pose into a 4x4 transformation matrix.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __PYX_XDEC_MEMVIEW(&__pyx_t_7, 1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.getTransformMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __PYX_XDEC_MEMVIEW(&__pyx_v_mv, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1121
 *         return to_return
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """Normalize this pose.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_27normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_26normalize[] = "LibOVRPose.normalize(self)\nNormalize this pose.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_27normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_26normalize(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_26normalize(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 0);

  /* "psychxr/libovr/_libovr.pyx":1125
 * 
 *         """
 *         (<libovr_math.Posef>self.c_data[0]).Normalize()             # <<<<<<<<<<<<<<
 * 
 *     def inverted(self):
 */
  ((OVR::Posef)(__pyx_v_self->c_data[0])).Normalize();

  /* "psychxr/libovr/_libovr.pyx":1121
 *         return to_return
 * 
 *     def normalize(self):             # <<<<<<<<<<<<<<
 *         """Normalize this pose.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1127
 *         (<libovr_math.Posef>self.c_data[0]).Normalize()
 * 
 *     def inverted(self):             # <<<<<<<<<<<<<<
 *         """Get the inverse of the pose.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_29inverted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_28inverted[] = "LibOVRPose.inverted(self)\nGet the inverse of the pose.\n\n        Returns\n        -------\n        `LibOVRPose`\n            Inverted pose.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_29inverted(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inverted (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_28inverted(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_28inverted(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  OVR::Quatf __pyx_v_inv_ori;
  CYTHON_UNUSED OVR::Vector3f __pyx_v_inv_pos;
  CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_to_return = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("inverted", 0);

  /* "psychxr/libovr/_libovr.pyx":1137
 *         """
 *         cdef libovr_math.Quatf inv_ori = \
 *             (<libovr_math.Quatf>self.c_data[0].Orientation).Inverted()             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Vector3f inv_pos = \
 *             (<libovr_math.Quatf>inv_ori).Rotate(
 */
  __pyx_v_inv_ori = ((OVR::Quatf)(__pyx_v_self->c_data[0]).Orientation).Inverted();

  /* "psychxr/libovr/_libovr.pyx":1139
 *             (<libovr_math.Quatf>self.c_data[0].Orientation).Inverted()
 *         cdef libovr_math.Vector3f inv_pos = \
 *             (<libovr_math.Quatf>inv_ori).Rotate(             # <<<<<<<<<<<<<<
 *                 -(<libovr_math.Vector3f>self.c_data[0].Position))
 *         cdef LibOVRPose to_return = \
 */
  __pyx_v_inv_pos = ((OVR::Quatf)__pyx_v_inv_ori).Rotate((-((OVR::Vector3f)(__pyx_v_self->c_data[0]).Position)));

  /* "psychxr/libovr/_libovr.pyx":1143
 *         cdef LibOVRPose to_return = \
 *             LibOVRPose(
 *                 (self.c_data[0].Position.x,             # <<<<<<<<<<<<<<
 *                  self.c_data[0].Position.y,
 *                  self.c_data[0].Position.z),
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Position.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":1144
 *             LibOVRPose(
 *                 (self.c_data[0].Position.x,
 *                  self.c_data[0].Position.y,             # <<<<<<<<<<<<<<
 *                  self.c_data[0].Position.z),
 *                 (self.c_data[0].Orientation.x,
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Position.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":1145
 *                 (self.c_data[0].Position.x,
 *                  self.c_data[0].Position.y,
 *                  self.c_data[0].Position.z),             # <<<<<<<<<<<<<<
 *                 (self.c_data[0].Orientation.x,
 *                  self.c_data[0].Orientation.y,
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Position.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":1143
 *         cdef LibOVRPose to_return = \
 *             LibOVRPose(
 *                 (self.c_data[0].Position.x,             # <<<<<<<<<<<<<<
 *                  self.c_data[0].Position.y,
 *                  self.c_data[0].Position.z),
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":1146
 *                  self.c_data[0].Position.y,
 *                  self.c_data[0].Position.z),
 *                 (self.c_data[0].Orientation.x,             # <<<<<<<<<<<<<<
 *                  self.c_data[0].Orientation.y,
 *                  self.c_data[0].Orientation.z,
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Orientation.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":1147
 *                  self.c_data[0].Position.z),
 *                 (self.c_data[0].Orientation.x,
 *                  self.c_data[0].Orientation.y,             # <<<<<<<<<<<<<<
 *                  self.c_data[0].Orientation.z,
 *                  self.c_data[0].Orientation.w))
 */
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Orientation.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":1148
 *                 (self.c_data[0].Orientation.x,
 *                  self.c_data[0].Orientation.y,
 *                  self.c_data[0].Orientation.z,             # <<<<<<<<<<<<<<
 *                  self.c_data[0].Orientation.w))
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Orientation.z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":1149
 *                  self.c_data[0].Orientation.y,
 *                  self.c_data[0].Orientation.z,
 *                  self.c_data[0].Orientation.w))             # <<<<<<<<<<<<<<
 * 
 *     def rotate(self, object v):
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).Orientation.w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "psychxr/libovr/_libovr.pyx":1146
 *                  self.c_data[0].Position.y,
 *                  self.c_data[0].Position.z),
 *                 (self.c_data[0].Orientation.x,             # <<<<<<<<<<<<<<
 *                  self.c_data[0].Orientation.y,
 *                  self.c_data[0].Orientation.z,
 */
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;

  /* "psychxr/libovr/_libovr.pyx":1142
 *                 -(<libovr_math.Vector3f>self.c_data[0].Position))
 *         cdef LibOVRPose to_return = \
 *             LibOVRPose(             # <<<<<<<<<<<<<<
 *                 (self.c_data[0].Position.x,
 *                  self.c_data[0].Position.y,
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose), __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_to_return = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "psychxr/libovr/_libovr.pyx":1127
 *         (<libovr_math.Posef>self.c_data[0]).Normalize()
 * 
 *     def inverted(self):             # <<<<<<<<<<<<<<
 *         """Get the inverse of the pose.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.inverted", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1151
 *                  self.c_data[0].Orientation.w))
 * 
 *     def rotate(self, object v):             # <<<<<<<<<<<<<<
 *         """Rotate a position vector.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_31rotate(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_30rotate[] = "LibOVRPose.rotate(self, v)\nRotate a position vector.\n\n        Parameters\n        ----------\n        v : tuple, list, or ndarray of float\n            Vector to rotate.\n\n        Returns\n        -------\n        ndarray\n            Vector rotated by the pose's orientation.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_31rotate(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rotate (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_30rotate(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_30rotate(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v) {
  OVR::Vector3f __pyx_v_pos_in;
  OVR::Vector3f __pyx_v_rotated_pos;
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  OVR::Vector3f __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("rotate", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":1166
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(
 *             <float>v[0], <float>v[1], <float>v[2])             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Vector3f rotated_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).Rotate(pos_in)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1165
 * 
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(             # <<<<<<<<<<<<<<
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f rotated_pos = \
 */
  try {
    __pyx_t_5 = OVR::Vector3f(((float)__pyx_t_2), ((float)__pyx_t_3), ((float)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1165, __pyx_L1_error)
  }
  __pyx_v_pos_in = __pyx_t_5;

  /* "psychxr/libovr/_libovr.pyx":1168
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f rotated_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).Rotate(pos_in)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 */
  __pyx_v_rotated_pos = ((OVR::Posef)(__pyx_v_self->c_data[0])).Rotate(__pyx_v_pos_in);

  /* "psychxr/libovr/_libovr.pyx":1171
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((rotated_pos.x, rotated_pos.y, rotated_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_rotated_pos.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_rotated_pos.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_rotated_pos.z); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "psychxr/libovr/_libovr.pyx":1172
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((rotated_pos.x, rotated_pos.y, rotated_pos.z),
 *                      dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1171
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((rotated_pos.x, rotated_pos.y, rotated_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1171, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_to_return = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1170, __pyx_L1_error)
    } else {__pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1174
 *                      dtype=np.float32)
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     def inverseRotate(self, object v):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1151
 *                  self.c_data[0].Orientation.w))
 * 
 *     def rotate(self, object v):             # <<<<<<<<<<<<<<
 *         """Rotate a position vector.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.rotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1176
 *         return to_return
 * 
 *     def inverseRotate(self, object v):             # <<<<<<<<<<<<<<
 *         """Inverse rotate a position vector.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_33inverseRotate(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_32inverseRotate[] = "LibOVRPose.inverseRotate(self, v)\nInverse rotate a position vector.\n\n        Parameters\n        ----------\n        v : tuple, list, or ndarray of float\n            Vector to rotate.\n\n        Returns\n        -------\n        ndarray\n            Vector rotated by the pose's inverse orientation.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_33inverseRotate(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inverseRotate (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_32inverseRotate(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_32inverseRotate(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v) {
  OVR::Vector3f __pyx_v_pos_in;
  OVR::Vector3f __pyx_v_invRotatedPos;
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  OVR::Vector3f __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("inverseRotate", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":1191
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(
 *             <float>v[0], <float>v[1], <float>v[2])             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Vector3f invRotatedPos = \
 *             (<libovr_math.Posef>self.c_data[0]).InverseRotate(pos_in)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1191, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1190
 * 
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(             # <<<<<<<<<<<<<<
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f invRotatedPos = \
 */
  try {
    __pyx_t_5 = OVR::Vector3f(((float)__pyx_t_2), ((float)__pyx_t_3), ((float)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1190, __pyx_L1_error)
  }
  __pyx_v_pos_in = __pyx_t_5;

  /* "psychxr/libovr/_libovr.pyx":1193
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f invRotatedPos = \
 *             (<libovr_math.Posef>self.c_data[0]).InverseRotate(pos_in)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 */
  __pyx_v_invRotatedPos = ((OVR::Posef)(__pyx_v_self->c_data[0])).InverseRotate(__pyx_v_pos_in);

  /* "psychxr/libovr/_libovr.pyx":1196
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((invRotatedPos.x, invRotatedPos.y, invRotatedPos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_invRotatedPos.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_invRotatedPos.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_invRotatedPos.z); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "psychxr/libovr/_libovr.pyx":1197
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((invRotatedPos.x, invRotatedPos.y, invRotatedPos.z),
 *                      dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 1197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1196
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((invRotatedPos.x, invRotatedPos.y, invRotatedPos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1196, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_to_return = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1195, __pyx_L1_error)
    } else {__pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1199
 *                      dtype=np.float32)
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     def translate(self, object v):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1176
 *         return to_return
 * 
 *     def inverseRotate(self, object v):             # <<<<<<<<<<<<<<
 *         """Inverse rotate a position vector.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.inverseRotate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1201
 *         return to_return
 * 
 *     def translate(self, object v):             # <<<<<<<<<<<<<<
 *         """Translate a position vector.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_35translate(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_34translate[] = "LibOVRPose.translate(self, v)\nTranslate a position vector.\n\n        Parameters\n        ----------\n        v : tuple, list, or ndarray of float\n            Vector to translate (x, y, z).\n\n        Returns\n        -------\n        ndarray\n            Vector translated by the pose's position.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_35translate(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("translate (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_34translate(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_34translate(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v) {
  OVR::Vector3f __pyx_v_pos_in;
  OVR::Vector3f __pyx_v_translated_pos;
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  OVR::Vector3f __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("translate", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":1216
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(
 *             <float>v[0], <float>v[1], <float>v[2])             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Vector3f translated_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).Translate(pos_in)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1216, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1215
 * 
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(             # <<<<<<<<<<<<<<
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f translated_pos = \
 */
  try {
    __pyx_t_5 = OVR::Vector3f(((float)__pyx_t_2), ((float)__pyx_t_3), ((float)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1215, __pyx_L1_error)
  }
  __pyx_v_pos_in = __pyx_t_5;

  /* "psychxr/libovr/_libovr.pyx":1218
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f translated_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).Translate(pos_in)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 */
  __pyx_v_translated_pos = ((OVR::Posef)(__pyx_v_self->c_data[0])).Translate(__pyx_v_pos_in);

  /* "psychxr/libovr/_libovr.pyx":1221
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((translated_pos.x, translated_pos.y, translated_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_translated_pos.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_translated_pos.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_translated_pos.z); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "psychxr/libovr/_libovr.pyx":1222
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((translated_pos.x, translated_pos.y, translated_pos.z),
 *                      dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1221
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((translated_pos.x, translated_pos.y, translated_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1221, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_to_return = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1220, __pyx_L1_error)
    } else {__pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1224
 *                      dtype=np.float32)
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     def transform(self, object v):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1201
 *         return to_return
 * 
 *     def translate(self, object v):             # <<<<<<<<<<<<<<
 *         """Translate a position vector.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.translate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1226
 *         return to_return
 * 
 *     def transform(self, object v):             # <<<<<<<<<<<<<<
 *         """Transform a position vector.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_37transform(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_36transform[] = "LibOVRPose.transform(self, v)\nTransform a position vector.\n\n        Parameters\n        ----------\n        v : tuple, list, or ndarray of float\n            Vector to transform (x, y, z).\n\n        Returns\n        -------\n        ndarray\n            Vector transformed by the pose's position and orientation.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_37transform(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_36transform(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_36transform(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v) {
  OVR::Vector3f __pyx_v_pos_in;
  OVR::Vector3f __pyx_v_transformed_pos;
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  OVR::Vector3f __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("transform", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":1241
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(
 *             <float>v[0], <float>v[1], <float>v[2])             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Vector3f transformed_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).Transform(pos_in)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1241, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1240
 * 
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(             # <<<<<<<<<<<<<<
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f transformed_pos = \
 */
  try {
    __pyx_t_5 = OVR::Vector3f(((float)__pyx_t_2), ((float)__pyx_t_3), ((float)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1240, __pyx_L1_error)
  }
  __pyx_v_pos_in = __pyx_t_5;

  /* "psychxr/libovr/_libovr.pyx":1243
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f transformed_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).Transform(pos_in)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 */
  __pyx_v_transformed_pos = ((OVR::Posef)(__pyx_v_self->c_data[0])).Transform(__pyx_v_pos_in);

  /* "psychxr/libovr/_libovr.pyx":1246
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_transformed_pos.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_transformed_pos.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_transformed_pos.z); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "psychxr/libovr/_libovr.pyx":1247
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),
 *                      dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 1247, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1246
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1246, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_to_return = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1245, __pyx_L1_error)
    } else {__pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1249
 *                      dtype=np.float32)
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     def inverseTransform(self, object v):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1226
 *         return to_return
 * 
 *     def transform(self, object v):             # <<<<<<<<<<<<<<
 *         """Transform a position vector.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.transform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1251
 *         return to_return
 * 
 *     def inverseTransform(self, object v):             # <<<<<<<<<<<<<<
 *         """Inverse transform a position vector.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_39inverseTransform(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_38inverseTransform[] = "LibOVRPose.inverseTransform(self, v)\nInverse transform a position vector.\n\n        Parameters\n        ----------\n        v : tuple, list, or ndarray of float\n            Vector to transform (x, y, z).\n\n        Returns\n        -------\n        ndarray\n            Vector transformed by the inverse of the pose's position and\n            orientation.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_39inverseTransform(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inverseTransform (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_38inverseTransform(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_38inverseTransform(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v) {
  OVR::Vector3f __pyx_v_pos_in;
  OVR::Vector3f __pyx_v_transformed_pos;
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  OVR::Vector3f __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("inverseTransform", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":1267
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(
 *             <float>v[0], <float>v[1], <float>v[2])             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Vector3f transformed_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).InverseTransform(pos_in)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1266
 * 
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(             # <<<<<<<<<<<<<<
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f transformed_pos = \
 */
  try {
    __pyx_t_5 = OVR::Vector3f(((float)__pyx_t_2), ((float)__pyx_t_3), ((float)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1266, __pyx_L1_error)
  }
  __pyx_v_pos_in = __pyx_t_5;

  /* "psychxr/libovr/_libovr.pyx":1269
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f transformed_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).InverseTransform(pos_in)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 */
  __pyx_v_transformed_pos = ((OVR::Posef)(__pyx_v_self->c_data[0])).InverseTransform(__pyx_v_pos_in);

  /* "psychxr/libovr/_libovr.pyx":1272
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_transformed_pos.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_transformed_pos.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_transformed_pos.z); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "psychxr/libovr/_libovr.pyx":1273
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),
 *                      dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 1273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1272
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1272, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_to_return = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1271, __pyx_L1_error)
    } else {__pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1275
 *                      dtype=np.float32)
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     def transformNormal(self, object v):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1251
 *         return to_return
 * 
 *     def inverseTransform(self, object v):             # <<<<<<<<<<<<<<
 *         """Inverse transform a position vector.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.inverseTransform", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1277
 *         return to_return
 * 
 *     def transformNormal(self, object v):             # <<<<<<<<<<<<<<
 *         """Transform a normal vector.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_41transformNormal(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_40transformNormal[] = "LibOVRPose.transformNormal(self, v)\nTransform a normal vector.\n\n        Parameters\n        ----------\n        v : tuple, list, or ndarray of float\n            Vector to transform (x, y, z).\n\n        Returns\n        -------\n        ndarray\n            Vector transformed by the pose's position and orientation.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_41transformNormal(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transformNormal (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_40transformNormal(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_40transformNormal(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v) {
  OVR::Vector3f __pyx_v_pos_in;
  OVR::Vector3f __pyx_v_transformed_pos;
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  OVR::Vector3f __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("transformNormal", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":1292
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(
 *             <float>v[0], <float>v[1], <float>v[2])             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Vector3f transformed_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).TransformNormal(pos_in)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1292, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1291
 * 
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(             # <<<<<<<<<<<<<<
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f transformed_pos = \
 */
  try {
    __pyx_t_5 = OVR::Vector3f(((float)__pyx_t_2), ((float)__pyx_t_3), ((float)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1291, __pyx_L1_error)
  }
  __pyx_v_pos_in = __pyx_t_5;

  /* "psychxr/libovr/_libovr.pyx":1294
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f transformed_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).TransformNormal(pos_in)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 */
  __pyx_v_transformed_pos = ((OVR::Posef)(__pyx_v_self->c_data[0])).TransformNormal(__pyx_v_pos_in);

  /* "psychxr/libovr/_libovr.pyx":1297
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_transformed_pos.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_transformed_pos.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_transformed_pos.z); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "psychxr/libovr/_libovr.pyx":1298
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),
 *                      dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 1298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1297
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1297, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_to_return = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1296, __pyx_L1_error)
    } else {__pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1300
 *                      dtype=np.float32)
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     def inverseTransformNormal(self, object v):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1277
 *         return to_return
 * 
 *     def transformNormal(self, object v):             # <<<<<<<<<<<<<<
 *         """Transform a normal vector.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.transformNormal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1302
 *         return to_return
 * 
 *     def inverseTransformNormal(self, object v):             # <<<<<<<<<<<<<<
 *         """Inverse transform a normal vector.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_43inverseTransformNormal(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_42inverseTransformNormal[] = "LibOVRPose.inverseTransformNormal(self, v)\nInverse transform a normal vector.\n\n        Parameters\n        ----------\n        v : tuple, list, or ndarray of float\n            Vector to transform (x, y, z).\n\n        Returns\n        -------\n        ndarray\n            Vector transformed by the pose's position and orientation.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_43inverseTransformNormal(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("inverseTransformNormal (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_42inverseTransformNormal(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_42inverseTransformNormal(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v) {
  OVR::Vector3f __pyx_v_pos_in;
  OVR::Vector3f __pyx_v_transformed_pos;
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  OVR::Vector3f __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("inverseTransformNormal", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":1317
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(
 *             <float>v[0], <float>v[1], <float>v[2])             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Vector3f transformed_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).InverseTransformNormal(pos_in)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1316
 * 
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(             # <<<<<<<<<<<<<<
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f transformed_pos = \
 */
  try {
    __pyx_t_5 = OVR::Vector3f(((float)__pyx_t_2), ((float)__pyx_t_3), ((float)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1316, __pyx_L1_error)
  }
  __pyx_v_pos_in = __pyx_t_5;

  /* "psychxr/libovr/_libovr.pyx":1319
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f transformed_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).InverseTransformNormal(pos_in)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 */
  __pyx_v_transformed_pos = ((OVR::Posef)(__pyx_v_self->c_data[0])).InverseTransformNormal(__pyx_v_pos_in);

  /* "psychxr/libovr/_libovr.pyx":1322
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_transformed_pos.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_transformed_pos.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_transformed_pos.z); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "psychxr/libovr/_libovr.pyx":1323
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),
 *                      dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 1323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1322
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1322, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_to_return = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1321, __pyx_L1_error)
    } else {__pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1325
 *                      dtype=np.float32)
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     def apply(self, object v):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1302
 *         return to_return
 * 
 *     def inverseTransformNormal(self, object v):             # <<<<<<<<<<<<<<
 *         """Inverse transform a normal vector.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.inverseTransformNormal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1327
 *         return to_return
 * 
 *     def apply(self, object v):             # <<<<<<<<<<<<<<
 *         """Apply a transform to a position vector.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_45apply(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_44apply[] = "LibOVRPose.apply(self, v)\nApply a transform to a position vector.\n\n        Parameters\n        ----------\n        v : tuple, list, or ndarray of float\n            Vector to transform (x, y, z).\n\n        Returns\n        -------\n        ndarray\n            Vector transformed by the pose's position and orientation.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_45apply(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_44apply(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_44apply(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v) {
  OVR::Vector3f __pyx_v_pos_in;
  OVR::Vector3f __pyx_v_transformed_pos;
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  OVR::Vector3f __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("apply", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":1342
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(
 *             <float>v[0], <float>v[1], <float>v[2])             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Vector3f transformed_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).Apply(pos_in)
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1341
 * 
 *         """
 *         cdef libovr_math.Vector3f pos_in = libovr_math.Vector3f(             # <<<<<<<<<<<<<<
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f transformed_pos = \
 */
  try {
    __pyx_t_5 = OVR::Vector3f(((float)__pyx_t_2), ((float)__pyx_t_3), ((float)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1341, __pyx_L1_error)
  }
  __pyx_v_pos_in = __pyx_t_5;

  /* "psychxr/libovr/_libovr.pyx":1344
 *             <float>v[0], <float>v[1], <float>v[2])
 *         cdef libovr_math.Vector3f transformed_pos = \
 *             (<libovr_math.Posef>self.c_data[0]).Apply(pos_in)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 */
  __pyx_v_transformed_pos = ((OVR::Posef)(__pyx_v_self->c_data[0])).Apply(__pyx_v_pos_in);

  /* "psychxr/libovr/_libovr.pyx":1347
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_transformed_pos.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyFloat_FromDouble(__pyx_v_transformed_pos.y); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_transformed_pos.z); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_8);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __pyx_t_9 = 0;

  /* "psychxr/libovr/_libovr.pyx":1348
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),
 *                      dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_np); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_1) < 0) __PYX_ERR(0, 1348, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1347
 * 
 *         cdef np.ndarray[np.float32_t, ndim=1] to_return = \
 *             np.array((transformed_pos.x, transformed_pos.y, transformed_pos.z),             # <<<<<<<<<<<<<<
 *                      dtype=np.float32)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1347, __pyx_L1_error)
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_to_return = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 1346, __pyx_L1_error)
    } else {__pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1350
 *                      dtype=np.float32)
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     def distanceTo(self, object v):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1327
 *         return to_return
 * 
 *     def apply(self, object v):             # <<<<<<<<<<<<<<
 *         """Apply a transform to a position vector.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.apply", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1352
 *         return to_return
 * 
 *     def distanceTo(self, object v):             # <<<<<<<<<<<<<<
 *         """Distance to a point or pose from this pose.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_47distanceTo(PyObject *__pyx_v_self, PyObject *__pyx_v_v); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_46distanceTo[] = "LibOVRPose.distanceTo(self, v)\nDistance to a point or pose from this pose.\n\n        Parameters\n        ----------\n        v : tuple, list, ndarray, or LibOVRPose\n            Vector to transform (x, y, z).\n\n        Returns\n        -------\n        float\n            Distance to a point or Pose.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_47distanceTo(PyObject *__pyx_v_self, PyObject *__pyx_v_v) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distanceTo (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_46distanceTo(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v_v));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_46distanceTo(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_v) {
  OVR::Vector3f __pyx_v_pos_in;
  CYTHON_UNUSED float __pyx_v_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  float __pyx_t_4;
  float __pyx_t_5;
  float __pyx_t_6;
  OVR::Vector3f __pyx_t_7;
  __Pyx_RefNannySetupContext("distanceTo", 0);

  /* "psychxr/libovr/_libovr.pyx":1368
 *         cdef libovr_math.Vector3f pos_in
 * 
 *         if isinstance(v, LibOVRPose):             # <<<<<<<<<<<<<<
 *             pos_in = <libovr_math.Vector3f>((<LibOVRPose>v).c_data[0]).Position
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_v, __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":1369
 * 
 *         if isinstance(v, LibOVRPose):
 *             pos_in = <libovr_math.Vector3f>((<LibOVRPose>v).c_data[0]).Position             # <<<<<<<<<<<<<<
 *         else:
 *             pos_in = libovr_math.Vector3f(<float>v[0], <float>v[1], <float>v[2])
 */
    __pyx_v_pos_in = ((OVR::Vector3f)(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_v)->c_data[0]).Position);

    /* "psychxr/libovr/_libovr.pyx":1368
 *         cdef libovr_math.Vector3f pos_in
 * 
 *         if isinstance(v, LibOVRPose):             # <<<<<<<<<<<<<<
 *             pos_in = <libovr_math.Vector3f>((<LibOVRPose>v).c_data[0]).Position
 *         else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":1371
 *             pos_in = <libovr_math.Vector3f>((<LibOVRPose>v).c_data[0]).Position
 *         else:
 *             pos_in = libovr_math.Vector3f(<float>v[0], <float>v[1], <float>v[2])             # <<<<<<<<<<<<<<
 * 
 *         cdef float to_return = \
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_v, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_v, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_5 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_v, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_6 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1371, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_t_7 = OVR::Vector3f(((float)__pyx_t_4), ((float)__pyx_t_5), ((float)__pyx_t_6));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1371, __pyx_L1_error)
    }
    __pyx_v_pos_in = __pyx_t_7;
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":1374
 * 
 *         cdef float to_return = \
 *             (<libovr_math.Posef>self.c_data[0]).Translation.Distance(pos_in)             # <<<<<<<<<<<<<<
 * 
 *     def raycastSphere(self, object targetPose, float radius=0.5, object rayDir=(0., 0., -1.), float maxRange=0.0):
 */
  __pyx_v_to_return = ((OVR::Posef)(__pyx_v_self->c_data[0])).Translation.Distance(__pyx_v_pos_in);

  /* "psychxr/libovr/_libovr.pyx":1352
 *         return to_return
 * 
 *     def distanceTo(self, object v):             # <<<<<<<<<<<<<<
 *         """Distance to a point or pose from this pose.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.distanceTo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1376
 *             (<libovr_math.Posef>self.c_data[0]).Translation.Distance(pos_in)
 * 
 *     def raycastSphere(self, object targetPose, float radius=0.5, object rayDir=(0., 0., -1.), float maxRange=0.0):             # <<<<<<<<<<<<<<
 *         """Raycast to a sphere.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_49raycastSphere(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_48raycastSphere[] = "LibOVRPose.raycastSphere(self, targetPose, float radius=0.5, rayDir=(0., 0., -1.), float maxRange=0.0)\nRaycast to a sphere.\n\n        Project an invisible ray of finite or infinite length from this pose in\n        rayDir and check if it intersects with the targetPose bounding sphere.\n\n        Specifying maxRange as >0.0 casts a ray of finite length in world\n        units. The distance between the target and ray origin position are\n        checked prior to casting the ray; automatically failing if the ray can\n        never reach the edge of the bounding sphere centered about targetPose.\n        This avoids having to do the costly transformations required for\n        picking.\n\n        This raycast implementation can only determine if contact is being made\n        with the object's bounding sphere, not where on the object the ray\n        intersects. This method might not work for irregular or elongated\n        objects since bounding spheres may not approximate those shapes well. In\n        such cases, one may use multiple spheres at different locations and\n        radii to pick the same object.\n\n        Parameters\n        ----------\n        targetPose : tuple, list, or ndarray of floats\n            Coordinates of the center of the target sphere (x, y, z).\n        radius : float, optional\n            The radius of the target.\n        rayDir : tuple, list, or ndarray of floats, optional\n            Vector indicating the direction for the ray (default is -Z).\n        maxRange : float, optional\n            The maximum range of the ray. Ray testing will fail automatically if\n            the target is out of range. The ray has infinite length if None is\n            specified. Ray is infinite if `maxRange`=0.0.\n\n        Returns\n        -------\n        bool\n            True if the ray intersects anywhere on the bounding sphere, False in\n            every other condition.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_49raycastSphere(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_targetPose = 0;
  float __pyx_v_radius;
  PyObject *__pyx_v_rayDir = 0;
  float __pyx_v_maxRange;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("raycastSphere (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_targetPose,&__pyx_n_s_radius,&__pyx_n_s_rayDir,&__pyx_n_s_maxRange,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject *)__pyx_tuple__9);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_targetPose)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radius);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_rayDir);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_maxRange);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "raycastSphere") < 0)) __PYX_ERR(0, 1376, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_targetPose = values[0];
    if (values[1]) {
      __pyx_v_radius = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_radius == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1376, __pyx_L3_error)
    } else {
      __pyx_v_radius = ((float)0.5);
    }
    __pyx_v_rayDir = values[2];
    if (values[3]) {
      __pyx_v_maxRange = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_maxRange == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1376, __pyx_L3_error)
    } else {
      __pyx_v_maxRange = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("raycastSphere", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1376, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.raycastSphere", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_48raycastSphere(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), __pyx_v_targetPose, __pyx_v_radius, __pyx_v_rayDir, __pyx_v_maxRange);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_48raycastSphere(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, PyObject *__pyx_v_targetPose, float __pyx_v_radius, PyObject *__pyx_v_rayDir, float __pyx_v_maxRange) {
  OVR::Vector3f __pyx_v_targetPos;
  OVR::Vector3f __pyx_v__rayDir;
  OVR::Posef __pyx_v_originPos;
  float __pyx_v_targetDist;
  OVR::Vector3f __pyx_v_offset;
  float __pyx_v_desc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  float __pyx_t_3;
  float __pyx_t_4;
  OVR::Vector3f __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("raycastSphere", 0);

  /* "psychxr/libovr/_libovr.pyx":1417
 *         """
 *         cdef libovr_math.Vector3f targetPos = libovr_math.Vector3f(
 *             <float>targetPose[0], <float>targetPose[1], <float>targetPose[2])             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Vector3f _rayDir = libovr_math.Vector3f(
 *             <float>rayDir[0], <float>rayDir[1], <float>rayDir[2])
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_targetPose, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_targetPose, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_targetPose, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1416
 * 
 *         """
 *         cdef libovr_math.Vector3f targetPos = libovr_math.Vector3f(             # <<<<<<<<<<<<<<
 *             <float>targetPose[0], <float>targetPose[1], <float>targetPose[2])
 *         cdef libovr_math.Vector3f _rayDir = libovr_math.Vector3f(
 */
  try {
    __pyx_t_5 = OVR::Vector3f(((float)__pyx_t_2), ((float)__pyx_t_3), ((float)__pyx_t_4));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1416, __pyx_L1_error)
  }
  __pyx_v_targetPos = __pyx_t_5;

  /* "psychxr/libovr/_libovr.pyx":1419
 *             <float>targetPose[0], <float>targetPose[1], <float>targetPose[2])
 *         cdef libovr_math.Vector3f _rayDir = libovr_math.Vector3f(
 *             <float>rayDir[0], <float>rayDir[1], <float>rayDir[2])             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Posef originPos = <libovr_math.Posef>self.c_data[0]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rayDir, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_4 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rayDir, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_3 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_rayDir, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1419, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1418
 *         cdef libovr_math.Vector3f targetPos = libovr_math.Vector3f(
 *             <float>targetPose[0], <float>targetPose[1], <float>targetPose[2])
 *         cdef libovr_math.Vector3f _rayDir = libovr_math.Vector3f(             # <<<<<<<<<<<<<<
 *             <float>rayDir[0], <float>rayDir[1], <float>rayDir[2])
 *         cdef libovr_math.Posef originPos = <libovr_math.Posef>self.c_data[0]
 */
  try {
    __pyx_t_5 = OVR::Vector3f(((float)__pyx_t_4), ((float)__pyx_t_3), ((float)__pyx_t_2));
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1418, __pyx_L1_error)
  }
  __pyx_v__rayDir = __pyx_t_5;

  /* "psychxr/libovr/_libovr.pyx":1420
 *         cdef libovr_math.Vector3f _rayDir = libovr_math.Vector3f(
 *             <float>rayDir[0], <float>rayDir[1], <float>rayDir[2])
 *         cdef libovr_math.Posef originPos = <libovr_math.Posef>self.c_data[0]             # <<<<<<<<<<<<<<
 * 
 *         # if the ray is finite, does it ever touch the edge of the sphere?
 */
  __pyx_v_originPos = ((OVR::Posef)(__pyx_v_self->c_data[0]));

  /* "psychxr/libovr/_libovr.pyx":1424
 *         # if the ray is finite, does it ever touch the edge of the sphere?
 *         cdef float targetDist
 *         if maxRange != 0.0:             # <<<<<<<<<<<<<<
 *             targetDist = targetPos.Distance(originPos.Translation) - radius
 *             if targetDist > maxRange:
 */
  __pyx_t_6 = ((__pyx_v_maxRange != 0.0) != 0);
  if (__pyx_t_6) {

    /* "psychxr/libovr/_libovr.pyx":1425
 *         cdef float targetDist
 *         if maxRange != 0.0:
 *             targetDist = targetPos.Distance(originPos.Translation) - radius             # <<<<<<<<<<<<<<
 *             if targetDist > maxRange:
 *                 return False
 */
    __pyx_v_targetDist = (__pyx_v_targetPos.Distance(__pyx_v_originPos.Translation) - __pyx_v_radius);

    /* "psychxr/libovr/_libovr.pyx":1426
 *         if maxRange != 0.0:
 *             targetDist = targetPos.Distance(originPos.Translation) - radius
 *             if targetDist > maxRange:             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
    __pyx_t_6 = ((__pyx_v_targetDist > __pyx_v_maxRange) != 0);
    if (__pyx_t_6) {

      /* "psychxr/libovr/_libovr.pyx":1427
 *             targetDist = targetPos.Distance(originPos.Translation) - radius
 *             if targetDist > maxRange:
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *         # put the target in the ray caster's local coordinate system
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "psychxr/libovr/_libovr.pyx":1426
 *         if maxRange != 0.0:
 *             targetDist = targetPos.Distance(originPos.Translation) - radius
 *             if targetDist > maxRange:             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
    }

    /* "psychxr/libovr/_libovr.pyx":1424
 *         # if the ray is finite, does it ever touch the edge of the sphere?
 *         cdef float targetDist
 *         if maxRange != 0.0:             # <<<<<<<<<<<<<<
 *             targetDist = targetPos.Distance(originPos.Translation) - radius
 *             if targetDist > maxRange:
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1430
 * 
 *         # put the target in the ray caster's local coordinate system
 *         cdef libovr_math.Vector3f offset = -originPos.InverseTransform(targetPos)             # <<<<<<<<<<<<<<
 * 
 *         # find the discriminant, this is based on the method described here:
 */
  __pyx_v_offset = (-__pyx_v_originPos.InverseTransform(__pyx_v_targetPos));

  /* "psychxr/libovr/_libovr.pyx":1434
 *         # find the discriminant, this is based on the method described here:
 *         # http://antongerdelan.net/opengl/raycasting.html
 *         cdef float desc = <float>pow(_rayDir.Dot(offset), 2.0) - \             # <<<<<<<<<<<<<<
 *                (offset.Dot(offset) - <float>pow(radius, 2.0))
 * 
 */
  __pyx_v_desc = (((float)pow(__pyx_v__rayDir.Dot(__pyx_v_offset), 2.0)) - (__pyx_v_offset.Dot(__pyx_v_offset) - ((float)pow(__pyx_v_radius, 2.0))));

  /* "psychxr/libovr/_libovr.pyx":1438
 * 
 *         # one or more roots? if so we are touching the sphere
 *         return desc >= 0.0             # <<<<<<<<<<<<<<
 * 
 *     def interp(self, LibOVRPose toPose, float s, bint fast=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_desc >= 0.0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1376
 *             (<libovr_math.Posef>self.c_data[0]).Translation.Distance(pos_in)
 * 
 *     def raycastSphere(self, object targetPose, float radius=0.5, object rayDir=(0., 0., -1.), float maxRange=0.0):             # <<<<<<<<<<<<<<
 *         """Raycast to a sphere.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.raycastSphere", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1440
 *         return desc >= 0.0
 * 
 *     def interp(self, LibOVRPose toPose, float s, bint fast=False):             # <<<<<<<<<<<<<<
 *         """Interpolate between poses.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_51interp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_50interp[] = "LibOVRPose.interp(self, LibOVRPose toPose, float s, bool fast=False)\nInterpolate between poses.\n\n        Linear interpolation is used on position (Lerp) while the orientation\n        has spherical linear interpolation (Slerp) applied.\n\n        Parameters\n        ----------\n        toPose : LibOVRPose\n            End pose.\n        s : float\n            Interpolation factor between in interval 0.0 and 1.0.\n        fast : bool, optional\n            If True, use fast interpolation which is quicker but less accurate\n            over larger distances.\n\n        Returns\n        -------\n        LibOVRPose\n            Interpolated pose at `s`.\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_51interp(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_toPose = 0;
  float __pyx_v_s;
  int __pyx_v_fast;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("interp (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_toPose,&__pyx_n_s_s,&__pyx_n_s_fast,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_toPose)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("interp", 0, 2, 3, 1); __PYX_ERR(0, 1440, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fast);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "interp") < 0)) __PYX_ERR(0, 1440, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_toPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)values[0]);
    __pyx_v_s = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_s == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_fast = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_fast == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1440, __pyx_L3_error)
    } else {
      __pyx_v_fast = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("interp", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 1440, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.interp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_toPose), __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose, 1, "toPose", 0))) __PYX_ERR(0, 1440, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_50interp(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), __pyx_v_toPose, __pyx_v_s, __pyx_v_fast);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_50interp(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_toPose, float __pyx_v_s, int __pyx_v_fast) {
  OVR::Posef __pyx_v__toPose;
  OVR::Posef __pyx_v_interp;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_to_return = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("interp", 0);

  /* "psychxr/libovr/_libovr.pyx":1462
 * 
 *         """
 *         cdef libovr_math.Posef _toPose = <libovr_math.Posef>toPose.c_data[0]             # <<<<<<<<<<<<<<
 *         cdef libovr_math.Posef interp
 * 
 */
  __pyx_v__toPose = ((OVR::Posef)(__pyx_v_toPose->c_data[0]));

  /* "psychxr/libovr/_libovr.pyx":1465
 *         cdef libovr_math.Posef interp
 * 
 *         if not fast:             # <<<<<<<<<<<<<<
 *             interp = (<libovr_math.Posef>self.c_data[0]).Lerp(_toPose, s)
 *         else:
 */
  __pyx_t_1 = ((!(__pyx_v_fast != 0)) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":1466
 * 
 *         if not fast:
 *             interp = (<libovr_math.Posef>self.c_data[0]).Lerp(_toPose, s)             # <<<<<<<<<<<<<<
 *         else:
 *             interp = (<libovr_math.Posef>self.c_data[0]).FastLerp(_toPose, s)
 */
    __pyx_v_interp = ((OVR::Posef)(__pyx_v_self->c_data[0])).Lerp(__pyx_v__toPose, __pyx_v_s);

    /* "psychxr/libovr/_libovr.pyx":1465
 *         cdef libovr_math.Posef interp
 * 
 *         if not fast:             # <<<<<<<<<<<<<<
 *             interp = (<libovr_math.Posef>self.c_data[0]).Lerp(_toPose, s)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":1468
 *             interp = (<libovr_math.Posef>self.c_data[0]).Lerp(_toPose, s)
 *         else:
 *             interp = (<libovr_math.Posef>self.c_data[0]).FastLerp(_toPose, s)             # <<<<<<<<<<<<<<
 * 
 *         cdef LibOVRPose to_return = \
 */
  /*else*/ {
    __pyx_v_interp = ((OVR::Posef)(__pyx_v_self->c_data[0])).FastLerp(__pyx_v__toPose, __pyx_v_s);
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":1472
 *         cdef LibOVRPose to_return = \
 *             LibOVRPose(
 *                 (interp.Translation.x,             # <<<<<<<<<<<<<<
 *                  interp.Translation.y,
 *                  interp.Translation.z),
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_interp.Translation.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":1473
 *             LibOVRPose(
 *                 (interp.Translation.x,
 *                  interp.Translation.y,             # <<<<<<<<<<<<<<
 *                  interp.Translation.z),
 *                 (interp.Rotation.x,
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_interp.Translation.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":1474
 *                 (interp.Translation.x,
 *                  interp.Translation.y,
 *                  interp.Translation.z),             # <<<<<<<<<<<<<<
 *                 (interp.Rotation.x,
 *                  interp.Rotation.y,
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_interp.Translation.z); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "psychxr/libovr/_libovr.pyx":1472
 *         cdef LibOVRPose to_return = \
 *             LibOVRPose(
 *                 (interp.Translation.x,             # <<<<<<<<<<<<<<
 *                  interp.Translation.y,
 *                  interp.Translation.z),
 */
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;

  /* "psychxr/libovr/_libovr.pyx":1475
 *                  interp.Translation.y,
 *                  interp.Translation.z),
 *                 (interp.Rotation.x,             # <<<<<<<<<<<<<<
 *                  interp.Rotation.y,
 *                  interp.Rotation.z,
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_interp.Rotation.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "psychxr/libovr/_libovr.pyx":1476
 *                  interp.Translation.z),
 *                 (interp.Rotation.x,
 *                  interp.Rotation.y,             # <<<<<<<<<<<<<<
 *                  interp.Rotation.z,
 *                  interp.Rotation.w))
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_interp.Rotation.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":1477
 *                 (interp.Rotation.x,
 *                  interp.Rotation.y,
 *                  interp.Rotation.z,             # <<<<<<<<<<<<<<
 *                  interp.Rotation.w))
 * 
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_interp.Rotation.z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":1478
 *                  interp.Rotation.y,
 *                  interp.Rotation.z,
 *                  interp.Rotation.w))             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_interp.Rotation.w); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "psychxr/libovr/_libovr.pyx":1475
 *                  interp.Translation.y,
 *                  interp.Translation.z),
 *                 (interp.Rotation.x,             # <<<<<<<<<<<<<<
 *                  interp.Rotation.y,
 *                  interp.Rotation.z,
 */
  __pyx_t_7 = PyTuple_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_6 = 0;

  /* "psychxr/libovr/_libovr.pyx":1471
 * 
 *         cdef LibOVRPose to_return = \
 *             LibOVRPose(             # <<<<<<<<<<<<<<
 *                 (interp.Translation.x,
 *                  interp.Translation.y,
 */
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_7);
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_to_return = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "psychxr/libovr/_libovr.pyx":1480
 *                  interp.Rotation.w))
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1440
 *         return desc >= 0.0
 * 
 *     def interp(self, LibOVRPose toPose, float s, bint fast=False):             # <<<<<<<<<<<<<<
 *         """Interpolate between poses.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.interp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_53__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_52__reduce_cython__[] = "LibOVRPose.__reduce_cython__(self)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_53__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_52__reduce_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_52__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_55__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_54__setstate_cython__[] = "LibOVRPose.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_55__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_54__setstate_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10LibOVRPose_54__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPose.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1498
 *     cdef np.ndarray _angularAcceleration
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Attributes
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRPoseState___init__[] = "\n        Attributes\n        ----------\n        pose : :obj:`LibOVRPose`\n            Rigid body pose.\n        angularVelocity : ndarray\n            Angular velocity vector in radians/sec.\"\n        linearVelocity : `ndarray`\n            Linear velocity vector in meters/sec.\n        angularAcceleration : `ndarray`\n            Angular acceleration vector in radians/s^2.\n        linearAcceleration : `ndarray`\n            Linear acceleration vector in meters/s^2.\n        timeInSeconds : `float`\n            Absolute time this data refers to in seconds.\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7psychxr_6libovr_7_libovr_15LibOVRPoseState___init__;
#endif
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState___init__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState___init__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "psychxr/libovr/_libovr.pyx":1516
 * 
 *         """
 *         self.newStruct()             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  ((struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self->__pyx_vtab)->newStruct(__pyx_v_self);

  /* "psychxr/libovr/_libovr.pyx":1498
 *     cdef np.ndarray _angularAcceleration
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Attributes
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1518
 *         self.newStruct()
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr_owner = False
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_2__cinit__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "psychxr/libovr/_libovr.pyx":1519
 * 
 *     def __cinit__(self):
 *         self.ptr_owner = False             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->ptr_owner = 0;

  /* "psychxr/libovr/_libovr.pyx":1518
 *         self.newStruct()
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr_owner = False
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1522
 * 
 *     @staticmethod
 *     cdef LibOVRPoseState fromPtr(libovr_capi.ovrPoseStatef* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRPoseState wrapper = LibOVRPoseState.__new__(LibOVRPoseState)
 */

static struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_f_7psychxr_6libovr_7_libovr_15LibOVRPoseState_fromPtr(ovrPoseStatef *__pyx_v_ptr, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_15LibOVRPoseState_fromPtr *__pyx_optional_args) {
  int __pyx_v_owner = ((int)0);
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_wrapper = 0;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fromPtr", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_owner = __pyx_optional_args->owner;
    }
  }

  /* "psychxr/libovr/_libovr.pyx":1524
 *     cdef LibOVRPoseState fromPtr(libovr_capi.ovrPoseStatef* ptr, bint owner=False):
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRPoseState wrapper = LibOVRPoseState.__new__(LibOVRPoseState)             # <<<<<<<<<<<<<<
 *         wrapper.c_data = ptr
 *         wrapper.ptr_owner = owner
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRPoseState(((PyTypeObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPoseState), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1524, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1525
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRPoseState wrapper = LibOVRPoseState.__new__(LibOVRPoseState)
 *         wrapper.c_data = ptr             # <<<<<<<<<<<<<<
 *         wrapper.ptr_owner = owner
 * 
 */
  __pyx_v_wrapper->c_data = __pyx_v_ptr;

  /* "psychxr/libovr/_libovr.pyx":1526
 *         cdef LibOVRPoseState wrapper = LibOVRPoseState.__new__(LibOVRPoseState)
 *         wrapper.c_data = ptr
 *         wrapper.ptr_owner = owner             # <<<<<<<<<<<<<<
 * 
 *         wrapper._linearVelocity = _wrap_ovrVector3f_as_ndarray(
 */
  __pyx_v_wrapper->ptr_owner = __pyx_v_owner;

  /* "psychxr/libovr/_libovr.pyx":1528
 *         wrapper.ptr_owner = owner
 * 
 *         wrapper._linearVelocity = _wrap_ovrVector3f_as_ndarray(             # <<<<<<<<<<<<<<
 *                 &wrapper.c_data.LinearVelocity)
 *         wrapper._linearAcceleration = _wrap_ovrVector3f_as_ndarray(
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray((&__pyx_v_wrapper->c_data->LinearVelocity))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_wrapper->_linearVelocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_wrapper->_linearVelocity));
  __pyx_v_wrapper->_linearVelocity = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1530
 *         wrapper._linearVelocity = _wrap_ovrVector3f_as_ndarray(
 *                 &wrapper.c_data.LinearVelocity)
 *         wrapper._linearAcceleration = _wrap_ovrVector3f_as_ndarray(             # <<<<<<<<<<<<<<
 *                 &wrapper.c_data.LinearAcceleration)
 *         wrapper._angularVelocity = _wrap_ovrVector3f_as_ndarray(
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray((&__pyx_v_wrapper->c_data->LinearAcceleration))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_wrapper->_linearAcceleration);
  __Pyx_DECREF(((PyObject *)__pyx_v_wrapper->_linearAcceleration));
  __pyx_v_wrapper->_linearAcceleration = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1532
 *         wrapper._linearAcceleration = _wrap_ovrVector3f_as_ndarray(
 *                 &wrapper.c_data.LinearAcceleration)
 *         wrapper._angularVelocity = _wrap_ovrVector3f_as_ndarray(             # <<<<<<<<<<<<<<
 *                 &wrapper.c_data.AngularVelocity)
 *         wrapper._angularAcceleration = _wrap_ovrVector3f_as_ndarray(
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray((&__pyx_v_wrapper->c_data->AngularVelocity))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_wrapper->_angularVelocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_wrapper->_angularVelocity));
  __pyx_v_wrapper->_angularVelocity = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1534
 *         wrapper._angularVelocity = _wrap_ovrVector3f_as_ndarray(
 *                 &wrapper.c_data.AngularVelocity)
 *         wrapper._angularAcceleration = _wrap_ovrVector3f_as_ndarray(             # <<<<<<<<<<<<<<
 *                 &wrapper.c_data.AngularAcceleration)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray((&__pyx_v_wrapper->c_data->AngularAcceleration))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_wrapper->_angularAcceleration);
  __Pyx_DECREF(((PyObject *)__pyx_v_wrapper->_angularAcceleration));
  __pyx_v_wrapper->_angularAcceleration = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1537
 *                 &wrapper.c_data.AngularAcceleration)
 * 
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     cdef void newStruct(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1522
 * 
 *     @staticmethod
 *     cdef LibOVRPoseState fromPtr(libovr_capi.ovrPoseStatef* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRPoseState wrapper = LibOVRPoseState.__new__(LibOVRPoseState)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.fromPtr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1539
 *         return wrapper
 * 
 *     cdef void newStruct(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return
 */

static void __pyx_f_7psychxr_6libovr_7_libovr_15LibOVRPoseState_newStruct(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self) {
  ovrPoseStatef *__pyx_v__ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  ovrVector3f __pyx_t_2;
  ovrQuatf __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("newStruct", 0);

  /* "psychxr/libovr/_libovr.pyx":1540
 * 
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->c_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":1541
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef libovr_capi.ovrPoseStatef* _ptr = \
 */
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":1540
 * 
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1544
 * 
 *         cdef libovr_capi.ovrPoseStatef* _ptr = \
 *             <libovr_capi.ovrPoseStatef*>malloc(             # <<<<<<<<<<<<<<
 *                 sizeof(libovr_capi.ovrPoseStatef))
 * 
 */
  __pyx_v__ptr = ((ovrPoseStatef *)malloc((sizeof(ovrPoseStatef))));

  /* "psychxr/libovr/_libovr.pyx":1547
 *                 sizeof(libovr_capi.ovrPoseStatef))
 * 
 *         if _ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  __pyx_t_1 = ((__pyx_v__ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "psychxr/libovr/_libovr.pyx":1548
 * 
 *         if _ptr is NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         # clear memory to defaults
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1548, __pyx_L1_error)

    /* "psychxr/libovr/_libovr.pyx":1547
 *                 sizeof(libovr_capi.ovrPoseStatef))
 * 
 *         if _ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1551
 * 
 *         # clear memory to defaults
 *         _ptr.ThePose.Position = [0., 0., 0.]             # <<<<<<<<<<<<<<
 *         _ptr.ThePose.Orientation = [0., 0., 0., 1.]
 *         _ptr.AngularVelocity = [0., 0., 0.]
 */
  __pyx_t_2.x = 0.;
  __pyx_t_2.y = 0.;
  __pyx_t_2.z = 0.;
  __pyx_v__ptr->ThePose.Position = __pyx_t_2;

  /* "psychxr/libovr/_libovr.pyx":1552
 *         # clear memory to defaults
 *         _ptr.ThePose.Position = [0., 0., 0.]
 *         _ptr.ThePose.Orientation = [0., 0., 0., 1.]             # <<<<<<<<<<<<<<
 *         _ptr.AngularVelocity = [0., 0., 0.]
 *         _ptr.LinearVelocity = [0., 0., 0.]
 */
  __pyx_t_3.x = 0.;
  __pyx_t_3.y = 0.;
  __pyx_t_3.z = 0.;
  __pyx_t_3.w = 1.;
  __pyx_v__ptr->ThePose.Orientation = __pyx_t_3;

  /* "psychxr/libovr/_libovr.pyx":1553
 *         _ptr.ThePose.Position = [0., 0., 0.]
 *         _ptr.ThePose.Orientation = [0., 0., 0., 1.]
 *         _ptr.AngularVelocity = [0., 0., 0.]             # <<<<<<<<<<<<<<
 *         _ptr.LinearVelocity = [0., 0., 0.]
 *         _ptr.AngularAcceleration = [0., 0., 0.]
 */
  __pyx_t_2.x = 0.;
  __pyx_t_2.y = 0.;
  __pyx_t_2.z = 0.;
  __pyx_v__ptr->AngularVelocity = __pyx_t_2;

  /* "psychxr/libovr/_libovr.pyx":1554
 *         _ptr.ThePose.Orientation = [0., 0., 0., 1.]
 *         _ptr.AngularVelocity = [0., 0., 0.]
 *         _ptr.LinearVelocity = [0., 0., 0.]             # <<<<<<<<<<<<<<
 *         _ptr.AngularAcceleration = [0., 0., 0.]
 *         _ptr.LinearAcceleration = [0., 0., 0.]
 */
  __pyx_t_2.x = 0.;
  __pyx_t_2.y = 0.;
  __pyx_t_2.z = 0.;
  __pyx_v__ptr->LinearVelocity = __pyx_t_2;

  /* "psychxr/libovr/_libovr.pyx":1555
 *         _ptr.AngularVelocity = [0., 0., 0.]
 *         _ptr.LinearVelocity = [0., 0., 0.]
 *         _ptr.AngularAcceleration = [0., 0., 0.]             # <<<<<<<<<<<<<<
 *         _ptr.LinearAcceleration = [0., 0., 0.]
 *         _ptr.TimeInSeconds = 0.0
 */
  __pyx_t_2.x = 0.;
  __pyx_t_2.y = 0.;
  __pyx_t_2.z = 0.;
  __pyx_v__ptr->AngularAcceleration = __pyx_t_2;

  /* "psychxr/libovr/_libovr.pyx":1556
 *         _ptr.LinearVelocity = [0., 0., 0.]
 *         _ptr.AngularAcceleration = [0., 0., 0.]
 *         _ptr.LinearAcceleration = [0., 0., 0.]             # <<<<<<<<<<<<<<
 *         _ptr.TimeInSeconds = 0.0
 * 
 */
  __pyx_t_2.x = 0.;
  __pyx_t_2.y = 0.;
  __pyx_t_2.z = 0.;
  __pyx_v__ptr->LinearAcceleration = __pyx_t_2;

  /* "psychxr/libovr/_libovr.pyx":1557
 *         _ptr.AngularAcceleration = [0., 0., 0.]
 *         _ptr.LinearAcceleration = [0., 0., 0.]
 *         _ptr.TimeInSeconds = 0.0             # <<<<<<<<<<<<<<
 * 
 *         self.c_data = _ptr
 */
  __pyx_v__ptr->TimeInSeconds = 0.0;

  /* "psychxr/libovr/_libovr.pyx":1559
 *         _ptr.TimeInSeconds = 0.0
 * 
 *         self.c_data = _ptr             # <<<<<<<<<<<<<<
 *         self.ptr_owner = True
 * 
 */
  __pyx_v_self->c_data = __pyx_v__ptr;

  /* "psychxr/libovr/_libovr.pyx":1560
 * 
 *         self.c_data = _ptr
 *         self.ptr_owner = True             # <<<<<<<<<<<<<<
 * 
 *         # setup property wrappers
 */
  __pyx_v_self->ptr_owner = 1;

  /* "psychxr/libovr/_libovr.pyx":1563
 * 
 *         # setup property wrappers
 *         self._linearVelocity = _wrap_ovrVector3f_as_ndarray(             # <<<<<<<<<<<<<<
 *             &self.c_data.LinearVelocity)
 *         self._linearAcceleration = _wrap_ovrVector3f_as_ndarray(
 */
  __pyx_t_4 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray((&__pyx_v_self->c_data->LinearVelocity))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->_linearVelocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_linearVelocity));
  __pyx_v_self->_linearVelocity = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "psychxr/libovr/_libovr.pyx":1565
 *         self._linearVelocity = _wrap_ovrVector3f_as_ndarray(
 *             &self.c_data.LinearVelocity)
 *         self._linearAcceleration = _wrap_ovrVector3f_as_ndarray(             # <<<<<<<<<<<<<<
 *             &self.c_data.LinearAcceleration)
 *         self._angularVelocity = _wrap_ovrVector3f_as_ndarray(
 */
  __pyx_t_4 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray((&__pyx_v_self->c_data->LinearAcceleration))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->_linearAcceleration);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_linearAcceleration));
  __pyx_v_self->_linearAcceleration = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "psychxr/libovr/_libovr.pyx":1567
 *         self._linearAcceleration = _wrap_ovrVector3f_as_ndarray(
 *             &self.c_data.LinearAcceleration)
 *         self._angularVelocity = _wrap_ovrVector3f_as_ndarray(             # <<<<<<<<<<<<<<
 *             &self.c_data.AngularVelocity)
 *         self._angularAcceleration = _wrap_ovrVector3f_as_ndarray(
 */
  __pyx_t_4 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray((&__pyx_v_self->c_data->AngularVelocity))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->_angularVelocity);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_angularVelocity));
  __pyx_v_self->_angularVelocity = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "psychxr/libovr/_libovr.pyx":1569
 *         self._angularVelocity = _wrap_ovrVector3f_as_ndarray(
 *             &self.c_data.AngularVelocity)
 *         self._angularAcceleration = _wrap_ovrVector3f_as_ndarray(             # <<<<<<<<<<<<<<
 *             &self.c_data.AngularAcceleration)
 * 
 */
  __pyx_t_4 = ((PyObject *)__pyx_f_7psychxr_6libovr_7_libovr__wrap_ovrVector3f_as_ndarray((&__pyx_v_self->c_data->AngularAcceleration))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->_angularAcceleration);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_angularAcceleration));
  __pyx_v_self->_angularAcceleration = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "psychxr/libovr/_libovr.pyx":1539
 *         return wrapper
 * 
 *     cdef void newStruct(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("psychxr.libovr._libovr.LibOVRPoseState.newStruct", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "psychxr/libovr/_libovr.pyx":1572
 *             &self.c_data.AngularAcceleration)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 */

/* Python wrapper */
static void __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4__dealloc__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4__dealloc__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "psychxr/libovr/_libovr.pyx":1573
 * 
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:             # <<<<<<<<<<<<<<
 *             free(self.c_data)
 *             self.c_data = NULL
 */
  __pyx_t_2 = ((__pyx_v_self->c_data != NULL) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->ptr_owner == 1) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":1574
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)             # <<<<<<<<<<<<<<
 *             self.c_data = NULL
 * 
 */
    free(__pyx_v_self->c_data);

    /* "psychxr/libovr/_libovr.pyx":1575
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 *             self.c_data = NULL             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_v_self->c_data = NULL;

    /* "psychxr/libovr/_libovr.pyx":1573
 * 
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:             # <<<<<<<<<<<<<<
 *             free(self.c_data)
 *             self.c_data = NULL
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1572
 *             &self.c_data.AngularAcceleration)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "psychxr/libovr/_libovr.pyx":1578
 * 
 *     @property
 *     def pose(self):             # <<<<<<<<<<<<<<
 *         if self._pose is None:
 *             self._pose = LibOVRPose.fromPtr(&self.c_data.ThePose)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1579
 *     @property
 *     def pose(self):
 *         if self._pose is None:             # <<<<<<<<<<<<<<
 *             self._pose = LibOVRPose.fromPtr(&self.c_data.ThePose)
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->_pose) == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":1580
 *     def pose(self):
 *         if self._pose is None:
 *             self._pose = LibOVRPose.fromPtr(&self.c_data.ThePose)             # <<<<<<<<<<<<<<
 * 
 *         return self._pose
 */
    __pyx_t_3 = ((PyObject *)__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPose->fromPtr((&__pyx_v_self->c_data->ThePose), NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_pose);
    __Pyx_DECREF(((PyObject *)__pyx_v_self->_pose));
    __pyx_v_self->_pose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "psychxr/libovr/_libovr.pyx":1579
 *     @property
 *     def pose(self):
 *         if self._pose is None:             # <<<<<<<<<<<<<<
 *             self._pose = LibOVRPose.fromPtr(&self.c_data.ThePose)
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1582
 *             self._pose = LibOVRPose.fromPtr(&self.c_data.ThePose)
 * 
 *         return self._pose             # <<<<<<<<<<<<<<
 * 
 *     @pose.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_pose));
  __pyx_r = ((PyObject *)__pyx_v_self->_pose);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1578
 * 
 *     @property
 *     def pose(self):             # <<<<<<<<<<<<<<
 *         if self._pose is None:
 *             self._pose = LibOVRPose.fromPtr(&self.c_data.ThePose)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.pose.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1585
 * 
 *     @pose.setter
 *     def pose(self, LibOVRPose value):             # <<<<<<<<<<<<<<
 *         self.c_data.ThePose = value.c_data[0]  # copy into
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose, 1, "value", 0))) __PYX_ERR(0, 1585, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose_2__set__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self), ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "psychxr/libovr/_libovr.pyx":1586
 *     @pose.setter
 *     def pose(self, LibOVRPose value):
 *         self.c_data.ThePose = value.c_data[0]  # copy into             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->c_data->ThePose = (__pyx_v_value->c_data[0]);

  /* "psychxr/libovr/_libovr.pyx":1585
 * 
 *     @pose.setter
 *     def pose(self, LibOVRPose value):             # <<<<<<<<<<<<<<
 *         self.c_data.ThePose = value.c_data[0]  # copy into
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1589
 * 
 *     @property
 *     def angularVelocity(self):             # <<<<<<<<<<<<<<
 *         return self._angularVelocity
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1590
 *     @property
 *     def angularVelocity(self):
 *         return self._angularVelocity             # <<<<<<<<<<<<<<
 * 
 *     @angularVelocity.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_angularVelocity));
  __pyx_r = ((PyObject *)__pyx_v_self->_angularVelocity);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1589
 * 
 *     @property
 *     def angularVelocity(self):             # <<<<<<<<<<<<<<
 *         return self._angularVelocity
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1593
 * 
 *     @angularVelocity.setter
 *     def angularVelocity(self, object value):             # <<<<<<<<<<<<<<
 *         self._angularVelocity[:] = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity_2__set__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "psychxr/libovr/_libovr.pyx":1594
 *     @angularVelocity.setter
 *     def angularVelocity(self, object value):
 *         self._angularVelocity[:] = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->_angularVelocity), __pyx_v_value, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 1594, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":1593
 * 
 *     @angularVelocity.setter
 *     def angularVelocity(self, object value):             # <<<<<<<<<<<<<<
 *         self._angularVelocity[:] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.angularVelocity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1597
 * 
 *     @property
 *     def linearVelocity(self):             # <<<<<<<<<<<<<<
 *         return self._linearVelocity
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1598
 *     @property
 *     def linearVelocity(self):
 *         return self._linearVelocity             # <<<<<<<<<<<<<<
 * 
 *     @linearVelocity.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_linearVelocity));
  __pyx_r = ((PyObject *)__pyx_v_self->_linearVelocity);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1597
 * 
 *     @property
 *     def linearVelocity(self):             # <<<<<<<<<<<<<<
 *         return self._linearVelocity
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1601
 * 
 *     @linearVelocity.setter
 *     def linearVelocity(self, object value):             # <<<<<<<<<<<<<<
 *         self._linearVelocity[:] = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity_2__set__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "psychxr/libovr/_libovr.pyx":1602
 *     @linearVelocity.setter
 *     def linearVelocity(self, object value):
 *         self._linearVelocity[:] = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->_linearVelocity), __pyx_v_value, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 1602, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":1601
 * 
 *     @linearVelocity.setter
 *     def linearVelocity(self, object value):             # <<<<<<<<<<<<<<
 *         self._linearVelocity[:] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.linearVelocity.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1605
 * 
 *     @property
 *     def angularAcceleration(self):             # <<<<<<<<<<<<<<
 *         return self._angularAcceleration
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1606
 *     @property
 *     def angularAcceleration(self):
 *         return self._angularAcceleration             # <<<<<<<<<<<<<<
 * 
 *     @angularAcceleration.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_angularAcceleration));
  __pyx_r = ((PyObject *)__pyx_v_self->_angularAcceleration);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1605
 * 
 *     @property
 *     def angularAcceleration(self):             # <<<<<<<<<<<<<<
 *         return self._angularAcceleration
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1609
 * 
 *     @angularAcceleration.setter
 *     def angularAcceleration(self, object value):             # <<<<<<<<<<<<<<
 *         self._angularAcceleration[:] = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration_2__set__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "psychxr/libovr/_libovr.pyx":1610
 *     @angularAcceleration.setter
 *     def angularAcceleration(self, object value):
 *         self._angularAcceleration[:] = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->_angularAcceleration), __pyx_v_value, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 1610, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":1609
 * 
 *     @angularAcceleration.setter
 *     def angularAcceleration(self, object value):             # <<<<<<<<<<<<<<
 *         self._angularAcceleration[:] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.angularAcceleration.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1613
 * 
 *     @property
 *     def linearAcceleration(self):             # <<<<<<<<<<<<<<
 *         return self._linearAcceleration
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1614
 *     @property
 *     def linearAcceleration(self):
 *         return self._linearAcceleration             # <<<<<<<<<<<<<<
 * 
 *     @linearAcceleration.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_linearAcceleration));
  __pyx_r = ((PyObject *)__pyx_v_self->_linearAcceleration);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1613
 * 
 *     @property
 *     def linearAcceleration(self):             # <<<<<<<<<<<<<<
 *         return self._linearAcceleration
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1617
 * 
 *     @linearAcceleration.setter
 *     def linearAcceleration(self, object value):             # <<<<<<<<<<<<<<
 *         self._linearAcceleration[:] = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration_2__set__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "psychxr/libovr/_libovr.pyx":1618
 *     @linearAcceleration.setter
 *     def linearAcceleration(self, object value):
 *         self._linearAcceleration[:] = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  if (__Pyx_PyObject_SetSlice(((PyObject *)__pyx_v_self->_linearAcceleration), __pyx_v_value, 0, 0, NULL, NULL, &__pyx_slice__4, 0, 0, 1) < 0) __PYX_ERR(0, 1618, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":1617
 * 
 *     @linearAcceleration.setter
 *     def linearAcceleration(self, object value):             # <<<<<<<<<<<<<<
 *         self._linearAcceleration[:] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.linearAcceleration.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1621
 * 
 *     @property
 *     def timeInSeconds(self):             # <<<<<<<<<<<<<<
 *         return <double>self.c_data[0].TimeInSeconds
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1622
 *     @property
 *     def timeInSeconds(self):
 *         return <double>self.c_data[0].TimeInSeconds             # <<<<<<<<<<<<<<
 * 
 *     @timeInSeconds.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((double)(__pyx_v_self->c_data[0]).TimeInSeconds)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1621
 * 
 *     @property
 *     def timeInSeconds(self):             # <<<<<<<<<<<<<<
 *         return <double>self.c_data[0].TimeInSeconds
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.timeInSeconds.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1625
 * 
 *     @timeInSeconds.setter
 *     def timeInSeconds(self, double value):             # <<<<<<<<<<<<<<
 *         self.c_data[0].TimeInSeconds = value
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1625, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.timeInSeconds.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds_2__set__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds_2__set__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "psychxr/libovr/_libovr.pyx":1626
 *     @timeInSeconds.setter
 *     def timeInSeconds(self, double value):
 *         self.c_data[0].TimeInSeconds = value             # <<<<<<<<<<<<<<
 * 
 *     def timeIntegrate(self, float dt):
 */
  (__pyx_v_self->c_data[0]).TimeInSeconds = __pyx_v_value;

  /* "psychxr/libovr/_libovr.pyx":1625
 * 
 *     @timeInSeconds.setter
 *     def timeInSeconds(self, double value):             # <<<<<<<<<<<<<<
 *         self.c_data[0].TimeInSeconds = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1628
 *         self.c_data[0].TimeInSeconds = value
 * 
 *     def timeIntegrate(self, float dt):             # <<<<<<<<<<<<<<
 *         """Time integrate rigid body motion derivatives referenced by the
 *         current pose.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_7timeIntegrate(PyObject *__pyx_v_self, PyObject *__pyx_arg_dt); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRPoseState_6timeIntegrate[] = "LibOVRPoseState.timeIntegrate(self, float dt)\nTime integrate rigid body motion derivatives referenced by the\n        current pose.\n\n        Parameters\n        ----------\n        dt : float\n            Time delta in seconds.\n\n        Returns\n        -------\n        LibOVRPose\n\n        ";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_7timeIntegrate(PyObject *__pyx_v_self, PyObject *__pyx_arg_dt) {
  float __pyx_v_dt;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeIntegrate (wrapper)", 0);
  assert(__pyx_arg_dt); {
    __pyx_v_dt = __pyx_PyFloat_AsFloat(__pyx_arg_dt); if (unlikely((__pyx_v_dt == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1628, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.timeIntegrate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_6timeIntegrate(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self), ((float)__pyx_v_dt));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_6timeIntegrate(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, float __pyx_v_dt) {
  OVR::Posef __pyx_v_res;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_toReturn = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("timeIntegrate", 0);

  /* "psychxr/libovr/_libovr.pyx":1643
 *         """
 *         cdef libovr_math.Posef res = \
 *             (<libovr_math.Posef>self.c_data[0].ThePose).TimeIntegrate(             # <<<<<<<<<<<<<<
 *                 <libovr_math.Vector3f>self.c_data[0].LinearVelocity,
 *                 <libovr_math.Vector3f>self.c_data[0].AngularVelocity,
 */
  __pyx_v_res = ((OVR::Posef)(__pyx_v_self->c_data[0]).ThePose).TimeIntegrate(((OVR::Vector3f)(__pyx_v_self->c_data[0]).LinearVelocity), ((OVR::Vector3f)(__pyx_v_self->c_data[0]).AngularVelocity), ((OVR::Vector3f)(__pyx_v_self->c_data[0]).LinearAcceleration), ((OVR::Vector3f)(__pyx_v_self->c_data[0]).AngularAcceleration), __pyx_v_dt);

  /* "psychxr/libovr/_libovr.pyx":1650
 *                 dt)
 *         cdef LibOVRPose toReturn = LibOVRPose(
 *             (res.Translation.x, res.Translation.y, res.Translation.z),             # <<<<<<<<<<<<<<
 *             (res.Rotation.x, res.Rotation.y, res.Rotation.z, res.Rotation.w))
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_res.Translation.x); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_res.Translation.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_res.Translation.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":1651
 *         cdef LibOVRPose toReturn = LibOVRPose(
 *             (res.Translation.x, res.Translation.y, res.Translation.z),
 *             (res.Rotation.x, res.Rotation.y, res.Rotation.z, res.Rotation.w))             # <<<<<<<<<<<<<<
 * 
 *         return toReturn
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_res.Rotation.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_res.Rotation.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_res.Rotation.z); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_res.Rotation.w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;

  /* "psychxr/libovr/_libovr.pyx":1649
 *                 <libovr_math.Vector3f>self.c_data[0].AngularAcceleration,
 *                 dt)
 *         cdef LibOVRPose toReturn = LibOVRPose(             # <<<<<<<<<<<<<<
 *             (res.Translation.x, res.Translation.y, res.Translation.z),
 *             (res.Rotation.x, res.Rotation.y, res.Rotation.z, res.Rotation.w))
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose), __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_toReturn = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "psychxr/libovr/_libovr.pyx":1653
 *             (res.Rotation.x, res.Rotation.y, res.Rotation.z, res.Rotation.w))
 * 
 *         return toReturn             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_toReturn));
  __pyx_r = ((PyObject *)__pyx_v_toReturn);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1628
 *         self.c_data[0].TimeInSeconds = value
 * 
 *     def timeIntegrate(self, float dt):             # <<<<<<<<<<<<<<
 *         """Time integrate rigid body motion derivatives referenced by the
 *         current pose.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.timeIntegrate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_toReturn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRPoseState_8__reduce_cython__[] = "LibOVRPoseState.__reduce_cython__(self)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_9__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_8__reduce_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_8__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRPoseState_10__setstate_cython__[] = "LibOVRPoseState.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_11__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_10__setstate_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRPoseState_10__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRPoseState.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1666
 *     cdef LibOVRPose _calibratedOrigin
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """This object is returned by 'getTrackingState'.
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRTrackingState___init__[] = "This object is returned by 'getTrackingState'.\n\n        Attributes\n        ----------\n        headPose : LibOVRPoseState\n            Tracked head (HMD) pose.\n        headStatus : tuple of bool\n            Tracking status for the head.\n        handPoses : tuple of LibOVRPoseState\n            Tracked hand (Touch controller) poses.\n        handStatus : tuple\n            Tracking status for the hands.\n        calibratedOrigin : LibOVRPose\n            Calibrated origin.\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7psychxr_6libovr_7_libovr_19LibOVRTrackingState___init__;
#endif
static int __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState___init__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState___init__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "psychxr/libovr/_libovr.pyx":1683
 * 
 *         """
 *         self.newStruct()             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  ((struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_v_self->__pyx_vtab)->newStruct(__pyx_v_self);

  /* "psychxr/libovr/_libovr.pyx":1666
 *     cdef LibOVRPose _calibratedOrigin
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """This object is returned by 'getTrackingState'.
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1685
 *         self.newStruct()
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr_owner = False
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_2__cinit__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "psychxr/libovr/_libovr.pyx":1686
 * 
 *     def __cinit__(self):
 *         self.ptr_owner = False             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->ptr_owner = 0;

  /* "psychxr/libovr/_libovr.pyx":1685
 *         self.newStruct()
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr_owner = False
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1689
 * 
 *     @staticmethod
 *     cdef LibOVRTrackingState fromPtr(libovr_capi.ovrTrackingState* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRTrackingState wrapper = LibOVRTrackingState.__new__(LibOVRTrackingState)
 */

static struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_f_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_fromPtr(ovrTrackingState *__pyx_v_ptr, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_fromPtr *__pyx_optional_args) {
  int __pyx_v_owner = ((int)0);
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_wrapper = 0;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fromPtr", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_owner = __pyx_optional_args->owner;
    }
  }

  /* "psychxr/libovr/_libovr.pyx":1691
 *     cdef LibOVRTrackingState fromPtr(libovr_capi.ovrTrackingState* ptr, bint owner=False):
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRTrackingState wrapper = LibOVRTrackingState.__new__(LibOVRTrackingState)             # <<<<<<<<<<<<<<
 *         wrapper.c_data = ptr
 *         wrapper.ptr_owner = owner
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRTrackingState(((PyTypeObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRTrackingState), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1691, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1692
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRTrackingState wrapper = LibOVRTrackingState.__new__(LibOVRTrackingState)
 *         wrapper.c_data = ptr             # <<<<<<<<<<<<<<
 *         wrapper.ptr_owner = owner
 * 
 */
  __pyx_v_wrapper->c_data = __pyx_v_ptr;

  /* "psychxr/libovr/_libovr.pyx":1693
 *         cdef LibOVRTrackingState wrapper = LibOVRTrackingState.__new__(LibOVRTrackingState)
 *         wrapper.c_data = ptr
 *         wrapper.ptr_owner = owner             # <<<<<<<<<<<<<<
 * 
 *         wrapper._headPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HeadPose)
 */
  __pyx_v_wrapper->ptr_owner = __pyx_v_owner;

  /* "psychxr/libovr/_libovr.pyx":1695
 *         wrapper.ptr_owner = owner
 * 
 *         wrapper._headPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HeadPose)             # <<<<<<<<<<<<<<
 *         wrapper._leftHandPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HandPoses[0])
 *         wrapper._rightHandPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HandPoses[1])
 */
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPoseState->fromPtr((&__pyx_v_wrapper->c_data->HeadPose), NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_wrapper->_headPose);
  __Pyx_DECREF(((PyObject *)__pyx_v_wrapper->_headPose));
  __pyx_v_wrapper->_headPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1696
 * 
 *         wrapper._headPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HeadPose)
 *         wrapper._leftHandPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HandPoses[0])             # <<<<<<<<<<<<<<
 *         wrapper._rightHandPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HandPoses[1])
 *         wrapper._calibratedOrigin = LibOVRPose.fromPtr(&wrapper.c_data.CalibratedOrigin)
 */
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPoseState->fromPtr((&(__pyx_v_wrapper->c_data->HandPoses[0])), NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_wrapper->_leftHandPose);
  __Pyx_DECREF(((PyObject *)__pyx_v_wrapper->_leftHandPose));
  __pyx_v_wrapper->_leftHandPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1697
 *         wrapper._headPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HeadPose)
 *         wrapper._leftHandPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HandPoses[0])
 *         wrapper._rightHandPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HandPoses[1])             # <<<<<<<<<<<<<<
 *         wrapper._calibratedOrigin = LibOVRPose.fromPtr(&wrapper.c_data.CalibratedOrigin)
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPoseState->fromPtr((&(__pyx_v_wrapper->c_data->HandPoses[1])), NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_wrapper->_rightHandPose);
  __Pyx_DECREF(((PyObject *)__pyx_v_wrapper->_rightHandPose));
  __pyx_v_wrapper->_rightHandPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1698
 *         wrapper._leftHandPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HandPoses[0])
 *         wrapper._rightHandPose = LibOVRPoseState.fromPtr(&wrapper.c_data.HandPoses[1])
 *         wrapper._calibratedOrigin = LibOVRPose.fromPtr(&wrapper.c_data.CalibratedOrigin)             # <<<<<<<<<<<<<<
 * 
 *         return wrapper
 */
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPose->fromPtr((&__pyx_v_wrapper->c_data->CalibratedOrigin), NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_wrapper->_calibratedOrigin);
  __Pyx_DECREF(((PyObject *)__pyx_v_wrapper->_calibratedOrigin));
  __pyx_v_wrapper->_calibratedOrigin = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1700
 *         wrapper._calibratedOrigin = LibOVRPose.fromPtr(&wrapper.c_data.CalibratedOrigin)
 * 
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     cdef void newStruct(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1689
 * 
 *     @staticmethod
 *     cdef LibOVRTrackingState fromPtr(libovr_capi.ovrTrackingState* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRTrackingState wrapper = LibOVRTrackingState.__new__(LibOVRTrackingState)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackingState.fromPtr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1702
 *         return wrapper
 * 
 *     cdef void newStruct(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return
 */

static void __pyx_f_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_newStruct(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self) {
  ovrTrackingState *__pyx_v__ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("newStruct", 0);

  /* "psychxr/libovr/_libovr.pyx":1703
 * 
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->c_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":1704
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef libovr_capi.ovrTrackingState* _ptr = \
 */
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":1703
 * 
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1707
 * 
 *         cdef libovr_capi.ovrTrackingState* _ptr = \
 *             <libovr_capi.ovrTrackingState*>malloc(             # <<<<<<<<<<<<<<
 *                 sizeof(libovr_capi.ovrTrackingState))
 * 
 */
  __pyx_v__ptr = ((ovrTrackingState *)malloc((sizeof(ovrTrackingState))));

  /* "psychxr/libovr/_libovr.pyx":1710
 *                 sizeof(libovr_capi.ovrTrackingState))
 * 
 *         if _ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  __pyx_t_1 = ((__pyx_v__ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "psychxr/libovr/_libovr.pyx":1711
 * 
 *         if _ptr is NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         self.c_data = _ptr
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1711, __pyx_L1_error)

    /* "psychxr/libovr/_libovr.pyx":1710
 *                 sizeof(libovr_capi.ovrTrackingState))
 * 
 *         if _ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1713
 *             raise MemoryError
 * 
 *         self.c_data = _ptr             # <<<<<<<<<<<<<<
 *         self.ptr_owner = True
 * 
 */
  __pyx_v_self->c_data = __pyx_v__ptr;

  /* "psychxr/libovr/_libovr.pyx":1714
 * 
 *         self.c_data = _ptr
 *         self.ptr_owner = True             # <<<<<<<<<<<<<<
 * 
 *         self._headPose = LibOVRPoseState.fromPtr(&self.c_data.HeadPose)
 */
  __pyx_v_self->ptr_owner = 1;

  /* "psychxr/libovr/_libovr.pyx":1716
 *         self.ptr_owner = True
 * 
 *         self._headPose = LibOVRPoseState.fromPtr(&self.c_data.HeadPose)             # <<<<<<<<<<<<<<
 *         self._leftHandPose = LibOVRPoseState.fromPtr(&self.c_data.HandPoses[0])
 *         self._rightHandPose = LibOVRPoseState.fromPtr(&self.c_data.HandPoses[1])
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPoseState->fromPtr((&__pyx_v_self->c_data->HeadPose), NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_headPose);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_headPose));
  __pyx_v_self->_headPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "psychxr/libovr/_libovr.pyx":1717
 * 
 *         self._headPose = LibOVRPoseState.fromPtr(&self.c_data.HeadPose)
 *         self._leftHandPose = LibOVRPoseState.fromPtr(&self.c_data.HandPoses[0])             # <<<<<<<<<<<<<<
 *         self._rightHandPose = LibOVRPoseState.fromPtr(&self.c_data.HandPoses[1])
 *         self._calibratedOrigin = LibOVRPose.fromPtr(&self.c_data.CalibratedOrigin)
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPoseState->fromPtr((&(__pyx_v_self->c_data->HandPoses[0])), NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_leftHandPose);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_leftHandPose));
  __pyx_v_self->_leftHandPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "psychxr/libovr/_libovr.pyx":1718
 *         self._headPose = LibOVRPoseState.fromPtr(&self.c_data.HeadPose)
 *         self._leftHandPose = LibOVRPoseState.fromPtr(&self.c_data.HandPoses[0])
 *         self._rightHandPose = LibOVRPoseState.fromPtr(&self.c_data.HandPoses[1])             # <<<<<<<<<<<<<<
 *         self._calibratedOrigin = LibOVRPose.fromPtr(&self.c_data.CalibratedOrigin)
 * 
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPoseState->fromPtr((&(__pyx_v_self->c_data->HandPoses[1])), NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_rightHandPose);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_rightHandPose));
  __pyx_v_self->_rightHandPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "psychxr/libovr/_libovr.pyx":1719
 *         self._leftHandPose = LibOVRPoseState.fromPtr(&self.c_data.HandPoses[0])
 *         self._rightHandPose = LibOVRPoseState.fromPtr(&self.c_data.HandPoses[1])
 *         self._calibratedOrigin = LibOVRPose.fromPtr(&self.c_data.CalibratedOrigin)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_2 = ((PyObject *)__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPose->fromPtr((&__pyx_v_self->c_data->CalibratedOrigin), NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_calibratedOrigin);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_calibratedOrigin));
  __pyx_v_self->_calibratedOrigin = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "psychxr/libovr/_libovr.pyx":1702
 *         return wrapper
 * 
 *     cdef void newStruct(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("psychxr.libovr._libovr.LibOVRTrackingState.newStruct", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "psychxr/libovr/_libovr.pyx":1721
 *         self._calibratedOrigin = LibOVRPose.fromPtr(&self.c_data.CalibratedOrigin)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 */

/* Python wrapper */
static void __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_4__dealloc__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_4__dealloc__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "psychxr/libovr/_libovr.pyx":1722
 * 
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:             # <<<<<<<<<<<<<<
 *             free(self.c_data)
 *             self.c_data = NULL
 */
  __pyx_t_2 = ((__pyx_v_self->c_data != NULL) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->ptr_owner == 1) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":1723
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)             # <<<<<<<<<<<<<<
 *             self.c_data = NULL
 * 
 */
    free(__pyx_v_self->c_data);

    /* "psychxr/libovr/_libovr.pyx":1724
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 *             self.c_data = NULL             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_v_self->c_data = NULL;

    /* "psychxr/libovr/_libovr.pyx":1722
 * 
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:             # <<<<<<<<<<<<<<
 *             free(self.c_data)
 *             self.c_data = NULL
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1721
 *         self._calibratedOrigin = LibOVRPose.fromPtr(&self.c_data.CalibratedOrigin)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "psychxr/libovr/_libovr.pyx":1727
 * 
 *     @property
 *     def headPose(self):             # <<<<<<<<<<<<<<
 *         return self._headPose
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_8headPose_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_8headPose_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_8headPose___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_8headPose___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1728
 *     @property
 *     def headPose(self):
 *         return self._headPose             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_headPose));
  __pyx_r = ((PyObject *)__pyx_v_self->_headPose);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1727
 * 
 *     @property
 *     def headPose(self):             # <<<<<<<<<<<<<<
 *         return self._headPose
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1731
 * 
 *     @property
 *     def headStatus(self):             # <<<<<<<<<<<<<<
 *         # """Tracking status for the head.
 *         #
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10headStatus_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10headStatus_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10headStatus___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10headStatus___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self) {
  unsigned int *__pyx_v_statusBits;
  int __pyx_v_oriTracked;
  int __pyx_v_posTracked;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1750
 *         #
 *         # """
 *         cdef unsigned int* statusBits = &self.c_data.StatusFlags             # <<<<<<<<<<<<<<
 *         cdef bint oriTracked = \
 *             (statusBits[0] & libovr_capi.ovrStatus_OrientationTracked) == \
 */
  __pyx_v_statusBits = (&__pyx_v_self->c_data->StatusFlags);

  /* "psychxr/libovr/_libovr.pyx":1753
 *         cdef bint oriTracked = \
 *             (statusBits[0] & libovr_capi.ovrStatus_OrientationTracked) == \
 *                libovr_capi.ovrStatus_OrientationTracked             # <<<<<<<<<<<<<<
 *         cdef bint posTracked = \
 *             (statusBits[0] & libovr_capi.ovrStatus_PositionTracked) == \
 */
  __pyx_v_oriTracked = (((__pyx_v_statusBits[0]) & ovrStatus_OrientationTracked) == ovrStatus_OrientationTracked);

  /* "psychxr/libovr/_libovr.pyx":1756
 *         cdef bint posTracked = \
 *             (statusBits[0] & libovr_capi.ovrStatus_PositionTracked) == \
 *                 libovr_capi.ovrStatus_PositionTracked             # <<<<<<<<<<<<<<
 * 
 *         return oriTracked, posTracked
 */
  __pyx_v_posTracked = (((__pyx_v_statusBits[0]) & ovrStatus_PositionTracked) == ovrStatus_PositionTracked);

  /* "psychxr/libovr/_libovr.pyx":1758
 *                 libovr_capi.ovrStatus_PositionTracked
 * 
 *         return oriTracked, posTracked             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_oriTracked); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_posTracked); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1731
 * 
 *     @property
 *     def headStatus(self):             # <<<<<<<<<<<<<<
 *         # """Tracking status for the head.
 *         #
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackingState.headStatus.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1761
 * 
 *     @property
 *     def handPoses(self):             # <<<<<<<<<<<<<<
 *         return [self._leftHandPose, self._rightHandPose]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_9handPoses_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_9handPoses_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_9handPoses___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_9handPoses___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1762
 *     @property
 *     def handPoses(self):
 *         return [self._leftHandPose, self._rightHandPose]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_leftHandPose));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->_leftHandPose));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self->_leftHandPose));
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_rightHandPose));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->_rightHandPose));
  PyList_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self->_rightHandPose));
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1761
 * 
 *     @property
 *     def handPoses(self):             # <<<<<<<<<<<<<<
 *         return [self._leftHandPose, self._rightHandPose]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackingState.handPoses.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1765
 * 
 *     @property
 *     def handStatus(self):             # <<<<<<<<<<<<<<
 *         cdef list toReturn = list()
 *         cdef unsigned int* statusBits = &self.c_data.HandStatusFlags[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10handStatus_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10handStatus_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10handStatus___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10handStatus___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self) {
  PyObject *__pyx_v_toReturn = 0;
  unsigned int *__pyx_v_statusBits;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1766
 *     @property
 *     def handStatus(self):
 *         cdef list toReturn = list()             # <<<<<<<<<<<<<<
 *         cdef unsigned int* statusBits = &self.c_data.HandStatusFlags[0]
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_toReturn = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1767
 *     def handStatus(self):
 *         cdef list toReturn = list()
 *         cdef unsigned int* statusBits = &self.c_data.HandStatusFlags[0]             # <<<<<<<<<<<<<<
 * 
 *         cdef Py_ssize_t i = 0
 */
  __pyx_v_statusBits = (&(__pyx_v_self->c_data->HandStatusFlags[0]));

  /* "psychxr/libovr/_libovr.pyx":1769
 *         cdef unsigned int* statusBits = &self.c_data.HandStatusFlags[0]
 * 
 *         cdef Py_ssize_t i = 0             # <<<<<<<<<<<<<<
 *         for i in range(<Py_ssize_t>libovr_capi.ovrHand_Count):
 *             toReturn.append((
 */
  __pyx_v_i = 0;

  /* "psychxr/libovr/_libovr.pyx":1770
 * 
 *         cdef Py_ssize_t i = 0
 *         for i in range(<Py_ssize_t>libovr_capi.ovrHand_Count):             # <<<<<<<<<<<<<<
 *             toReturn.append((
 *                 (statusBits[i] & libovr_capi.ovrStatus_OrientationTracked) ==
 */
  __pyx_t_2 = ((Py_ssize_t)ovrHand_Count);
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "psychxr/libovr/_libovr.pyx":1772
 *         for i in range(<Py_ssize_t>libovr_capi.ovrHand_Count):
 *             toReturn.append((
 *                 (statusBits[i] & libovr_capi.ovrStatus_OrientationTracked) ==             # <<<<<<<<<<<<<<
 *                 libovr_capi.ovrStatus_OrientationTracked,
 *                 (statusBits[i] & libovr_capi.ovrStatus_PositionTracked) ==
 */
    __pyx_t_1 = __Pyx_PyBool_FromLong((((__pyx_v_statusBits[__pyx_v_i]) & ovrStatus_OrientationTracked) == ovrStatus_OrientationTracked)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "psychxr/libovr/_libovr.pyx":1774
 *                 (statusBits[i] & libovr_capi.ovrStatus_OrientationTracked) ==
 *                 libovr_capi.ovrStatus_OrientationTracked,
 *                 (statusBits[i] & libovr_capi.ovrStatus_PositionTracked) ==             # <<<<<<<<<<<<<<
 *                 libovr_capi.ovrStatus_PositionTracked))
 * 
 */
    __pyx_t_5 = __Pyx_PyBool_FromLong((((__pyx_v_statusBits[__pyx_v_i]) & ovrStatus_PositionTracked) == ovrStatus_PositionTracked)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "psychxr/libovr/_libovr.pyx":1772
 *         for i in range(<Py_ssize_t>libovr_capi.ovrHand_Count):
 *             toReturn.append((
 *                 (statusBits[i] & libovr_capi.ovrStatus_OrientationTracked) ==             # <<<<<<<<<<<<<<
 *                 libovr_capi.ovrStatus_OrientationTracked,
 *                 (statusBits[i] & libovr_capi.ovrStatus_PositionTracked) ==
 */
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1772, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_5 = 0;

    /* "psychxr/libovr/_libovr.pyx":1771
 *         cdef Py_ssize_t i = 0
 *         for i in range(<Py_ssize_t>libovr_capi.ovrHand_Count):
 *             toReturn.append((             # <<<<<<<<<<<<<<
 *                 (statusBits[i] & libovr_capi.ovrStatus_OrientationTracked) ==
 *                 libovr_capi.ovrStatus_OrientationTracked,
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_toReturn, __pyx_t_6); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 1771, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "psychxr/libovr/_libovr.pyx":1777
 *                 libovr_capi.ovrStatus_PositionTracked))
 * 
 *         return toReturn             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_toReturn);
  __pyx_r = __pyx_v_toReturn;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1765
 * 
 *     @property
 *     def handStatus(self):             # <<<<<<<<<<<<<<
 *         cdef list toReturn = list()
 *         cdef unsigned int* statusBits = &self.c_data.HandStatusFlags[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackingState.handStatus.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_toReturn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1780
 * 
 *     @property
 *     def calibratedOrigin(self):             # <<<<<<<<<<<<<<
 *         return self._calibratedOrigin
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_16calibratedOrigin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_16calibratedOrigin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_16calibratedOrigin___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_16calibratedOrigin___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1781
 *     @property
 *     def calibratedOrigin(self):
 *         return self._calibratedOrigin             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_calibratedOrigin));
  __pyx_r = ((PyObject *)__pyx_v_self->_calibratedOrigin);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1780
 * 
 *     @property
 *     def calibratedOrigin(self):             # <<<<<<<<<<<<<<
 *         return self._calibratedOrigin
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_6__reduce_cython__[] = "LibOVRTrackingState.__reduce_cython__(self)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_6__reduce_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackingState.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_8__setstate_cython__[] = "LibOVRTrackingState.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_8__setstate_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackingState.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1797
 *     cdef unsigned int _trackerIndex
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """This object is returned by 'getTrackerInfo'. All attributes are
 *         read-only.
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo___init__[] = "This object is returned by 'getTrackerInfo'. All attributes are\n        read-only.\n\n        Attributes\n        ----------\n        trackerIndex : int\n            Tracker index this objects refers to.\n        pose : LibOVRPose\n            The pose of the sensor.\n        leveledPose : LibOVRPose\n            Gravity aligned pose of the sensor.\n        isConnected : bool\n            True if the sensor is connected and available.\n        isPoseTracked : bool\n            True if the sensor has a valid pose.\n        frustum : ndarray\n            Frustum parameters of the sensor as an array.\n        horizontalFov : float\n            Horizontal FOV of the sensor in radians.\n        verticalFov : float\n            Vertical FOV of the sensor in radians\n        nearZ : float\n            Near clipping plane of the sensor frustum in meters.\n        farZ : float\n            Far clipping plane of the sensor frustum in meters.\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo___init__;
#endif
static int __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo___init__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo___init__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1826
 *         """
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._pose = LibOVRPose()
 *         self._leveledPose = LibOVRPose()
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_2__cinit__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "psychxr/libovr/_libovr.pyx":1827
 * 
 *     def __cinit__(self):
 *         self._pose = LibOVRPose()             # <<<<<<<<<<<<<<
 *         self._leveledPose = LibOVRPose()
 *         self._trackerIndex = 0
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_pose);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_pose));
  __pyx_v_self->_pose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1828
 *     def __cinit__(self):
 *         self._pose = LibOVRPose()
 *         self._leveledPose = LibOVRPose()             # <<<<<<<<<<<<<<
 *         self._trackerIndex = 0
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_leveledPose);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->_leveledPose));
  __pyx_v_self->_leveledPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1829
 *         self._pose = LibOVRPose()
 *         self._leveledPose = LibOVRPose()
 *         self._trackerIndex = 0             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_trackerIndex = 0;

  /* "psychxr/libovr/_libovr.pyx":1826
 *         """
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self._pose = LibOVRPose()
 *         self._leveledPose = LibOVRPose()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackerInfo.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1832
 * 
 *     @property
 *     def trackerIndex(self):             # <<<<<<<<<<<<<<
 *         return self._trackerIndex
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_12trackerIndex_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_12trackerIndex_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_12trackerIndex___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_12trackerIndex___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1833
 *     @property
 *     def trackerIndex(self):
 *         return self._trackerIndex             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_self->_trackerIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1832
 * 
 *     @property
 *     def trackerIndex(self):             # <<<<<<<<<<<<<<
 *         return self._trackerIndex
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackerInfo.trackerIndex.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1836
 * 
 *     @property
 *     def pose(self):             # <<<<<<<<<<<<<<
 *         self._pose.c_data[0] = self.c_ovrTrackerPose.Pose
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4pose_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4pose_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4pose___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4pose___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ovrPosef __pyx_t_1;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1837
 *     @property
 *     def pose(self):
 *         self._pose.c_data[0] = self.c_ovrTrackerPose.Pose             # <<<<<<<<<<<<<<
 * 
 *         return self._pose
 */
  __pyx_t_1 = __pyx_v_self->c_ovrTrackerPose.Pose;
  (__pyx_v_self->_pose->c_data[0]) = __pyx_t_1;

  /* "psychxr/libovr/_libovr.pyx":1839
 *         self._pose.c_data[0] = self.c_ovrTrackerPose.Pose
 * 
 *         return self._pose             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_pose));
  __pyx_r = ((PyObject *)__pyx_v_self->_pose);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1836
 * 
 *     @property
 *     def pose(self):             # <<<<<<<<<<<<<<
 *         self._pose.c_data[0] = self.c_ovrTrackerPose.Pose
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1842
 * 
 *     @property
 *     def leveledPose(self):             # <<<<<<<<<<<<<<
 *         self._leveledPose.c_data[0] = self.c_ovrTrackerPose.LeveledPose
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11leveledPose_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11leveledPose_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11leveledPose___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11leveledPose___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ovrPosef __pyx_t_1;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1843
 *     @property
 *     def leveledPose(self):
 *         self._leveledPose.c_data[0] = self.c_ovrTrackerPose.LeveledPose             # <<<<<<<<<<<<<<
 * 
 *         return self._leveledPose
 */
  __pyx_t_1 = __pyx_v_self->c_ovrTrackerPose.LeveledPose;
  (__pyx_v_self->_leveledPose->c_data[0]) = __pyx_t_1;

  /* "psychxr/libovr/_libovr.pyx":1845
 *         self._leveledPose.c_data[0] = self.c_ovrTrackerPose.LeveledPose
 * 
 *         return self._leveledPose             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->_leveledPose));
  __pyx_r = ((PyObject *)__pyx_v_self->_leveledPose);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1842
 * 
 *     @property
 *     def leveledPose(self):             # <<<<<<<<<<<<<<
 *         self._leveledPose.c_data[0] = self.c_ovrTrackerPose.LeveledPose
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1848
 * 
 *     @property
 *     def isConnected(self):             # <<<<<<<<<<<<<<
 *         return <bint>((libovr_capi.ovrTracker_Connected &
 *              self.c_ovrTrackerPose.TrackerFlags) ==
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11isConnected_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11isConnected_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11isConnected___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11isConnected___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1849
 *     @property
 *     def isConnected(self):
 *         return <bint>((libovr_capi.ovrTracker_Connected &             # <<<<<<<<<<<<<<
 *              self.c_ovrTrackerPose.TrackerFlags) ==
 *                       libovr_capi.ovrTracker_Connected)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "psychxr/libovr/_libovr.pyx":1850
 *     def isConnected(self):
 *         return <bint>((libovr_capi.ovrTracker_Connected &
 *              self.c_ovrTrackerPose.TrackerFlags) ==             # <<<<<<<<<<<<<<
 *                       libovr_capi.ovrTracker_Connected)
 * 
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong((((ovrTracker_Connected & __pyx_v_self->c_ovrTrackerPose.TrackerFlags) == ovrTracker_Connected) != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1848
 * 
 *     @property
 *     def isConnected(self):             # <<<<<<<<<<<<<<
 *         return <bint>((libovr_capi.ovrTracker_Connected &
 *              self.c_ovrTrackerPose.TrackerFlags) ==
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackerInfo.isConnected.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1854
 * 
 *     @property
 *     def isPoseTracked(self):             # <<<<<<<<<<<<<<
 *         return <bint>((libovr_capi.ovrTracker_PoseTracked &
 *              self.c_ovrTrackerPose.TrackerFlags) ==
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13isPoseTracked_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13isPoseTracked_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13isPoseTracked___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13isPoseTracked___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1855
 *     @property
 *     def isPoseTracked(self):
 *         return <bint>((libovr_capi.ovrTracker_PoseTracked &             # <<<<<<<<<<<<<<
 *              self.c_ovrTrackerPose.TrackerFlags) ==
 *                       libovr_capi.ovrTracker_PoseTracked)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "psychxr/libovr/_libovr.pyx":1856
 *     def isPoseTracked(self):
 *         return <bint>((libovr_capi.ovrTracker_PoseTracked &
 *              self.c_ovrTrackerPose.TrackerFlags) ==             # <<<<<<<<<<<<<<
 *                       libovr_capi.ovrTracker_PoseTracked)
 * 
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong((((ovrTracker_PoseTracked & __pyx_v_self->c_ovrTrackerPose.TrackerFlags) == ovrTracker_PoseTracked) != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1854
 * 
 *     @property
 *     def isPoseTracked(self):             # <<<<<<<<<<<<<<
 *         return <bint>((libovr_capi.ovrTracker_PoseTracked &
 *              self.c_ovrTrackerPose.TrackerFlags) ==
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackerInfo.isPoseTracked.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1860
 * 
 *     @property
 *     def frustum(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray to_return = np.asarray([
 *             self.c_ovrTrackerDesc.FrustumHFovInRadians,
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_7frustum_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_7frustum_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_7frustum___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_7frustum___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  PyArrayObject *__pyx_v_to_return = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1861
 *     @property
 *     def frustum(self):
 *         cdef np.ndarray to_return = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_ovrTrackerDesc.FrustumHFovInRadians,
 *             self.c_ovrTrackerDesc.FrustumVFovInRadians,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1862
 *     def frustum(self):
 *         cdef np.ndarray to_return = np.asarray([
 *             self.c_ovrTrackerDesc.FrustumHFovInRadians,             # <<<<<<<<<<<<<<
 *             self.c_ovrTrackerDesc.FrustumVFovInRadians,
 *             self.c_ovrTrackerDesc.FrustumNearZInMeters,
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_ovrTrackerDesc.FrustumHFovInRadians); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":1863
 *         cdef np.ndarray to_return = np.asarray([
 *             self.c_ovrTrackerDesc.FrustumHFovInRadians,
 *             self.c_ovrTrackerDesc.FrustumVFovInRadians,             # <<<<<<<<<<<<<<
 *             self.c_ovrTrackerDesc.FrustumNearZInMeters,
 *             self.c_ovrTrackerDesc.FrustumFarZInMeters],
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->c_ovrTrackerDesc.FrustumVFovInRadians); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":1864
 *             self.c_ovrTrackerDesc.FrustumHFovInRadians,
 *             self.c_ovrTrackerDesc.FrustumVFovInRadians,
 *             self.c_ovrTrackerDesc.FrustumNearZInMeters,             # <<<<<<<<<<<<<<
 *             self.c_ovrTrackerDesc.FrustumFarZInMeters],
 *             dtype=np.float32)
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->c_ovrTrackerDesc.FrustumNearZInMeters); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "psychxr/libovr/_libovr.pyx":1865
 *             self.c_ovrTrackerDesc.FrustumVFovInRadians,
 *             self.c_ovrTrackerDesc.FrustumNearZInMeters,
 *             self.c_ovrTrackerDesc.FrustumFarZInMeters],             # <<<<<<<<<<<<<<
 *             dtype=np.float32)
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->c_ovrTrackerDesc.FrustumFarZInMeters); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "psychxr/libovr/_libovr.pyx":1861
 *     @property
 *     def frustum(self):
 *         cdef np.ndarray to_return = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_ovrTrackerDesc.FrustumHFovInRadians,
 *             self.c_ovrTrackerDesc.FrustumVFovInRadians,
 */
  __pyx_t_6 = PyList_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "psychxr/libovr/_libovr.pyx":1866
 *             self.c_ovrTrackerDesc.FrustumNearZInMeters,
 *             self.c_ovrTrackerDesc.FrustumFarZInMeters],
 *             dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return to_return
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 1866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":1861
 *     @property
 *     def frustum(self):
 *         cdef np.ndarray to_return = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_ovrTrackerDesc.FrustumHFovInRadians,
 *             self.c_ovrTrackerDesc.FrustumVFovInRadians,
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 1861, __pyx_L1_error)
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":1868
 *             dtype=np.float32)
 * 
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1860
 * 
 *     @property
 *     def frustum(self):             # <<<<<<<<<<<<<<
 *         cdef np.ndarray to_return = np.asarray([
 *             self.c_ovrTrackerDesc.FrustumHFovInRadians,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackerInfo.frustum.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1871
 * 
 *     @property
 *     def horizontalFov(self):             # <<<<<<<<<<<<<<
 *         return self.c_ovrTrackerDesc.FrustumHFovInRadians
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13horizontalFov_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13horizontalFov_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13horizontalFov___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13horizontalFov___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1872
 *     @property
 *     def horizontalFov(self):
 *         return self.c_ovrTrackerDesc.FrustumHFovInRadians             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_ovrTrackerDesc.FrustumHFovInRadians); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1871
 * 
 *     @property
 *     def horizontalFov(self):             # <<<<<<<<<<<<<<
 *         return self.c_ovrTrackerDesc.FrustumHFovInRadians
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackerInfo.horizontalFov.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1875
 * 
 *     @property
 *     def verticalFov(self):             # <<<<<<<<<<<<<<
 *         return self.c_ovrTrackerDesc.FrustumVFovInRadians
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11verticalFov_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11verticalFov_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11verticalFov___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11verticalFov___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1876
 *     @property
 *     def verticalFov(self):
 *         return self.c_ovrTrackerDesc.FrustumVFovInRadians             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_ovrTrackerDesc.FrustumVFovInRadians); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1875
 * 
 *     @property
 *     def verticalFov(self):             # <<<<<<<<<<<<<<
 *         return self.c_ovrTrackerDesc.FrustumVFovInRadians
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackerInfo.verticalFov.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1879
 * 
 *     @property
 *     def nearZ(self):             # <<<<<<<<<<<<<<
 *         return self.c_ovrTrackerDesc.FrustumNearZInMeters
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_5nearZ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_5nearZ_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_5nearZ___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_5nearZ___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1880
 *     @property
 *     def nearZ(self):
 *         return self.c_ovrTrackerDesc.FrustumNearZInMeters             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_ovrTrackerDesc.FrustumNearZInMeters); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1879
 * 
 *     @property
 *     def nearZ(self):             # <<<<<<<<<<<<<<
 *         return self.c_ovrTrackerDesc.FrustumNearZInMeters
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackerInfo.nearZ.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1883
 * 
 *     @property
 *     def farZ(self):             # <<<<<<<<<<<<<<
 *         return self.c_ovrTrackerDesc.FrustumFarZInMeters
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4farZ_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4farZ_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4farZ___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4farZ___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1884
 *     @property
 *     def farZ(self):
 *         return self.c_ovrTrackerDesc.FrustumFarZInMeters             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_ovrTrackerDesc.FrustumFarZInMeters); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1883
 * 
 *     @property
 *     def farZ(self):             # <<<<<<<<<<<<<<
 *         return self.c_ovrTrackerDesc.FrustumFarZInMeters
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackerInfo.farZ.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4__reduce_cython__[] = "LibOVRTrackerInfo.__reduce_cython__(self)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_5__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4__reduce_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackerInfo.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_6__setstate_cython__[] = "LibOVRTrackerInfo.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_7__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_6__setstate_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRTrackerInfo.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1894
 *     cdef bint ptr_owner
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Attributes
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus___init__[] = "\n        Attributes\n        ----------\n        isVisible : bool\n        hmdPresent : bool\n        hmdMounted : bool\n        displayLost : bool\n        shouldQuit : bool\n        shouldRecenter : bool\n        hasInputFocus : bool\n        overlayPresent : bool\n        depthRequested : bool\n\n        ";
#if CYTHON_COMPILING_IN_CPYTHON
struct wrapperbase __pyx_wrapperbase_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus___init__;
#endif
static int __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus___init__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus___init__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "psychxr/libovr/_libovr.pyx":1909
 * 
 *         """
 *         self.newStruct()             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  ((struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self->__pyx_vtab)->newStruct(__pyx_v_self);

  /* "psychxr/libovr/_libovr.pyx":1894
 *     cdef bint ptr_owner
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         """
 *         Attributes
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1911
 *         self.newStruct()
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr_owner = False
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_2__cinit__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "psychxr/libovr/_libovr.pyx":1912
 * 
 *     def __cinit__(self):
 *         self.ptr_owner = False             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->ptr_owner = 0;

  /* "psychxr/libovr/_libovr.pyx":1911
 *         self.newStruct()
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr_owner = False
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1915
 * 
 *     @staticmethod
 *     cdef LibOVRSessionStatus fromPtr(libovr_capi.ovrSessionStatus* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRSessionStatus wrapper = \
 */

static struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_f_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_fromPtr(ovrSessionStatus *__pyx_v_ptr, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_fromPtr *__pyx_optional_args) {
  int __pyx_v_owner = ((int)0);
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_wrapper = 0;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fromPtr", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_owner = __pyx_optional_args->owner;
    }
  }

  /* "psychxr/libovr/_libovr.pyx":1918
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRSessionStatus wrapper = \
 *             LibOVRSessionStatus.__new__(LibOVRSessionStatus)             # <<<<<<<<<<<<<<
 *         wrapper.c_data = ptr
 *         wrapper.ptr_owner = owner
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRSessionStatus(((PyTypeObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRSessionStatus), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1918, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1919
 *         cdef LibOVRSessionStatus wrapper = \
 *             LibOVRSessionStatus.__new__(LibOVRSessionStatus)
 *         wrapper.c_data = ptr             # <<<<<<<<<<<<<<
 *         wrapper.ptr_owner = owner
 * 
 */
  __pyx_v_wrapper->c_data = __pyx_v_ptr;

  /* "psychxr/libovr/_libovr.pyx":1920
 *             LibOVRSessionStatus.__new__(LibOVRSessionStatus)
 *         wrapper.c_data = ptr
 *         wrapper.ptr_owner = owner             # <<<<<<<<<<<<<<
 * 
 *         return wrapper
 */
  __pyx_v_wrapper->ptr_owner = __pyx_v_owner;

  /* "psychxr/libovr/_libovr.pyx":1922
 *         wrapper.ptr_owner = owner
 * 
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     cdef void newStruct(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1915
 * 
 *     @staticmethod
 *     cdef LibOVRSessionStatus fromPtr(libovr_capi.ovrSessionStatus* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRSessionStatus wrapper = \
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.fromPtr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1924
 *         return wrapper
 * 
 *     cdef void newStruct(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return
 */

static void __pyx_f_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_newStruct(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  ovrSessionStatus *__pyx_v__ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("newStruct", 0);

  /* "psychxr/libovr/_libovr.pyx":1925
 * 
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->c_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":1926
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef libovr_capi.ovrSessionStatus* _ptr = \
 */
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":1925
 * 
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1929
 * 
 *         cdef libovr_capi.ovrSessionStatus* _ptr = \
 *             <libovr_capi.ovrSessionStatus*>malloc(             # <<<<<<<<<<<<<<
 *                 sizeof(libovr_capi.ovrSessionStatus))
 * 
 */
  __pyx_v__ptr = ((ovrSessionStatus *)malloc((sizeof(ovrSessionStatus))));

  /* "psychxr/libovr/_libovr.pyx":1932
 *                 sizeof(libovr_capi.ovrSessionStatus))
 * 
 *         if _ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  __pyx_t_1 = ((__pyx_v__ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "psychxr/libovr/_libovr.pyx":1933
 * 
 *         if _ptr is NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         self.c_data = _ptr
 */
    PyErr_NoMemory(); __PYX_ERR(0, 1933, __pyx_L1_error)

    /* "psychxr/libovr/_libovr.pyx":1932
 *                 sizeof(libovr_capi.ovrSessionStatus))
 * 
 *         if _ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1935
 *             raise MemoryError
 * 
 *         self.c_data = _ptr             # <<<<<<<<<<<<<<
 *         self.ptr_owner = True
 * 
 */
  __pyx_v_self->c_data = __pyx_v__ptr;

  /* "psychxr/libovr/_libovr.pyx":1936
 * 
 *         self.c_data = _ptr
 *         self.ptr_owner = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->ptr_owner = 1;

  /* "psychxr/libovr/_libovr.pyx":1924
 *         return wrapper
 * 
 *     cdef void newStruct(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("psychxr.libovr._libovr.LibOVRSessionStatus.newStruct", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "psychxr/libovr/_libovr.pyx":1938
 *         self.ptr_owner = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 */

/* Python wrapper */
static void __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_4__dealloc__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_4__dealloc__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "psychxr/libovr/_libovr.pyx":1939
 * 
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:             # <<<<<<<<<<<<<<
 *             free(self.c_data)
 *             self.c_data = NULL
 */
  __pyx_t_2 = ((__pyx_v_self->c_data != NULL) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->ptr_owner == 1) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":1940
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)             # <<<<<<<<<<<<<<
 *             self.c_data = NULL
 * 
 */
    free(__pyx_v_self->c_data);

    /* "psychxr/libovr/_libovr.pyx":1941
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 *             self.c_data = NULL             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_v_self->c_data = NULL;

    /* "psychxr/libovr/_libovr.pyx":1939
 * 
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:             # <<<<<<<<<<<<<<
 *             free(self.c_data)
 *             self.c_data = NULL
 */
  }

  /* "psychxr/libovr/_libovr.pyx":1938
 *         self.ptr_owner = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "psychxr/libovr/_libovr.pyx":1944
 * 
 *     @property
 *     def isVisible(self):             # <<<<<<<<<<<<<<
 *         """True if the application has focus and visible in the HMD."""
 *         return self.c_data.IsVisible == libovr_capi.ovrTrue
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_9isVisible_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_9isVisible_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_9isVisible___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_9isVisible___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1946
 *     def isVisible(self):
 *         """True if the application has focus and visible in the HMD."""
 *         return self.c_data.IsVisible == libovr_capi.ovrTrue             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->c_data->IsVisible == ovrTrue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1944
 * 
 *     @property
 *     def isVisible(self):             # <<<<<<<<<<<<<<
 *         """True if the application has focus and visible in the HMD."""
 *         return self.c_data.IsVisible == libovr_capi.ovrTrue
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.isVisible.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1949
 * 
 *     @property
 *     def hmdPresent(self):             # <<<<<<<<<<<<<<
 *         """True if the HMD is present."""
 *         return self.c_data.HmdPresent == libovr_capi.ovrTrue
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdPresent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdPresent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdPresent___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdPresent___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1951
 *     def hmdPresent(self):
 *         """True if the HMD is present."""
 *         return self.c_data.HmdPresent == libovr_capi.ovrTrue             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->c_data->HmdPresent == ovrTrue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1949
 * 
 *     @property
 *     def hmdPresent(self):             # <<<<<<<<<<<<<<
 *         """True if the HMD is present."""
 *         return self.c_data.HmdPresent == libovr_capi.ovrTrue
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.hmdPresent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1954
 * 
 *     @property
 *     def hmdMounted(self):             # <<<<<<<<<<<<<<
 *         """True if the HMD is on the user's head."""
 *         return self.c_data.HmdMounted == libovr_capi.ovrTrue
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdMounted_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdMounted_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdMounted___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdMounted___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1956
 *     def hmdMounted(self):
 *         """True if the HMD is on the user's head."""
 *         return self.c_data.HmdMounted == libovr_capi.ovrTrue             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->c_data->HmdMounted == ovrTrue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1954
 * 
 *     @property
 *     def hmdMounted(self):             # <<<<<<<<<<<<<<
 *         """True if the HMD is on the user's head."""
 *         return self.c_data.HmdMounted == libovr_capi.ovrTrue
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.hmdMounted.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1959
 * 
 *     @property
 *     def displayLost(self):             # <<<<<<<<<<<<<<
 *         """True if the the display was lost."""
 *         return self.c_data.DisplayLost == libovr_capi.ovrTrue
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_11displayLost_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_11displayLost_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_11displayLost___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_11displayLost___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1961
 *     def displayLost(self):
 *         """True if the the display was lost."""
 *         return self.c_data.DisplayLost == libovr_capi.ovrTrue             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->c_data->DisplayLost == ovrTrue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1959
 * 
 *     @property
 *     def displayLost(self):             # <<<<<<<<<<<<<<
 *         """True if the the display was lost."""
 *         return self.c_data.DisplayLost == libovr_capi.ovrTrue
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.displayLost.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1964
 * 
 *     @property
 *     def shouldQuit(self):             # <<<<<<<<<<<<<<
 *         """True if the application was signaled to quit."""
 *         return self.c_data.ShouldQuit == libovr_capi.ovrTrue
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10shouldQuit_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10shouldQuit_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10shouldQuit___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10shouldQuit___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1966
 *     def shouldQuit(self):
 *         """True if the application was signaled to quit."""
 *         return self.c_data.ShouldQuit == libovr_capi.ovrTrue             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->c_data->ShouldQuit == ovrTrue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1964
 * 
 *     @property
 *     def shouldQuit(self):             # <<<<<<<<<<<<<<
 *         """True if the application was signaled to quit."""
 *         return self.c_data.ShouldQuit == libovr_capi.ovrTrue
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.shouldQuit.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1969
 * 
 *     @property
 *     def shouldRecenter(self):             # <<<<<<<<<<<<<<
 *         """True if the application was signaled to re-center."""
 *         return self.c_data.ShouldRecenter == libovr_capi.ovrTrue
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14shouldRecenter_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14shouldRecenter_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14shouldRecenter___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14shouldRecenter___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1971
 *     def shouldRecenter(self):
 *         """True if the application was signaled to re-center."""
 *         return self.c_data.ShouldRecenter == libovr_capi.ovrTrue             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->c_data->ShouldRecenter == ovrTrue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1969
 * 
 *     @property
 *     def shouldRecenter(self):             # <<<<<<<<<<<<<<
 *         """True if the application was signaled to re-center."""
 *         return self.c_data.ShouldRecenter == libovr_capi.ovrTrue
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.shouldRecenter.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1974
 * 
 *     @property
 *     def hasInputFocus(self):             # <<<<<<<<<<<<<<
 *         """True if the application has input focus."""
 *         return self.c_data.HasInputFocus == libovr_capi.ovrTrue
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_13hasInputFocus_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_13hasInputFocus_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_13hasInputFocus___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_13hasInputFocus___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1976
 *     def hasInputFocus(self):
 *         """True if the application has input focus."""
 *         return self.c_data.HasInputFocus == libovr_capi.ovrTrue             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->c_data->HasInputFocus == ovrTrue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1974
 * 
 *     @property
 *     def hasInputFocus(self):             # <<<<<<<<<<<<<<
 *         """True if the application has input focus."""
 *         return self.c_data.HasInputFocus == libovr_capi.ovrTrue
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.hasInputFocus.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1979
 * 
 *     @property
 *     def overlayPresent(self):             # <<<<<<<<<<<<<<
 *         """True if the system overlay is present."""
 *         return self.c_data.OverlayPresent == libovr_capi.ovrTrue
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14overlayPresent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14overlayPresent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14overlayPresent___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14overlayPresent___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1981
 *     def overlayPresent(self):
 *         """True if the system overlay is present."""
 *         return self.c_data.OverlayPresent == libovr_capi.ovrTrue             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->c_data->OverlayPresent == ovrTrue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1979
 * 
 *     @property
 *     def overlayPresent(self):             # <<<<<<<<<<<<<<
 *         """True if the system overlay is present."""
 *         return self.c_data.OverlayPresent == libovr_capi.ovrTrue
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.overlayPresent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1984
 * 
 *     @property
 *     def depthRequested(self):             # <<<<<<<<<<<<<<
 *         """True if the system requires a depth texture. Currently unused by
 *         PsychXR."""
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14depthRequested_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14depthRequested_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14depthRequested___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14depthRequested___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":1987
 *         """True if the system requires a depth texture. Currently unused by
 *         PsychXR."""
 *         return self.c_data.DepthRequested == libovr_capi.ovrTrue             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_self->c_data->DepthRequested == ovrTrue)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":1984
 * 
 *     @property
 *     def depthRequested(self):             # <<<<<<<<<<<<<<
 *         """True if the system requires a depth texture. Currently unused by
 *         PsychXR."""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.depthRequested.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_6__reduce_cython__[] = "LibOVRSessionStatus.__reduce_cython__(self)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_6__reduce_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_8__setstate_cython__[] = "LibOVRSessionStatus.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_8__setstate_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRSessionStatus.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1996
 *     cdef bint ptr_owner
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.newStruct()
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo___init__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo___init__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "psychxr/libovr/_libovr.pyx":1997
 * 
 *     def __init__(self):
 *         self.newStruct()             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self):
 */
  ((struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self->__pyx_vtab)->newStruct(__pyx_v_self);

  /* "psychxr/libovr/_libovr.pyx":1996
 *     cdef bint ptr_owner
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.newStruct()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":1999
 *         self.newStruct()
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr_owner = False
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_3__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_2__cinit__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_2__cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "psychxr/libovr/_libovr.pyx":2000
 * 
 *     def __cinit__(self):
 *         self.ptr_owner = False             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __pyx_v_self->ptr_owner = 0;

  /* "psychxr/libovr/_libovr.pyx":1999
 *         self.newStruct()
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.ptr_owner = False
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2003
 * 
 *     @staticmethod
 *     cdef LibOVRHmdInfo fromPtr(libovr_capi.ovrHmdDesc* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRHmdInfo wrapper = LibOVRHmdInfo.__new__(LibOVRHmdInfo)
 */

static struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_f_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_fromPtr(ovrHmdDesc *__pyx_v_ptr, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_fromPtr *__pyx_optional_args) {
  int __pyx_v_owner = ((int)0);
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_wrapper = 0;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fromPtr", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_owner = __pyx_optional_args->owner;
    }
  }

  /* "psychxr/libovr/_libovr.pyx":2005
 *     cdef LibOVRHmdInfo fromPtr(libovr_capi.ovrHmdDesc* ptr, bint owner=False):
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRHmdInfo wrapper = LibOVRHmdInfo.__new__(LibOVRHmdInfo)             # <<<<<<<<<<<<<<
 *         wrapper.c_data = ptr
 *         wrapper.ptr_owner = owner
 */
  __pyx_t_1 = ((PyObject *)__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRHmdInfo(((PyTypeObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRHmdInfo), __pyx_empty_tuple, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2005, __pyx_L1_error)
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_v_wrapper = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2006
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRHmdInfo wrapper = LibOVRHmdInfo.__new__(LibOVRHmdInfo)
 *         wrapper.c_data = ptr             # <<<<<<<<<<<<<<
 *         wrapper.ptr_owner = owner
 * 
 */
  __pyx_v_wrapper->c_data = __pyx_v_ptr;

  /* "psychxr/libovr/_libovr.pyx":2007
 *         cdef LibOVRHmdInfo wrapper = LibOVRHmdInfo.__new__(LibOVRHmdInfo)
 *         wrapper.c_data = ptr
 *         wrapper.ptr_owner = owner             # <<<<<<<<<<<<<<
 * 
 *         return wrapper
 */
  __pyx_v_wrapper->ptr_owner = __pyx_v_owner;

  /* "psychxr/libovr/_libovr.pyx":2009
 *         wrapper.ptr_owner = owner
 * 
 *         return wrapper             # <<<<<<<<<<<<<<
 * 
 *     cdef void newStruct(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_wrapper));
  __pyx_r = __pyx_v_wrapper;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2003
 * 
 *     @staticmethod
 *     cdef LibOVRHmdInfo fromPtr(libovr_capi.ovrHmdDesc* ptr, bint owner=False):             # <<<<<<<<<<<<<<
 *         # bypass __init__ if wrapping a pointer
 *         cdef LibOVRHmdInfo wrapper = LibOVRHmdInfo.__new__(LibOVRHmdInfo)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.fromPtr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_wrapper);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2011
 *         return wrapper
 * 
 *     cdef void newStruct(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return
 */

static void __pyx_f_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_newStruct(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  ovrHmdDesc *__pyx_v__ptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("newStruct", 0);

  /* "psychxr/libovr/_libovr.pyx":2012
 * 
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->c_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":2013
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return             # <<<<<<<<<<<<<<
 * 
 *         cdef libovr_capi.ovrHmdDesc* _ptr = <libovr_capi.ovrHmdDesc*>malloc(
 */
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":2012
 * 
 *     cdef void newStruct(self):
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":2015
 *             return
 * 
 *         cdef libovr_capi.ovrHmdDesc* _ptr = <libovr_capi.ovrHmdDesc*>malloc(             # <<<<<<<<<<<<<<
 *             sizeof(libovr_capi.ovrHmdDesc))
 * 
 */
  __pyx_v__ptr = ((ovrHmdDesc *)malloc((sizeof(ovrHmdDesc))));

  /* "psychxr/libovr/_libovr.pyx":2018
 *             sizeof(libovr_capi.ovrHmdDesc))
 * 
 *         if _ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  __pyx_t_1 = ((__pyx_v__ptr == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "psychxr/libovr/_libovr.pyx":2019
 * 
 *         if _ptr is NULL:
 *             raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         self.c_data = _ptr
 */
    PyErr_NoMemory(); __PYX_ERR(0, 2019, __pyx_L1_error)

    /* "psychxr/libovr/_libovr.pyx":2018
 *             sizeof(libovr_capi.ovrHmdDesc))
 * 
 *         if _ptr is NULL:             # <<<<<<<<<<<<<<
 *             raise MemoryError
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":2021
 *             raise MemoryError
 * 
 *         self.c_data = _ptr             # <<<<<<<<<<<<<<
 *         self.ptr_owner = True
 * 
 */
  __pyx_v_self->c_data = __pyx_v__ptr;

  /* "psychxr/libovr/_libovr.pyx":2022
 * 
 *         self.c_data = _ptr
 *         self.ptr_owner = True             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->ptr_owner = 1;

  /* "psychxr/libovr/_libovr.pyx":2011
 *         return wrapper
 * 
 *     cdef void newStruct(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL:  # already allocated, __init__ called twice?
 *             return
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("psychxr.libovr._libovr.LibOVRHmdInfo.newStruct", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "psychxr/libovr/_libovr.pyx":2024
 *         self.ptr_owner = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 */

/* Python wrapper */
static void __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_4__dealloc__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_4__dealloc__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "psychxr/libovr/_libovr.pyx":2025
 * 
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:             # <<<<<<<<<<<<<<
 *             free(self.c_data)
 *             self.c_data = NULL
 */
  __pyx_t_2 = ((__pyx_v_self->c_data != NULL) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = ((__pyx_v_self->ptr_owner == 1) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":2026
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)             # <<<<<<<<<<<<<<
 *             self.c_data = NULL
 * 
 */
    free(__pyx_v_self->c_data);

    /* "psychxr/libovr/_libovr.pyx":2027
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 *             self.c_data = NULL             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_v_self->c_data = NULL;

    /* "psychxr/libovr/_libovr.pyx":2025
 * 
 *     def __dealloc__(self):
 *         if self.c_data is not NULL and self.ptr_owner is True:             # <<<<<<<<<<<<<<
 *             free(self.c_data)
 *             self.c_data = NULL
 */
  }

  /* "psychxr/libovr/_libovr.pyx":2024
 *         self.ptr_owner = True
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.c_data is not NULL and self.ptr_owner is True:
 *             free(self.c_data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "psychxr/libovr/_libovr.pyx":2030
 * 
 *     @property
 *     def productName(self):             # <<<<<<<<<<<<<<
 *         """Get the product name for this device.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11productName_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11productName_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11productName___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11productName___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2039
 * 
 *         """
 *         return self.c_data[0].ProductName.decode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = (__pyx_v_self->c_data[0]).ProductName;
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2030
 * 
 *     @property
 *     def productName(self):             # <<<<<<<<<<<<<<
 *         """Get the product name for this device.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.productName.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2042
 * 
 *     @property
 *     def manufacturer(self):             # <<<<<<<<<<<<<<
 *         """Get the device manufacturer name.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12manufacturer_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12manufacturer_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12manufacturer___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12manufacturer___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2051
 * 
 *         """
 *         return self.c_data[0].Manufacturer.decode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = (__pyx_v_self->c_data[0]).Manufacturer;
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2042
 * 
 *     @property
 *     def manufacturer(self):             # <<<<<<<<<<<<<<
 *         """Get the device manufacturer name.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.manufacturer.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2054
 * 
 *     @property
 *     def serialNumber(self):             # <<<<<<<<<<<<<<
 *         """Get the device serial number.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12serialNumber_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12serialNumber_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12serialNumber___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12serialNumber___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2063
 * 
 *         """
 *         return self.c_data[0].SerialNumber.decode('utf-8')             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = (__pyx_v_self->c_data[0]).SerialNumber;
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2054
 * 
 *     @property
 *     def serialNumber(self):             # <<<<<<<<<<<<<<
 *         """Get the device serial number.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.serialNumber.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2066
 * 
 *     @property
 *     def resolution(self):             # <<<<<<<<<<<<<<
 *         """Horizontal and vertical resolution of the display in pixels.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_10resolution_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_10resolution_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_10resolution___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_10resolution___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2075
 * 
 *         """
 *         return np.asarray((self.c_data[0].Resolution.w,             # <<<<<<<<<<<<<<
 *                            self.c_data[0].Resolution.h), dtype=int)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->c_data[0]).Resolution.w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":2076
 *         """
 *         return np.asarray((self.c_data[0].Resolution.w,
 *                            self.c_data[0].Resolution.h), dtype=int)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_self->c_data[0]).Resolution.h); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":2075
 * 
 *         """
 *         return np.asarray((self.c_data[0].Resolution.w,             # <<<<<<<<<<<<<<
 *                            self.c_data[0].Resolution.h), dtype=int)
 * 
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "psychxr/libovr/_libovr.pyx":2076
 *         """
 *         return np.asarray((self.c_data[0].Resolution.w,
 *                            self.c_data[0].Resolution.h), dtype=int)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, ((PyObject *)(&PyInt_Type))) < 0) __PYX_ERR(0, 2076, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2075
 * 
 *         """
 *         return np.asarray((self.c_data[0].Resolution.w,             # <<<<<<<<<<<<<<
 *                            self.c_data[0].Resolution.h), dtype=int)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2066
 * 
 *     @property
 *     def resolution(self):             # <<<<<<<<<<<<<<
 *         """Horizontal and vertical resolution of the display in pixels.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.resolution.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2079
 * 
 *     @property
 *     def refreshRate(self):             # <<<<<<<<<<<<<<
 *         """Nominal refresh rate in Hertz of the display.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11refreshRate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11refreshRate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11refreshRate___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11refreshRate___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2088
 * 
 *         """
 *         return <float>self.c_data[0].DisplayRefreshRate             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((float)(__pyx_v_self->c_data[0]).DisplayRefreshRate)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2079
 * 
 *     @property
 *     def refreshRate(self):             # <<<<<<<<<<<<<<
 *         """Nominal refresh rate in Hertz of the display.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.refreshRate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2091
 * 
 *     @property
 *     def hid(self):             # <<<<<<<<<<<<<<
 *         """USB human interface device class identifiers.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_3hid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_3hid_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_3hid___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_3hid___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2100
 * 
 *         """
 *         return <int>self.c_data[0].VendorId, <int>self.c_data[0].ProductId             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)(__pyx_v_self->c_data[0]).VendorId)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(((int)(__pyx_v_self->c_data[0]).ProductId)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2091
 * 
 *     @property
 *     def hid(self):             # <<<<<<<<<<<<<<
 *         """USB human interface device class identifiers.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.hid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2103
 * 
 *     @property
 *     def firmwareVersion(self):             # <<<<<<<<<<<<<<
 *         """Firmware version for this device.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15firmwareVersion_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15firmwareVersion_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15firmwareVersion___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15firmwareVersion___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2112
 * 
 *         """
 *         return <int>self.c_data[0].FirmwareMajor, \             # <<<<<<<<<<<<<<
 *                <int>self.c_data[0].FirmwareMinor
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)(__pyx_v_self->c_data[0]).FirmwareMajor)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":2113
 *         """
 *         return <int>self.c_data[0].FirmwareMajor, \
 *                <int>self.c_data[0].FirmwareMinor             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(((int)(__pyx_v_self->c_data[0]).FirmwareMinor)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":2112
 * 
 *         """
 *         return <int>self.c_data[0].FirmwareMajor, \             # <<<<<<<<<<<<<<
 *                <int>self.c_data[0].FirmwareMinor
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2103
 * 
 *     @property
 *     def firmwareVersion(self):             # <<<<<<<<<<<<<<
 *         """Firmware version for this device.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.firmwareVersion.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2116
 * 
 *     @property
 *     def defaultEyeFov(self):             # <<<<<<<<<<<<<<
 *         """Default or recommended eye field-of-views (FOVs) provided by the API.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_13defaultEyeFov_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_13defaultEyeFov_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_13defaultEyeFov___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_13defaultEyeFov___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  PyArrayObject *__pyx_v_fovLeft = 0;
  PyArrayObject *__pyx_v_fovRight = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2126
 * 
 *         """
 *         cdef np.ndarray fovLeft = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[0].UpTan,
 *             self.c_data[0].DefaultEyeFov[0].DownTan,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2127
 *         """
 *         cdef np.ndarray fovLeft = np.asarray([
 *             self.c_data[0].DefaultEyeFov[0].UpTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[0].DownTan,
 *             self.c_data[0].DefaultEyeFov[0].LeftTan,
 */
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).DefaultEyeFov[0]).UpTan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":2128
 *         cdef np.ndarray fovLeft = np.asarray([
 *             self.c_data[0].DefaultEyeFov[0].UpTan,
 *             self.c_data[0].DefaultEyeFov[0].DownTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[0].LeftTan,
 *             self.c_data[0].DefaultEyeFov[0].RightTan],
 */
  __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).DefaultEyeFov[0]).DownTan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":2129
 *             self.c_data[0].DefaultEyeFov[0].UpTan,
 *             self.c_data[0].DefaultEyeFov[0].DownTan,
 *             self.c_data[0].DefaultEyeFov[0].LeftTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[0].RightTan],
 *             dtype=np.float32)
 */
  __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).DefaultEyeFov[0]).LeftTan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "psychxr/libovr/_libovr.pyx":2130
 *             self.c_data[0].DefaultEyeFov[0].DownTan,
 *             self.c_data[0].DefaultEyeFov[0].LeftTan,
 *             self.c_data[0].DefaultEyeFov[0].RightTan],             # <<<<<<<<<<<<<<
 *             dtype=np.float32)
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).DefaultEyeFov[0]).RightTan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "psychxr/libovr/_libovr.pyx":2126
 * 
 *         """
 *         cdef np.ndarray fovLeft = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[0].UpTan,
 *             self.c_data[0].DefaultEyeFov[0].DownTan,
 */
  __pyx_t_6 = PyList_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "psychxr/libovr/_libovr.pyx":2131
 *             self.c_data[0].DefaultEyeFov[0].LeftTan,
 *             self.c_data[0].DefaultEyeFov[0].RightTan],
 *             dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray fovRight = np.asarray([
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 2131, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":2126
 * 
 *         """
 *         cdef np.ndarray fovLeft = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[0].UpTan,
 *             self.c_data[0].DefaultEyeFov[0].DownTan,
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2126, __pyx_L1_error)
  __pyx_v_fovLeft = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":2133
 *             dtype=np.float32)
 * 
 *         cdef np.ndarray fovRight = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[1].UpTan,
 *             self.c_data[0].DefaultEyeFov[1].DownTan,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":2134
 * 
 *         cdef np.ndarray fovRight = np.asarray([
 *             self.c_data[0].DefaultEyeFov[1].UpTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[1].DownTan,
 *             self.c_data[0].DefaultEyeFov[1].LeftTan,
 */
  __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).DefaultEyeFov[1]).UpTan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":2135
 *         cdef np.ndarray fovRight = np.asarray([
 *             self.c_data[0].DefaultEyeFov[1].UpTan,
 *             self.c_data[0].DefaultEyeFov[1].DownTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[1].LeftTan,
 *             self.c_data[0].DefaultEyeFov[1].RightTan],
 */
  __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).DefaultEyeFov[1]).DownTan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "psychxr/libovr/_libovr.pyx":2136
 *             self.c_data[0].DefaultEyeFov[1].UpTan,
 *             self.c_data[0].DefaultEyeFov[1].DownTan,
 *             self.c_data[0].DefaultEyeFov[1].LeftTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[1].RightTan],
 *             dtype=np.float32)
 */
  __pyx_t_2 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).DefaultEyeFov[1]).LeftTan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":2137
 *             self.c_data[0].DefaultEyeFov[1].DownTan,
 *             self.c_data[0].DefaultEyeFov[1].LeftTan,
 *             self.c_data[0].DefaultEyeFov[1].RightTan],             # <<<<<<<<<<<<<<
 *             dtype=np.float32)
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).DefaultEyeFov[1]).RightTan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "psychxr/libovr/_libovr.pyx":2133
 *             dtype=np.float32)
 * 
 *         cdef np.ndarray fovRight = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[1].UpTan,
 *             self.c_data[0].DefaultEyeFov[1].DownTan,
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2138
 *             self.c_data[0].DefaultEyeFov[1].LeftTan,
 *             self.c_data[0].DefaultEyeFov[1].RightTan],
 *             dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return fovLeft, fovRight
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 2138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "psychxr/libovr/_libovr.pyx":2133
 *             dtype=np.float32)
 * 
 *         cdef np.ndarray fovRight = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].DefaultEyeFov[1].UpTan,
 *             self.c_data[0].DefaultEyeFov[1].DownTan,
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2133, __pyx_L1_error)
  __pyx_v_fovRight = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "psychxr/libovr/_libovr.pyx":2140
 *             dtype=np.float32)
 * 
 *         return fovLeft, fovRight             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_fovLeft));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fovLeft));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_fovLeft));
  __Pyx_INCREF(((PyObject *)__pyx_v_fovRight));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fovRight));
  PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_fovRight));
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2116
 * 
 *     @property
 *     def defaultEyeFov(self):             # <<<<<<<<<<<<<<
 *         """Default or recommended eye field-of-views (FOVs) provided by the API.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.defaultEyeFov.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fovLeft);
  __Pyx_XDECREF((PyObject *)__pyx_v_fovRight);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2143
 * 
 *     @property
 *     def maxEyeFov(self):             # <<<<<<<<<<<<<<
 *         """Maximum eye field-of-views (FOVs) provided by the API.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_9maxEyeFov_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_9maxEyeFov_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_9maxEyeFov___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_9maxEyeFov___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  PyArrayObject *__pyx_v_fov_left = 0;
  PyArrayObject *__pyx_v_fov_right = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_fov_left;
  __Pyx_Buffer __pyx_pybuffer_fov_left;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_fov_right;
  __Pyx_Buffer __pyx_pybuffer_fov_right;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_pybuffer_fov_left.pybuffer.buf = NULL;
  __pyx_pybuffer_fov_left.refcount = 0;
  __pyx_pybuffernd_fov_left.data = NULL;
  __pyx_pybuffernd_fov_left.rcbuffer = &__pyx_pybuffer_fov_left;
  __pyx_pybuffer_fov_right.pybuffer.buf = NULL;
  __pyx_pybuffer_fov_right.refcount = 0;
  __pyx_pybuffernd_fov_right.data = NULL;
  __pyx_pybuffernd_fov_right.rcbuffer = &__pyx_pybuffer_fov_right;

  /* "psychxr/libovr/_libovr.pyx":2153
 * 
 *         """
 *         cdef np.ndarray[float, ndim=1] fov_left = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[0].UpTan,
 *             self.c_data[0].MaxEyeFov[0].DownTan,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2154
 *         """
 *         cdef np.ndarray[float, ndim=1] fov_left = np.asarray([
 *             self.c_data[0].MaxEyeFov[0].UpTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[0].DownTan,
 *             self.c_data[0].MaxEyeFov[0].LeftTan,
 */
  __pyx_t_1 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).MaxEyeFov[0]).UpTan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":2155
 *         cdef np.ndarray[float, ndim=1] fov_left = np.asarray([
 *             self.c_data[0].MaxEyeFov[0].UpTan,
 *             self.c_data[0].MaxEyeFov[0].DownTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[0].LeftTan,
 *             self.c_data[0].MaxEyeFov[0].RightTan],
 */
  __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).MaxEyeFov[0]).DownTan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":2156
 *             self.c_data[0].MaxEyeFov[0].UpTan,
 *             self.c_data[0].MaxEyeFov[0].DownTan,
 *             self.c_data[0].MaxEyeFov[0].LeftTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[0].RightTan],
 *             dtype=np.float32)
 */
  __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).MaxEyeFov[0]).LeftTan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "psychxr/libovr/_libovr.pyx":2157
 *             self.c_data[0].MaxEyeFov[0].DownTan,
 *             self.c_data[0].MaxEyeFov[0].LeftTan,
 *             self.c_data[0].MaxEyeFov[0].RightTan],             # <<<<<<<<<<<<<<
 *             dtype=np.float32)
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).MaxEyeFov[0]).RightTan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "psychxr/libovr/_libovr.pyx":2153
 * 
 *         """
 *         cdef np.ndarray[float, ndim=1] fov_left = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[0].UpTan,
 *             self.c_data[0].MaxEyeFov[0].DownTan,
 */
  __pyx_t_6 = PyList_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "psychxr/libovr/_libovr.pyx":2158
 *             self.c_data[0].MaxEyeFov[0].LeftTan,
 *             self.c_data[0].MaxEyeFov[0].RightTan],
 *             dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=1] fov_right = np.asarray([
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 2158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":2153
 * 
 *         """
 *         cdef np.ndarray[float, ndim=1] fov_left = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[0].UpTan,
 *             self.c_data[0].MaxEyeFov[0].DownTan,
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2153, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fov_left.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_fov_left = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_fov_left.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 2153, __pyx_L1_error)
    } else {__pyx_pybuffernd_fov_left.diminfo[0].strides = __pyx_pybuffernd_fov_left.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_fov_left.diminfo[0].shape = __pyx_pybuffernd_fov_left.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_fov_left = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":2160
 *             dtype=np.float32)
 * 
 *         cdef np.ndarray[float, ndim=1] fov_right = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[1].UpTan,
 *             self.c_data[0].MaxEyeFov[1].DownTan,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":2161
 * 
 *         cdef np.ndarray[float, ndim=1] fov_right = np.asarray([
 *             self.c_data[0].MaxEyeFov[1].UpTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[1].DownTan,
 *             self.c_data[0].MaxEyeFov[1].LeftTan,
 */
  __pyx_t_3 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).MaxEyeFov[1]).UpTan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":2162
 *         cdef np.ndarray[float, ndim=1] fov_right = np.asarray([
 *             self.c_data[0].MaxEyeFov[1].UpTan,
 *             self.c_data[0].MaxEyeFov[1].DownTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[1].LeftTan,
 *             self.c_data[0].MaxEyeFov[1].RightTan],
 */
  __pyx_t_5 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).MaxEyeFov[1]).DownTan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "psychxr/libovr/_libovr.pyx":2163
 *             self.c_data[0].MaxEyeFov[1].UpTan,
 *             self.c_data[0].MaxEyeFov[1].DownTan,
 *             self.c_data[0].MaxEyeFov[1].LeftTan,             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[1].RightTan],
 *             dtype=np.float32)
 */
  __pyx_t_2 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).MaxEyeFov[1]).LeftTan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":2164
 *             self.c_data[0].MaxEyeFov[1].DownTan,
 *             self.c_data[0].MaxEyeFov[1].LeftTan,
 *             self.c_data[0].MaxEyeFov[1].RightTan],             # <<<<<<<<<<<<<<
 *             dtype=np.float32)
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(((__pyx_v_self->c_data[0]).MaxEyeFov[1]).RightTan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "psychxr/libovr/_libovr.pyx":2160
 *             dtype=np.float32)
 * 
 *         cdef np.ndarray[float, ndim=1] fov_right = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[1].UpTan,
 *             self.c_data[0].MaxEyeFov[1].DownTan,
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2165
 *             self.c_data[0].MaxEyeFov[1].LeftTan,
 *             self.c_data[0].MaxEyeFov[1].RightTan],
 *             dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return fov_left, fov_right
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 2165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "psychxr/libovr/_libovr.pyx":2160
 *             dtype=np.float32)
 * 
 *         cdef np.ndarray[float, ndim=1] fov_right = np.asarray([             # <<<<<<<<<<<<<<
 *             self.c_data[0].MaxEyeFov[1].UpTan,
 *             self.c_data[0].MaxEyeFov[1].DownTan,
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2160, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fov_right.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_fov_right = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_fov_right.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 2160, __pyx_L1_error)
    } else {__pyx_pybuffernd_fov_right.diminfo[0].strides = __pyx_pybuffernd_fov_right.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_fov_right.diminfo[0].shape = __pyx_pybuffernd_fov_right.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_fov_right = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "psychxr/libovr/_libovr.pyx":2167
 *             dtype=np.float32)
 * 
 *         return fov_left, fov_right             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_fov_left));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fov_left));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_fov_left));
  __Pyx_INCREF(((PyObject *)__pyx_v_fov_right));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fov_right));
  PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_fov_right));
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2143
 * 
 *     @property
 *     def maxEyeFov(self):             # <<<<<<<<<<<<<<
 *         """Maximum eye field-of-views (FOVs) provided by the API.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fov_left.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fov_right.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.maxEyeFov.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fov_left.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fov_right.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fov_left);
  __Pyx_XDECREF((PyObject *)__pyx_v_fov_right);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2170
 * 
 *     @property
 *     def symmetricEyeFov(self):             # <<<<<<<<<<<<<<
 *         """Symmetric field-of-views (FOVs) for mono rendering.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15symmetricEyeFov_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15symmetricEyeFov_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15symmetricEyeFov___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15symmetricEyeFov___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  OVR::FovPort __pyx_v_fov_left;
  OVR::FovPort __pyx_v_fov_right;
  OVR::FovPort __pyx_v_fov_max;
  float __pyx_v_tan_half_fov_horz;
  CYTHON_UNUSED float __pyx_v_tan_half_fov_vert;
  ovrFovPort __pyx_v_fov_both;
  PyArrayObject *__pyx_v_fov_left_out = 0;
  PyArrayObject *__pyx_v_fov_right_out = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_fov_left_out;
  __Pyx_Buffer __pyx_pybuffer_fov_left_out;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_fov_right_out;
  __Pyx_Buffer __pyx_pybuffer_fov_right_out;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_pybuffer_fov_left_out.pybuffer.buf = NULL;
  __pyx_pybuffer_fov_left_out.refcount = 0;
  __pyx_pybuffernd_fov_left_out.data = NULL;
  __pyx_pybuffernd_fov_left_out.rcbuffer = &__pyx_pybuffer_fov_left_out;
  __pyx_pybuffer_fov_right_out.pybuffer.buf = NULL;
  __pyx_pybuffer_fov_right_out.refcount = 0;
  __pyx_pybuffernd_fov_right_out.data = NULL;
  __pyx_pybuffernd_fov_right_out.rcbuffer = &__pyx_pybuffer_fov_right_out;

  /* "psychxr/libovr/_libovr.pyx":2185
 *         """
 *         cdef libovr_math.FovPort fov_left = \
 *             <libovr_math.FovPort>self.c_data[0].DefaultEyeFov[0]             # <<<<<<<<<<<<<<
 *         cdef libovr_math.FovPort fov_right = \
 *             <libovr_math.FovPort>self.c_data[0].DefaultEyeFov[1]
 */
  __pyx_v_fov_left = ((OVR::FovPort)((__pyx_v_self->c_data[0]).DefaultEyeFov[0]));

  /* "psychxr/libovr/_libovr.pyx":2187
 *             <libovr_math.FovPort>self.c_data[0].DefaultEyeFov[0]
 *         cdef libovr_math.FovPort fov_right = \
 *             <libovr_math.FovPort>self.c_data[0].DefaultEyeFov[1]             # <<<<<<<<<<<<<<
 * 
 *         cdef libovr_math.FovPort fov_max = libovr_math.FovPort.Max(
 */
  __pyx_v_fov_right = ((OVR::FovPort)((__pyx_v_self->c_data[0]).DefaultEyeFov[1]));

  /* "psychxr/libovr/_libovr.pyx":2189
 *             <libovr_math.FovPort>self.c_data[0].DefaultEyeFov[1]
 * 
 *         cdef libovr_math.FovPort fov_max = libovr_math.FovPort.Max(             # <<<<<<<<<<<<<<
 *             <libovr_math.FovPort>fov_left, <libovr_math.FovPort>fov_right)
 * 
 */
  __pyx_v_fov_max = OVR::FovPort::Max(((OVR::FovPort)__pyx_v_fov_left), ((OVR::FovPort)__pyx_v_fov_right));

  /* "psychxr/libovr/_libovr.pyx":2192
 *             <libovr_math.FovPort>fov_left, <libovr_math.FovPort>fov_right)
 * 
 *         cdef float tan_half_fov_horz = maxf(fov_max.LeftTan, fov_max.RightTan)             # <<<<<<<<<<<<<<
 *         cdef float tan_half_fov_vert = maxf(fov_max.DownTan, fov_max.UpTan)
 * 
 */
  __pyx_v_tan_half_fov_horz = __pyx_f_7psychxr_6libovr_7_libovr_maxf(__pyx_v_fov_max.LeftTan, __pyx_v_fov_max.RightTan);

  /* "psychxr/libovr/_libovr.pyx":2193
 * 
 *         cdef float tan_half_fov_horz = maxf(fov_max.LeftTan, fov_max.RightTan)
 *         cdef float tan_half_fov_vert = maxf(fov_max.DownTan, fov_max.UpTan)             # <<<<<<<<<<<<<<
 * 
 *         cdef libovr_capi.ovrFovPort fov_both
 */
  __pyx_v_tan_half_fov_vert = __pyx_f_7psychxr_6libovr_7_libovr_maxf(__pyx_v_fov_max.DownTan, __pyx_v_fov_max.UpTan);

  /* "psychxr/libovr/_libovr.pyx":2196
 * 
 *         cdef libovr_capi.ovrFovPort fov_both
 *         fov_both.LeftTan = fov_both.RightTan = tan_half_fov_horz             # <<<<<<<<<<<<<<
 *         fov_both.UpTan = fov_both.DownTan = tan_half_fov_horz
 * 
 */
  __pyx_v_fov_both.LeftTan = __pyx_v_tan_half_fov_horz;
  __pyx_v_fov_both.RightTan = __pyx_v_tan_half_fov_horz;

  /* "psychxr/libovr/_libovr.pyx":2197
 *         cdef libovr_capi.ovrFovPort fov_both
 *         fov_both.LeftTan = fov_both.RightTan = tan_half_fov_horz
 *         fov_both.UpTan = fov_both.DownTan = tan_half_fov_horz             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=1] fov_left_out = np.asarray([
 */
  __pyx_v_fov_both.UpTan = __pyx_v_tan_half_fov_horz;
  __pyx_v_fov_both.DownTan = __pyx_v_tan_half_fov_horz;

  /* "psychxr/libovr/_libovr.pyx":2199
 *         fov_both.UpTan = fov_both.DownTan = tan_half_fov_horz
 * 
 *         cdef np.ndarray[float, ndim=1] fov_left_out = np.asarray([             # <<<<<<<<<<<<<<
 *             fov_both.UpTan,
 *             fov_both.DownTan,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2200
 * 
 *         cdef np.ndarray[float, ndim=1] fov_left_out = np.asarray([
 *             fov_both.UpTan,             # <<<<<<<<<<<<<<
 *             fov_both.DownTan,
 *             fov_both.LeftTan,
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_fov_both.UpTan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":2201
 *         cdef np.ndarray[float, ndim=1] fov_left_out = np.asarray([
 *             fov_both.UpTan,
 *             fov_both.DownTan,             # <<<<<<<<<<<<<<
 *             fov_both.LeftTan,
 *             fov_both.RightTan],
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_fov_both.DownTan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":2202
 *             fov_both.UpTan,
 *             fov_both.DownTan,
 *             fov_both.LeftTan,             # <<<<<<<<<<<<<<
 *             fov_both.RightTan],
 *             dtype=np.float32)
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_fov_both.LeftTan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "psychxr/libovr/_libovr.pyx":2203
 *             fov_both.DownTan,
 *             fov_both.LeftTan,
 *             fov_both.RightTan],             # <<<<<<<<<<<<<<
 *             dtype=np.float32)
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_fov_both.RightTan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "psychxr/libovr/_libovr.pyx":2199
 *         fov_both.UpTan = fov_both.DownTan = tan_half_fov_horz
 * 
 *         cdef np.ndarray[float, ndim=1] fov_left_out = np.asarray([             # <<<<<<<<<<<<<<
 *             fov_both.UpTan,
 *             fov_both.DownTan,
 */
  __pyx_t_6 = PyList_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "psychxr/libovr/_libovr.pyx":2204
 *             fov_both.LeftTan,
 *             fov_both.RightTan],
 *             dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         cdef np.ndarray[float, ndim=1] fov_right_out = np.asarray([
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 2204, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":2199
 *         fov_both.UpTan = fov_both.DownTan = tan_half_fov_horz
 * 
 *         cdef np.ndarray[float, ndim=1] fov_left_out = np.asarray([             # <<<<<<<<<<<<<<
 *             fov_both.UpTan,
 *             fov_both.DownTan,
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2199, __pyx_L1_error)
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fov_left_out.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_fov_left_out = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_fov_left_out.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 2199, __pyx_L1_error)
    } else {__pyx_pybuffernd_fov_left_out.diminfo[0].strides = __pyx_pybuffernd_fov_left_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_fov_left_out.diminfo[0].shape = __pyx_pybuffernd_fov_left_out.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_7 = 0;
  __pyx_v_fov_left_out = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":2206
 *             dtype=np.float32)
 * 
 *         cdef np.ndarray[float, ndim=1] fov_right_out = np.asarray([             # <<<<<<<<<<<<<<
 *             fov_both.UpTan,
 *             fov_both.DownTan,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":2207
 * 
 *         cdef np.ndarray[float, ndim=1] fov_right_out = np.asarray([
 *             fov_both.UpTan,             # <<<<<<<<<<<<<<
 *             fov_both.DownTan,
 *             fov_both.LeftTan,
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_fov_both.UpTan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":2208
 *         cdef np.ndarray[float, ndim=1] fov_right_out = np.asarray([
 *             fov_both.UpTan,
 *             fov_both.DownTan,             # <<<<<<<<<<<<<<
 *             fov_both.LeftTan,
 *             fov_both.RightTan],
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_fov_both.DownTan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "psychxr/libovr/_libovr.pyx":2209
 *             fov_both.UpTan,
 *             fov_both.DownTan,
 *             fov_both.LeftTan,             # <<<<<<<<<<<<<<
 *             fov_both.RightTan],
 *             dtype=np.float32)
 */
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_fov_both.LeftTan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":2210
 *             fov_both.DownTan,
 *             fov_both.LeftTan,
 *             fov_both.RightTan],             # <<<<<<<<<<<<<<
 *             dtype=np.float32)
 * 
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_fov_both.RightTan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "psychxr/libovr/_libovr.pyx":2206
 *             dtype=np.float32)
 * 
 *         cdef np.ndarray[float, ndim=1] fov_right_out = np.asarray([             # <<<<<<<<<<<<<<
 *             fov_both.UpTan,
 *             fov_both.DownTan,
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2211
 *             fov_both.LeftTan,
 *             fov_both.RightTan],
 *             dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         return fov_left_out, fov_right_out
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(0, 2211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "psychxr/libovr/_libovr.pyx":2206
 *             dtype=np.float32)
 * 
 *         cdef np.ndarray[float, ndim=1] fov_right_out = np.asarray([             # <<<<<<<<<<<<<<
 *             fov_both.UpTan,
 *             fov_both.DownTan,
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2206, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fov_right_out.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_float, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_fov_right_out = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_fov_right_out.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 2206, __pyx_L1_error)
    } else {__pyx_pybuffernd_fov_right_out.diminfo[0].strides = __pyx_pybuffernd_fov_right_out.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_fov_right_out.diminfo[0].shape = __pyx_pybuffernd_fov_right_out.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_fov_right_out = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "psychxr/libovr/_libovr.pyx":2213
 *             dtype=np.float32)
 * 
 *         return fov_left_out, fov_right_out             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(((PyObject *)__pyx_v_fov_left_out));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fov_left_out));
  PyTuple_SET_ITEM(__pyx_t_5, 0, ((PyObject *)__pyx_v_fov_left_out));
  __Pyx_INCREF(((PyObject *)__pyx_v_fov_right_out));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_fov_right_out));
  PyTuple_SET_ITEM(__pyx_t_5, 1, ((PyObject *)__pyx_v_fov_right_out));
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2170
 * 
 *     @property
 *     def symmetricEyeFov(self):             # <<<<<<<<<<<<<<
 *         """Symmetric field-of-views (FOVs) for mono rendering.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fov_left_out.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fov_right_out.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.symmetricEyeFov.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fov_left_out.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fov_right_out.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_fov_left_out);
  __Pyx_XDECREF((PyObject *)__pyx_v_fov_right_out);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_6__reduce_cython__[] = "LibOVRHmdInfo.__reduce_cython__(self)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_7__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_6__reduce_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_8__setstate_cython__[] = "LibOVRHmdInfo.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_9__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_8__setstate_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRHmdInfo.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2223
 *     cdef libovr_capi.ovrPerfStatsPerCompositorFrame c_ovrPerfStatsPerCompositorFrame
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.c_data = &self.c_ovrPerfStatsPerCompositorFrame
 * 
 */

/* Python wrapper */
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 1))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat___cinit__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat___cinit__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "psychxr/libovr/_libovr.pyx":2224
 * 
 *     def __cinit__(self, *args, **kwargs):
 *         self.c_data = &self.c_ovrPerfStatsPerCompositorFrame             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->c_data = (&__pyx_v_self->c_ovrPerfStatsPerCompositorFrame);

  /* "psychxr/libovr/_libovr.pyx":2223
 *     cdef libovr_capi.ovrPerfStatsPerCompositorFrame c_ovrPerfStatsPerCompositorFrame
 * 
 *     def __cinit__(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         self.c_data = &self.c_ovrPerfStatsPerCompositorFrame
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2227
 * 
 *     @property
 *     def hmdVsyncIndex(self):             # <<<<<<<<<<<<<<
 *         """Frame index the stats refer to. This increments on the HMD's vertical
 *         synchronization signal.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13hmdVsyncIndex_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13hmdVsyncIndex_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13hmdVsyncIndex___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13hmdVsyncIndex___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2232
 * 
 *         """
 *         return self.c_data[0].HmdVsyncIndex             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->c_data[0]).HmdVsyncIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2227
 * 
 *     @property
 *     def hmdVsyncIndex(self):             # <<<<<<<<<<<<<<
 *         """Frame index the stats refer to. This increments on the HMD's vertical
 *         synchronization signal.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.hmdVsyncIndex.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2235
 * 
 *     @property
 *     def appFrameIndex(self):             # <<<<<<<<<<<<<<
 *         """Increments every time the application submits a frame to the
 *         compositor.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13appFrameIndex_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13appFrameIndex_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13appFrameIndex___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13appFrameIndex___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2240
 * 
 *         """
 *         return self.c_data[0].AppFrameIndex             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->c_data[0]).AppFrameIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2235
 * 
 *     @property
 *     def appFrameIndex(self):             # <<<<<<<<<<<<<<
 *         """Increments every time the application submits a frame to the
 *         compositor.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.appFrameIndex.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2243
 * 
 *     @property
 *     def appDroppedFrameCount(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].AppDroppedFrameCount
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20appDroppedFrameCount_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20appDroppedFrameCount_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20appDroppedFrameCount___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20appDroppedFrameCount___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2244
 *     @property
 *     def appDroppedFrameCount(self):
 *         return self.c_data[0].AppDroppedFrameCount             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->c_data[0]).AppDroppedFrameCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2243
 * 
 *     @property
 *     def appDroppedFrameCount(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].AppDroppedFrameCount
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.appDroppedFrameCount.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2247
 * 
 *     @property
 *     def appQueueAheadTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].AppQueueAheadTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appQueueAheadTime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appQueueAheadTime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appQueueAheadTime___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appQueueAheadTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2248
 *     @property
 *     def appQueueAheadTime(self):
 *         return self.c_data[0].AppQueueAheadTime             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).AppQueueAheadTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2247
 * 
 *     @property
 *     def appQueueAheadTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].AppQueueAheadTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.appQueueAheadTime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2251
 * 
 *     @property
 *     def appCpuElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].AppCpuElapsedTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appCpuElapsedTime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appCpuElapsedTime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appCpuElapsedTime___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appCpuElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2252
 *     @property
 *     def appCpuElapsedTime(self):
 *         return self.c_data[0].AppCpuElapsedTime             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).AppCpuElapsedTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2251
 * 
 *     @property
 *     def appCpuElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].AppCpuElapsedTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.appCpuElapsedTime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2255
 * 
 *     @property
 *     def appGpuElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].AppGpuElapsedTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appGpuElapsedTime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appGpuElapsedTime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appGpuElapsedTime___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appGpuElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2256
 *     @property
 *     def appGpuElapsedTime(self):
 *         return self.c_data[0].AppGpuElapsedTime             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).AppGpuElapsedTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2255
 * 
 *     @property
 *     def appGpuElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].AppGpuElapsedTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.appGpuElapsedTime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2259
 * 
 *     @property
 *     def compositorFrameIndex(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorFrameIndex
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20compositorFrameIndex_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20compositorFrameIndex_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20compositorFrameIndex___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20compositorFrameIndex___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2260
 *     @property
 *     def compositorFrameIndex(self):
 *         return self.c_data[0].CompositorFrameIndex             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->c_data[0]).CompositorFrameIndex); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2260, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2259
 * 
 *     @property
 *     def compositorFrameIndex(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorFrameIndex
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.compositorFrameIndex.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2263
 * 
 *     @property
 *     def compositorLatency(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorLatency
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17compositorLatency_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17compositorLatency_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17compositorLatency___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17compositorLatency___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2264
 *     @property
 *     def compositorLatency(self):
 *         return self.c_data[0].CompositorLatency             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).CompositorLatency); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2264, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2263
 * 
 *     @property
 *     def compositorLatency(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorLatency
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.compositorLatency.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2267
 * 
 *     @property
 *     def compositorCpuElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorCpuElapsedTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorCpuElapsedTime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorCpuElapsedTime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorCpuElapsedTime___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorCpuElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2268
 *     @property
 *     def compositorCpuElapsedTime(self):
 *         return self.c_data[0].CompositorCpuElapsedTime             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).CompositorCpuElapsedTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2267
 * 
 *     @property
 *     def compositorCpuElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorCpuElapsedTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.compositorCpuElapsedTime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2271
 * 
 *     @property
 *     def compositorGpuElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorGpuElapsedTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorGpuElapsedTime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorGpuElapsedTime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorGpuElapsedTime___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorGpuElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2272
 *     @property
 *     def compositorGpuElapsedTime(self):
 *         return self.c_data[0].CompositorGpuElapsedTime             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).CompositorGpuElapsedTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2271
 * 
 *     @property
 *     def compositorGpuElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorGpuElapsedTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.compositorGpuElapsedTime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2275
 * 
 *     @property
 *     def compositorCpuStartToGpuEndElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorCpuStartToGpuEndElapsedTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_37compositorCpuStartToGpuEndElapsedTime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_37compositorCpuStartToGpuEndElapsedTime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_37compositorCpuStartToGpuEndElapsedTime___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_37compositorCpuStartToGpuEndElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2276
 *     @property
 *     def compositorCpuStartToGpuEndElapsedTime(self):
 *         return self.c_data[0].CompositorCpuStartToGpuEndElapsedTime             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).CompositorCpuStartToGpuEndElapsedTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2275
 * 
 *     @property
 *     def compositorCpuStartToGpuEndElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorCpuStartToGpuEndElapsedTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.compositorCpuStartToGpuEndElapsedTime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2279
 * 
 *     @property
 *     def compositorGpuEndToVsyncElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorGpuEndToVsyncElapsedTime
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_34compositorGpuEndToVsyncElapsedTime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_34compositorGpuEndToVsyncElapsedTime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_34compositorGpuEndToVsyncElapsedTime___get__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_34compositorGpuEndToVsyncElapsedTime___get__(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "psychxr/libovr/_libovr.pyx":2280
 *     @property
 *     def compositorGpuEndToVsyncElapsedTime(self):
 *         return self.c_data[0].CompositorGpuEndToVsyncElapsedTime             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c_data[0]).CompositorGpuEndToVsyncElapsedTime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2279
 * 
 *     @property
 *     def compositorGpuEndToVsyncElapsedTime(self):             # <<<<<<<<<<<<<<
 *         return self.c_data[0].CompositorGpuEndToVsyncElapsedTime
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.compositorGpuEndToVsyncElapsedTime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_2__reduce_cython__[] = "LibOVRFrameStat.__reduce_cython__(self)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_3__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_2__reduce_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_4__setstate_cython__[] = "LibOVRFrameStat.__setstate_cython__(self, __pyx_state)";
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_5__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_4__setstate_cython__(((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.LibOVRFrameStat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2283
 * 
 * 
 * def success(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates success."""
 *     return <bint>libovr_capi.OVR_SUCCESS(result)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_3success(PyObject *__pyx_self, PyObject *__pyx_arg_result); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_2success[] = "success(int result)\nCheck if an API return indicates success.";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_3success = {"success", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_3success, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_2success};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_3success(PyObject *__pyx_self, PyObject *__pyx_arg_result) {
  int __pyx_v_result;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("success (wrapper)", 0);
  assert(__pyx_arg_result); {
    __pyx_v_result = __Pyx_PyInt_As_int(__pyx_arg_result); if (unlikely((__pyx_v_result == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2283, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.success", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_2success(__pyx_self, ((int)__pyx_v_result));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_2success(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("success", 0);

  /* "psychxr/libovr/_libovr.pyx":2285
 * def success(int result):
 *     """Check if an API return indicates success."""
 *     return <bint>libovr_capi.OVR_SUCCESS(result)             # <<<<<<<<<<<<<<
 * 
 * def unqualifedSuccess(int result):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_f_7psychxr_6libovr_11libovr_capi_OVR_SUCCESS(__pyx_v_result) != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2283
 * 
 * 
 * def success(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates success."""
 *     return <bint>libovr_capi.OVR_SUCCESS(result)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.success", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2287
 *     return <bint>libovr_capi.OVR_SUCCESS(result)
 * 
 * def unqualifedSuccess(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates unqualified success."""
 *     return <bint>libovr_capi.OVR_UNQUALIFIED_SUCCESS(result)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_5unqualifedSuccess(PyObject *__pyx_self, PyObject *__pyx_arg_result); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_4unqualifedSuccess[] = "unqualifedSuccess(int result)\nCheck if an API return indicates unqualified success.";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_5unqualifedSuccess = {"unqualifedSuccess", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_5unqualifedSuccess, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_4unqualifedSuccess};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_5unqualifedSuccess(PyObject *__pyx_self, PyObject *__pyx_arg_result) {
  int __pyx_v_result;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unqualifedSuccess (wrapper)", 0);
  assert(__pyx_arg_result); {
    __pyx_v_result = __Pyx_PyInt_As_int(__pyx_arg_result); if (unlikely((__pyx_v_result == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2287, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.unqualifedSuccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_4unqualifedSuccess(__pyx_self, ((int)__pyx_v_result));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_4unqualifedSuccess(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("unqualifedSuccess", 0);

  /* "psychxr/libovr/_libovr.pyx":2289
 * def unqualifedSuccess(int result):
 *     """Check if an API return indicates unqualified success."""
 *     return <bint>libovr_capi.OVR_UNQUALIFIED_SUCCESS(result)             # <<<<<<<<<<<<<<
 * 
 * def failure(int result):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_f_7psychxr_6libovr_11libovr_capi_OVR_UNQUALIFIED_SUCCESS(__pyx_v_result) != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2287
 *     return <bint>libovr_capi.OVR_SUCCESS(result)
 * 
 * def unqualifedSuccess(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates unqualified success."""
 *     return <bint>libovr_capi.OVR_UNQUALIFIED_SUCCESS(result)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.unqualifedSuccess", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2291
 *     return <bint>libovr_capi.OVR_UNQUALIFIED_SUCCESS(result)
 * 
 * def failure(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates failure (error)."""
 *     return <bint>libovr_capi.OVR_FAILURE(result)
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_7failure(PyObject *__pyx_self, PyObject *__pyx_arg_result); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_6failure[] = "failure(int result)\nCheck if an API return indicates failure (error).";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_7failure = {"failure", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_7failure, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_6failure};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_7failure(PyObject *__pyx_self, PyObject *__pyx_arg_result) {
  int __pyx_v_result;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("failure (wrapper)", 0);
  assert(__pyx_arg_result); {
    __pyx_v_result = __Pyx_PyInt_As_int(__pyx_arg_result); if (unlikely((__pyx_v_result == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2291, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.failure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_6failure(__pyx_self, ((int)__pyx_v_result));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_6failure(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_result) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("failure", 0);

  /* "psychxr/libovr/_libovr.pyx":2293
 * def failure(int result):
 *     """Check if an API return indicates failure (error)."""
 *     return <bint>libovr_capi.OVR_FAILURE(result)             # <<<<<<<<<<<<<<
 * 
 * def isOculusServiceRunning(int timeoutMS=100):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_f_7psychxr_6libovr_11libovr_capi_OVR_FAILURE(__pyx_v_result) != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2291
 *     return <bint>libovr_capi.OVR_UNQUALIFIED_SUCCESS(result)
 * 
 * def failure(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates failure (error)."""
 *     return <bint>libovr_capi.OVR_FAILURE(result)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.failure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2295
 *     return <bint>libovr_capi.OVR_FAILURE(result)
 * 
 * def isOculusServiceRunning(int timeoutMS=100):             # <<<<<<<<<<<<<<
 *     """Check if the Oculus Runtime is loaded and running.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_9isOculusServiceRunning(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_8isOculusServiceRunning[] = "isOculusServiceRunning(int timeoutMS=100)\nCheck if the Oculus Runtime is loaded and running.\n\n    Parameters\n    ----------\n    timeout_ms : int\n        Timeout in milliseconds.\n\n    Returns\n    -------\n    bool\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_9isOculusServiceRunning = {"isOculusServiceRunning", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_9isOculusServiceRunning, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_8isOculusServiceRunning};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_9isOculusServiceRunning(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_timeoutMS;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isOculusServiceRunning (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timeoutMS,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timeoutMS);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isOculusServiceRunning") < 0)) __PYX_ERR(0, 2295, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_timeoutMS = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_timeoutMS == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2295, __pyx_L3_error)
    } else {
      __pyx_v_timeoutMS = ((int)0x64);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isOculusServiceRunning", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2295, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.isOculusServiceRunning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_8isOculusServiceRunning(__pyx_self, __pyx_v_timeoutMS);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_8isOculusServiceRunning(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_timeoutMS) {
  ovrDetectResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isOculusServiceRunning", 0);

  /* "psychxr/libovr/_libovr.pyx":2308
 * 
 *     """
 *     cdef libovr_capi.ovrDetectResult result = libovr_capi.ovr_Detect(             # <<<<<<<<<<<<<<
 *         timeoutMS)
 * 
 */
  __pyx_v_result = ovr_Detect(__pyx_v_timeoutMS);

  /* "psychxr/libovr/_libovr.pyx":2311
 *         timeoutMS)
 * 
 *     return <bint>result.IsOculusServiceRunning             # <<<<<<<<<<<<<<
 * 
 * def isHmdConnected(int timeout_ms=100):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_result.IsOculusServiceRunning != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2295
 *     return <bint>libovr_capi.OVR_FAILURE(result)
 * 
 * def isOculusServiceRunning(int timeoutMS=100):             # <<<<<<<<<<<<<<
 *     """Check if the Oculus Runtime is loaded and running.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.isOculusServiceRunning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2313
 *     return <bint>result.IsOculusServiceRunning
 * 
 * def isHmdConnected(int timeout_ms=100):             # <<<<<<<<<<<<<<
 *     """Check if an HMD is connected.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_11isHmdConnected(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_10isHmdConnected[] = "isHmdConnected(int timeout_ms=100)\nCheck if an HMD is connected.\n\n    Parameters\n    ----------\n    timeout_ms : int\n        Timeout in milliseconds.\n\n    Returns\n    -------\n    bool\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_11isHmdConnected = {"isHmdConnected", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_11isHmdConnected, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_10isHmdConnected};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_11isHmdConnected(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_timeout_ms;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("isHmdConnected (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timeout_ms,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_timeout_ms);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "isHmdConnected") < 0)) __PYX_ERR(0, 2313, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_timeout_ms = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_timeout_ms == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2313, __pyx_L3_error)
    } else {
      __pyx_v_timeout_ms = ((int)0x64);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("isHmdConnected", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2313, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.isHmdConnected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_10isHmdConnected(__pyx_self, __pyx_v_timeout_ms);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_10isHmdConnected(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_timeout_ms) {
  ovrDetectResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("isHmdConnected", 0);

  /* "psychxr/libovr/_libovr.pyx":2326
 * 
 *     """
 *     cdef libovr_capi.ovrDetectResult result = libovr_capi.ovr_Detect(             # <<<<<<<<<<<<<<
 *         timeout_ms)
 * 
 */
  __pyx_v_result = ovr_Detect(__pyx_v_timeout_ms);

  /* "psychxr/libovr/_libovr.pyx":2329
 *         timeout_ms)
 * 
 *     return <bint>result.IsOculusHMDConnected             # <<<<<<<<<<<<<<
 * 
 * def getHmdInfo():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_result.IsOculusHMDConnected != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2313
 *     return <bint>result.IsOculusServiceRunning
 * 
 * def isHmdConnected(int timeout_ms=100):             # <<<<<<<<<<<<<<
 *     """Check if an HMD is connected.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.isHmdConnected", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2331
 *     return <bint>result.IsOculusHMDConnected
 * 
 * def getHmdInfo():             # <<<<<<<<<<<<<<
 *     """Get HMD information.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13getHmdInfo(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_12getHmdInfo[] = "getHmdInfo()\nGet HMD information.\n\n    Returns\n    -------\n    LibOVRHmdInfo\n        HMD information.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_13getHmdInfo = {"getHmdInfo", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_13getHmdInfo, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_12getHmdInfo};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_13getHmdInfo(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getHmdInfo (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_12getHmdInfo(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_12getHmdInfo(CYTHON_UNUSED PyObject *__pyx_self) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *__pyx_v_toReturn = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getHmdInfo", 0);

  /* "psychxr/libovr/_libovr.pyx":2341
 *     """
 *     global _hmdDesc
 *     cdef LibOVRHmdInfo toReturn = LibOVRHmdInfo()             # <<<<<<<<<<<<<<
 *     toReturn.c_data[0] = _hmdDesc
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRHmdInfo)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_toReturn = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2342
 *     global _hmdDesc
 *     cdef LibOVRHmdInfo toReturn = LibOVRHmdInfo()
 *     toReturn.c_data[0] = _hmdDesc             # <<<<<<<<<<<<<<
 * 
 *     return toReturn
 */
  (__pyx_v_toReturn->c_data[0]) = __pyx_v_7psychxr_6libovr_7_libovr__hmdDesc;

  /* "psychxr/libovr/_libovr.pyx":2344
 *     toReturn.c_data[0] = _hmdDesc
 * 
 *     return toReturn             # <<<<<<<<<<<<<<
 * 
 * def getUserHeight():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_toReturn));
  __pyx_r = ((PyObject *)__pyx_v_toReturn);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2331
 *     return <bint>result.IsOculusHMDConnected
 * 
 * def getHmdInfo():             # <<<<<<<<<<<<<<
 *     """Get HMD information.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getHmdInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_toReturn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2346
 *     return toReturn
 * 
 * def getUserHeight():             # <<<<<<<<<<<<<<
 *     """User's calibrated height in meters.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15getUserHeight(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_14getUserHeight[] = "getUserHeight()\nUser's calibrated height in meters.\n\n    Returns\n    -------\n    float\n        Distance from floor to the top of the user's head in meters reported\n        by LibOVR. If not set, the default value is 1.778 meters.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_15getUserHeight = {"getUserHeight", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_15getUserHeight, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_14getUserHeight};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_15getUserHeight(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getUserHeight (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_14getUserHeight(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_14getUserHeight(CYTHON_UNUSED PyObject *__pyx_self) {
  float __pyx_v_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getUserHeight", 0);

  /* "psychxr/libovr/_libovr.pyx":2357
 *     """
 *     global _ptrSession
 *     cdef float to_return = libovr_capi.ovr_GetFloat(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         b"PlayerHeight",
 */
  __pyx_v_to_return = ovr_GetFloat(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((char const *)"PlayerHeight"), ((float)1.778));

  /* "psychxr/libovr/_libovr.pyx":2362
 *         <float> 1.778)
 * 
 *     return to_return             # <<<<<<<<<<<<<<
 * 
 * def getEyeHeight():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_to_return); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2346
 *     return toReturn
 * 
 * def getUserHeight():             # <<<<<<<<<<<<<<
 *     """User's calibrated height in meters.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getUserHeight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2364
 *     return to_return
 * 
 * def getEyeHeight():             # <<<<<<<<<<<<<<
 *     """Calibrated eye height from floor in meters.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17getEyeHeight(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_16getEyeHeight[] = "getEyeHeight()\nCalibrated eye height from floor in meters.\n\n    Returns\n    -------\n    float\n        Distance from floor to the user's eye level in meters.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_17getEyeHeight = {"getEyeHeight", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_17getEyeHeight, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_16getEyeHeight};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_17getEyeHeight(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEyeHeight (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_16getEyeHeight(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_16getEyeHeight(CYTHON_UNUSED PyObject *__pyx_self) {
  float __pyx_v_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getEyeHeight", 0);

  /* "psychxr/libovr/_libovr.pyx":2374
 *     """
 *     global _ptrSession
 *     cdef float to_return = libovr_capi.ovr_GetFloat(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         b"EyeHeight",
 */
  __pyx_v_to_return = ovr_GetFloat(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((char const *)"EyeHeight"), ((float)1.675));

  /* "psychxr/libovr/_libovr.pyx":2379
 *         <float> 1.675)
 * 
 *     return to_return             # <<<<<<<<<<<<<<
 * 
 * def getNeckEyeDist():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_to_return); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2364
 *     return to_return
 * 
 * def getEyeHeight():             # <<<<<<<<<<<<<<
 *     """Calibrated eye height from floor in meters.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeHeight", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2381
 *     return to_return
 * 
 * def getNeckEyeDist():             # <<<<<<<<<<<<<<
 *     """Distance from the neck to eyes in meters.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19getNeckEyeDist(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_18getNeckEyeDist[] = "getNeckEyeDist()\nDistance from the neck to eyes in meters.\n\n    Returns\n    -------\n    float\n        Distance in meters.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_19getNeckEyeDist = {"getNeckEyeDist", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_19getNeckEyeDist, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_18getNeckEyeDist};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_19getNeckEyeDist(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getNeckEyeDist (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_18getNeckEyeDist(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_18getNeckEyeDist(CYTHON_UNUSED PyObject *__pyx_self) {
  float __pyx_v_vals[2];
  CYTHON_UNUSED unsigned int __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getNeckEyeDist", 0);

  /* "psychxr/libovr/_libovr.pyx":2393
 *     cdef float vals[2]
 * 
 *     cdef unsigned int ret = libovr_capi.ovr_GetFloatArray(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         b"NeckEyeDistance",
 */
  __pyx_v_ret = ovr_GetFloatArray(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((char const *)"NeckEyeDistance"), __pyx_v_vals, ((unsigned int)2));

  /* "psychxr/libovr/_libovr.pyx":2399
 *         <unsigned int>2)
 * 
 *     return <float> vals[0], <float> vals[1]             # <<<<<<<<<<<<<<
 * 
 * def getEyeToNoseDist():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((float)(__pyx_v_vals[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(((float)(__pyx_v_vals[1]))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2381
 *     return to_return
 * 
 * def getNeckEyeDist():             # <<<<<<<<<<<<<<
 *     """Distance from the neck to eyes in meters.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getNeckEyeDist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2401
 *     return <float> vals[0], <float> vals[1]
 * 
 * def getEyeToNoseDist():             # <<<<<<<<<<<<<<
 *     """Distance between the nose and eyes in meters.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_21getEyeToNoseDist(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_20getEyeToNoseDist[] = "getEyeToNoseDist()\nDistance between the nose and eyes in meters.\n\n    Returns\n    -------\n    float\n        Distance in meters.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_21getEyeToNoseDist = {"getEyeToNoseDist", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_21getEyeToNoseDist, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_20getEyeToNoseDist};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_21getEyeToNoseDist(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEyeToNoseDist (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_20getEyeToNoseDist(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_20getEyeToNoseDist(CYTHON_UNUSED PyObject *__pyx_self) {
  float __pyx_v_vals[2];
  CYTHON_UNUSED unsigned int __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getEyeToNoseDist", 0);

  /* "psychxr/libovr/_libovr.pyx":2413
 *     cdef float vals[2]
 * 
 *     cdef unsigned int ret = libovr_capi.ovr_GetFloatArray(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         b"EyeToNoseDist",
 */
  __pyx_v_ret = ovr_GetFloatArray(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((char const *)"EyeToNoseDist"), __pyx_v_vals, ((unsigned int)2));

  /* "psychxr/libovr/_libovr.pyx":2419
 *         <unsigned int> 2)
 * 
 *     return <float>vals[0], <float> vals[1]             # <<<<<<<<<<<<<<
 * 
 * def initialize(bint focusAware=False, int connectionTimeout=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((float)(__pyx_v_vals[0]))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(((float)(__pyx_v_vals[1]))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2401
 *     return <float> vals[0], <float> vals[1]
 * 
 * def getEyeToNoseDist():             # <<<<<<<<<<<<<<
 *     """Distance between the nose and eyes in meters.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeToNoseDist", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2421
 *     return <float>vals[0], <float> vals[1]
 * 
 * def initialize(bint focusAware=False, int connectionTimeout=0):             # <<<<<<<<<<<<<<
 *     """Initialize the session.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_23initialize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_22initialize[] = "initialize(bool focusAware=False, int connectionTimeout=0)\nInitialize the session.\n\n    Parameters\n    ----------\n    focusAware : bool\n        Client is focus aware.\n    connectionTimeout : bool\n        Timeout in milliseconds for connecting to the server.\n\n    Returns\n    -------\n    int\n        Return code of the LibOVR API call 'ovr_Initialize'. Returns\n        LIBOVR_SUCCESS if completed without errors. In the event of an\n        error, possible return values are:\n\n        - :data:`LIBOVR_ERROR_INITIALIZE`: Initialization error.\n        - :data:`LIBOVR_ERROR_LIB_LOAD`:  Failed to load LibOVRRT.\n        - :data:`LIBOVR_ERROR_LIB_VERSION`:  LibOVRRT version incompatible.\n        - :data:`LIBOVR_ERROR_SERVICE_CONNECTION`:  Cannot connect to OVR service.\n        - :data:`LIBOVR_ERROR_SERVICE_VERSION`: OVR service version is incompatible.\n        - :data:`LIBOVR_ERROR_INCOMPATIBLE_OS`: Operating system version is incompatible.\n        - :data:`LIBOVR_ERROR_DISPLAY_INIT`: Unable to initialize the HMD.\n        - :data:`LIBOVR_ERROR_SERVER_START`:  Cannot start a server.\n        - :data:`LIBOVR_ERROR_REINITIALIZATION`: Reinitialized with a different version.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_23initialize = {"initialize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_23initialize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_22initialize};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_23initialize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_focusAware;
  int __pyx_v_connectionTimeout;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("initialize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_focusAware,&__pyx_n_s_connectionTimeout,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_focusAware);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_connectionTimeout);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "initialize") < 0)) __PYX_ERR(0, 2421, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_focusAware = __Pyx_PyObject_IsTrue(values[0]); if (unlikely((__pyx_v_focusAware == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2421, __pyx_L3_error)
    } else {
      __pyx_v_focusAware = ((int)0);
    }
    if (values[1]) {
      __pyx_v_connectionTimeout = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_connectionTimeout == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2421, __pyx_L3_error)
    } else {
      __pyx_v_connectionTimeout = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("initialize", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2421, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_22initialize(__pyx_self, __pyx_v_focusAware, __pyx_v_connectionTimeout);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_22initialize(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_focusAware, int __pyx_v_connectionTimeout) {
  int32_t __pyx_v_flags;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("initialize", 0);

  /* "psychxr/libovr/_libovr.pyx":2449
 * 
 *     """
 *     cdef int32_t flags = libovr_capi.ovrInit_RequestVersion             # <<<<<<<<<<<<<<
 *     if focusAware is True:
 *         flags |= libovr_capi.ovrInit_FocusAware
 */
  __pyx_v_flags = ovrInit_RequestVersion;

  /* "psychxr/libovr/_libovr.pyx":2450
 *     """
 *     cdef int32_t flags = libovr_capi.ovrInit_RequestVersion
 *     if focusAware is True:             # <<<<<<<<<<<<<<
 *         flags |= libovr_capi.ovrInit_FocusAware
 * 
 */
  __pyx_t_1 = ((__pyx_v_focusAware == 1) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":2451
 *     cdef int32_t flags = libovr_capi.ovrInit_RequestVersion
 *     if focusAware is True:
 *         flags |= libovr_capi.ovrInit_FocusAware             # <<<<<<<<<<<<<<
 * 
 *     #if debug is True:
 */
    __pyx_v_flags = (__pyx_v_flags | ovrInit_FocusAware);

    /* "psychxr/libovr/_libovr.pyx":2450
 *     """
 *     cdef int32_t flags = libovr_capi.ovrInit_RequestVersion
 *     if focusAware is True:             # <<<<<<<<<<<<<<
 *         flags |= libovr_capi.ovrInit_FocusAware
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":2456
 *     #    flags |= libovr_capi.ovrInit_Debug
 *     global _initParams
 *     _initParams.Flags = flags             # <<<<<<<<<<<<<<
 *     _initParams.RequestedMinorVersion = libovr_capi.OVR_MINOR_VERSION
 *     _initParams.LogCallback = NULL  # not used yet
 */
  __pyx_v_7psychxr_6libovr_7_libovr__initParams.Flags = __pyx_v_flags;

  /* "psychxr/libovr/_libovr.pyx":2457
 *     global _initParams
 *     _initParams.Flags = flags
 *     _initParams.RequestedMinorVersion = libovr_capi.OVR_MINOR_VERSION             # <<<<<<<<<<<<<<
 *     _initParams.LogCallback = NULL  # not used yet
 *     _initParams.ConnectionTimeoutMS = <uint32_t>connectionTimeout
 */
  __pyx_v_7psychxr_6libovr_7_libovr__initParams.RequestedMinorVersion = OVR_MINOR_VERSION;

  /* "psychxr/libovr/_libovr.pyx":2458
 *     _initParams.Flags = flags
 *     _initParams.RequestedMinorVersion = libovr_capi.OVR_MINOR_VERSION
 *     _initParams.LogCallback = NULL  # not used yet             # <<<<<<<<<<<<<<
 *     _initParams.ConnectionTimeoutMS = <uint32_t>connectionTimeout
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_Initialize(
 */
  __pyx_v_7psychxr_6libovr_7_libovr__initParams.LogCallback = NULL;

  /* "psychxr/libovr/_libovr.pyx":2459
 *     _initParams.RequestedMinorVersion = libovr_capi.OVR_MINOR_VERSION
 *     _initParams.LogCallback = NULL  # not used yet
 *     _initParams.ConnectionTimeoutMS = <uint32_t>connectionTimeout             # <<<<<<<<<<<<<<
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_Initialize(
 *         &_initParams)
 */
  __pyx_v_7psychxr_6libovr_7_libovr__initParams.ConnectionTimeoutMS = ((uint32_t)__pyx_v_connectionTimeout);

  /* "psychxr/libovr/_libovr.pyx":2460
 *     _initParams.LogCallback = NULL  # not used yet
 *     _initParams.ConnectionTimeoutMS = <uint32_t>connectionTimeout
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_Initialize(             # <<<<<<<<<<<<<<
 *         &_initParams)
 * 
 */
  __pyx_v_result = ovr_Initialize((&__pyx_v_7psychxr_6libovr_7_libovr__initParams));

  /* "psychxr/libovr/_libovr.pyx":2463
 *         &_initParams)
 * 
 *     return result  # failed to initalize, return error code             # <<<<<<<<<<<<<<
 * 
 * def create():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2421
 *     return <float>vals[0], <float> vals[1]
 * 
 * def initialize(bint focusAware=False, int connectionTimeout=0):             # <<<<<<<<<<<<<<
 *     """Initialize the session.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("psychxr.libovr._libovr.initialize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2465
 *     return result  # failed to initalize, return error code
 * 
 * def create():             # <<<<<<<<<<<<<<
 *     """Create a new session. Control is handed over to the application from
 *     Oculus Home.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_25create(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_24create[] = "create()\nCreate a new session. Control is handed over to the application from\n    Oculus Home.\n\n    Starting a session will initialize and create a new session. Afterwards\n    API functions will return valid values.\n\n    Returns\n    -------\n    int\n        Result of the 'ovr_Create' API call. A session was successfully\n        created if the result is :data:`LIBOVR_SUCCESS`.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_25create = {"create", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_25create, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_24create};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_25create(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_24create(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_24create(CYTHON_UNUSED PyObject *__pyx_self) {
  ovrResult __pyx_v_result;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  ovrEyeType __pyx_t_6;
  ovrEyeType __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  ovrFovPort __pyx_t_9;
  __Pyx_RefNannySetupContext("create", 0);

  /* "psychxr/libovr/_libovr.pyx":2485
 *     global _eyeRenderDesc
 * 
 *     result = libovr_capi.ovr_Create(&_ptrSession, &_gfxLuid)             # <<<<<<<<<<<<<<
 *     check_result(result)
 *     if libovr_capi.OVR_FAILURE(result):
 */
  __pyx_v_result = ovr_Create((&__pyx_v_7psychxr_6libovr_7_libovr__ptrSession), (&__pyx_v_7psychxr_6libovr_7_libovr__gfxLuid));

  /* "psychxr/libovr/_libovr.pyx":2486
 * 
 *     result = libovr_capi.ovr_Create(&_ptrSession, &_gfxLuid)
 *     check_result(result)             # <<<<<<<<<<<<<<
 *     if libovr_capi.OVR_FAILURE(result):
 *         return result  # failed to create session, return error code
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_check_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2487
 *     result = libovr_capi.ovr_Create(&_ptrSession, &_gfxLuid)
 *     check_result(result)
 *     if libovr_capi.OVR_FAILURE(result):             # <<<<<<<<<<<<<<
 *         return result  # failed to create session, return error code
 * 
 */
  __pyx_t_5 = (__pyx_f_7psychxr_6libovr_11libovr_capi_OVR_FAILURE(__pyx_v_result) != 0);
  if (__pyx_t_5) {

    /* "psychxr/libovr/_libovr.pyx":2488
 *     check_result(result)
 *     if libovr_capi.OVR_FAILURE(result):
 *         return result  # failed to create session, return error code             # <<<<<<<<<<<<<<
 * 
 *     # if we got to this point, everything should be fine
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":2487
 *     result = libovr_capi.ovr_Create(&_ptrSession, &_gfxLuid)
 *     check_result(result)
 *     if libovr_capi.OVR_FAILURE(result):             # <<<<<<<<<<<<<<
 *         return result  # failed to create session, return error code
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":2492
 *     # if we got to this point, everything should be fine
 *     # get HMD descriptor
 *     _hmdDesc = libovr_capi.ovr_GetHmdDesc(_ptrSession)             # <<<<<<<<<<<<<<
 * 
 *     # configure the eye render descriptor to use the recommended FOV, this
 */
  __pyx_v_7psychxr_6libovr_7_libovr__hmdDesc = ovr_GetHmdDesc(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession);

  /* "psychxr/libovr/_libovr.pyx":2496
 *     # configure the eye render descriptor to use the recommended FOV, this
 *     # can be changed later
 *     cdef Py_ssize_t i = 0             # <<<<<<<<<<<<<<
 *     for i in range(libovr_capi.ovrEye_Count):
 *         _eyeRenderDesc[i] = libovr_capi.ovr_GetRenderDesc(
 */
  __pyx_v_i = 0;

  /* "psychxr/libovr/_libovr.pyx":2497
 *     # can be changed later
 *     cdef Py_ssize_t i = 0
 *     for i in range(libovr_capi.ovrEye_Count):             # <<<<<<<<<<<<<<
 *         _eyeRenderDesc[i] = libovr_capi.ovr_GetRenderDesc(
 *             _ptrSession,
 */
  __pyx_t_6 = ovrEye_Count;
  __pyx_t_7 = __pyx_t_6;
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {
    __pyx_v_i = __pyx_t_8;

    /* "psychxr/libovr/_libovr.pyx":2498
 *     cdef Py_ssize_t i = 0
 *     for i in range(libovr_capi.ovrEye_Count):
 *         _eyeRenderDesc[i] = libovr_capi.ovr_GetRenderDesc(             # <<<<<<<<<<<<<<
 *             _ptrSession,
 *             <libovr_capi.ovrEyeType>i,
 */
    (__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_i]) = ovr_GetRenderDesc(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((ovrEyeType)__pyx_v_i), (__pyx_v_7psychxr_6libovr_7_libovr__hmdDesc.DefaultEyeFov[__pyx_v_i]));

    /* "psychxr/libovr/_libovr.pyx":2503
 *             _hmdDesc.DefaultEyeFov[i])
 * 
 *         _eyeLayer.Fov[i] = _eyeRenderDesc[i].Fov             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_t_9 = (__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_i]).Fov;
    (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Fov[__pyx_v_i]) = __pyx_t_9;
  }

  /* "psychxr/libovr/_libovr.pyx":2505
 *         _eyeLayer.Fov[i] = _eyeRenderDesc[i].Fov
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def destroyTextureSwapChain(int swapChain):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2465
 *     return result  # failed to initalize, return error code
 * 
 * def create():             # <<<<<<<<<<<<<<
 *     """Create a new session. Control is handed over to the application from
 *     Oculus Home.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("psychxr.libovr._libovr.create", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2507
 *     return result
 * 
 * def destroyTextureSwapChain(int swapChain):             # <<<<<<<<<<<<<<
 *     """Destroy a texture swap chain."""
 *     global _ptrSession
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_27destroyTextureSwapChain(PyObject *__pyx_self, PyObject *__pyx_arg_swapChain); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_26destroyTextureSwapChain[] = "destroyTextureSwapChain(int swapChain)\nDestroy a texture swap chain.";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_27destroyTextureSwapChain = {"destroyTextureSwapChain", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_27destroyTextureSwapChain, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_26destroyTextureSwapChain};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_27destroyTextureSwapChain(PyObject *__pyx_self, PyObject *__pyx_arg_swapChain) {
  int __pyx_v_swapChain;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroyTextureSwapChain (wrapper)", 0);
  assert(__pyx_arg_swapChain); {
    __pyx_v_swapChain = __Pyx_PyInt_As_int(__pyx_arg_swapChain); if (unlikely((__pyx_v_swapChain == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2507, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.destroyTextureSwapChain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_26destroyTextureSwapChain(__pyx_self, ((int)__pyx_v_swapChain));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_26destroyTextureSwapChain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_swapChain) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroyTextureSwapChain", 0);

  /* "psychxr/libovr/_libovr.pyx":2511
 *     global _ptrSession
 *     global _swapChains
 *     libovr_capi.ovr_DestroyTextureSwapChain(_ptrSession, _swapChains[swapChain])             # <<<<<<<<<<<<<<
 *     _swapChains[swapChain] = NULL
 * 
 */
  ovr_DestroyTextureSwapChain(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (__pyx_v_7psychxr_6libovr_7_libovr__swapChains[__pyx_v_swapChain]));

  /* "psychxr/libovr/_libovr.pyx":2512
 *     global _swapChains
 *     libovr_capi.ovr_DestroyTextureSwapChain(_ptrSession, _swapChains[swapChain])
 *     _swapChains[swapChain] = NULL             # <<<<<<<<<<<<<<
 * 
 * def destroyMirrorTexture():
 */
  (__pyx_v_7psychxr_6libovr_7_libovr__swapChains[__pyx_v_swapChain]) = NULL;

  /* "psychxr/libovr/_libovr.pyx":2507
 *     return result
 * 
 * def destroyTextureSwapChain(int swapChain):             # <<<<<<<<<<<<<<
 *     """Destroy a texture swap chain."""
 *     global _ptrSession
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2514
 *     _swapChains[swapChain] = NULL
 * 
 * def destroyMirrorTexture():             # <<<<<<<<<<<<<<
 *     """Destroy the mirror texture."""
 *     global _ptrSession
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_29destroyMirrorTexture(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_28destroyMirrorTexture[] = "destroyMirrorTexture()\nDestroy the mirror texture.";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_29destroyMirrorTexture = {"destroyMirrorTexture", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_29destroyMirrorTexture, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_28destroyMirrorTexture};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_29destroyMirrorTexture(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroyMirrorTexture (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_28destroyMirrorTexture(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_28destroyMirrorTexture(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("destroyMirrorTexture", 0);

  /* "psychxr/libovr/_libovr.pyx":2518
 *     global _ptrSession
 *     global _mirrorTexture
 *     if _mirrorTexture != NULL:             # <<<<<<<<<<<<<<
 *         libovr_capi.ovr_DestroyMirrorTexture(_ptrSession, _mirrorTexture)
 * 
 */
  __pyx_t_1 = ((__pyx_v_7psychxr_6libovr_7_libovr__mirrorTexture != NULL) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":2519
 *     global _mirrorTexture
 *     if _mirrorTexture != NULL:
 *         libovr_capi.ovr_DestroyMirrorTexture(_ptrSession, _mirrorTexture)             # <<<<<<<<<<<<<<
 * 
 * def destroy():
 */
    ovr_DestroyMirrorTexture(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, __pyx_v_7psychxr_6libovr_7_libovr__mirrorTexture);

    /* "psychxr/libovr/_libovr.pyx":2518
 *     global _ptrSession
 *     global _mirrorTexture
 *     if _mirrorTexture != NULL:             # <<<<<<<<<<<<<<
 *         libovr_capi.ovr_DestroyMirrorTexture(_ptrSession, _mirrorTexture)
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":2514
 *     _swapChains[swapChain] = NULL
 * 
 * def destroyMirrorTexture():             # <<<<<<<<<<<<<<
 *     """Destroy the mirror texture."""
 *     global _ptrSession
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2521
 *         libovr_capi.ovr_DestroyMirrorTexture(_ptrSession, _mirrorTexture)
 * 
 * def destroy():             # <<<<<<<<<<<<<<
 *     """Destroy a session.
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_31destroy(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_30destroy[] = "destroy()\nDestroy a session.\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_31destroy = {"destroy", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_31destroy, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_30destroy};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_31destroy(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_30destroy(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_30destroy(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("destroy", 0);

  /* "psychxr/libovr/_libovr.pyx":2527
 *     global _eyeLayer
 *     # null eye textures in eye layer
 *     _eyeLayer.ColorTexture[0] = _eyeLayer.ColorTexture[1] = NULL             # <<<<<<<<<<<<<<
 * 
 *     # destroy the current session and shutdown
 */
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.ColorTexture[0]) = NULL;
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.ColorTexture[1]) = NULL;

  /* "psychxr/libovr/_libovr.pyx":2530
 * 
 *     # destroy the current session and shutdown
 *     libovr_capi.ovr_Destroy(_ptrSession)             # <<<<<<<<<<<<<<
 * 
 * def shutdown():
 */
  ovr_Destroy(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession);

  /* "psychxr/libovr/_libovr.pyx":2521
 *         libovr_capi.ovr_DestroyMirrorTexture(_ptrSession, _mirrorTexture)
 * 
 * def destroy():             # <<<<<<<<<<<<<<
 *     """Destroy a session.
 *     """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2532
 *     libovr_capi.ovr_Destroy(_ptrSession)
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """End the current session.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_33shutdown(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_32shutdown[] = "shutdown()\nEnd the current session.\n\n    Clean-up routines are executed that destroy all swap chains and mirror\n    texture buffers, afterwards control is returned to Oculus Home. This\n    must be called after every successful 'initialize' call.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_33shutdown = {"shutdown", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_33shutdown, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_32shutdown};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_33shutdown(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shutdown (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_32shutdown(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_32shutdown(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("shutdown", 0);

  /* "psychxr/libovr/_libovr.pyx":2540
 * 
 *     """
 *     libovr_capi.ovr_Shutdown()             # <<<<<<<<<<<<<<
 * 
 * def getGraphicsLUID():
 */
  ovr_Shutdown();

  /* "psychxr/libovr/_libovr.pyx":2532
 *     libovr_capi.ovr_Destroy(_ptrSession)
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """End the current session.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2542
 *     libovr_capi.ovr_Shutdown()
 * 
 * def getGraphicsLUID():             # <<<<<<<<<<<<<<
 *     """The graphics device LUID."""
 *     global _gfxLuid
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_35getGraphicsLUID(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_34getGraphicsLUID[] = "getGraphicsLUID()\nThe graphics device LUID.";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_35getGraphicsLUID = {"getGraphicsLUID", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_35getGraphicsLUID, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_34getGraphicsLUID};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_35getGraphicsLUID(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getGraphicsLUID (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_34getGraphicsLUID(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_34getGraphicsLUID(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getGraphicsLUID", 0);

  /* "psychxr/libovr/_libovr.pyx":2545
 *     """The graphics device LUID."""
 *     global _gfxLuid
 *     return _gfxLuid.Reserved.decode('utf-8')             # <<<<<<<<<<<<<<
 * 
 * def setHighQuality(bint enable):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_7psychxr_6libovr_7_libovr__gfxLuid.Reserved;
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_t_1, 0, strlen(__pyx_t_1), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2542
 *     libovr_capi.ovr_Shutdown()
 * 
 * def getGraphicsLUID():             # <<<<<<<<<<<<<<
 *     """The graphics device LUID."""
 *     global _gfxLuid
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getGraphicsLUID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2547
 *     return _gfxLuid.Reserved.decode('utf-8')
 * 
 * def setHighQuality(bint enable):             # <<<<<<<<<<<<<<
 *     """Enable high quality mode.
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_37setHighQuality(PyObject *__pyx_self, PyObject *__pyx_arg_enable); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_36setHighQuality[] = "setHighQuality(bool enable)\nEnable high quality mode.\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_37setHighQuality = {"setHighQuality", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_37setHighQuality, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_36setHighQuality};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_37setHighQuality(PyObject *__pyx_self, PyObject *__pyx_arg_enable) {
  int __pyx_v_enable;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setHighQuality (wrapper)", 0);
  assert(__pyx_arg_enable); {
    __pyx_v_enable = __Pyx_PyObject_IsTrue(__pyx_arg_enable); if (unlikely((__pyx_v_enable == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2547, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.setHighQuality", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_36setHighQuality(__pyx_self, ((int)__pyx_v_enable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_36setHighQuality(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_enable) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setHighQuality", 0);

  /* "psychxr/libovr/_libovr.pyx":2551
 *     """
 *     global _eyeLayer
 *     if enable:             # <<<<<<<<<<<<<<
 *         _eyeLayer.Header.Flags |= libovr_capi.ovrLayerFlag_HighQuality
 *     else:
 */
  __pyx_t_1 = (__pyx_v_enable != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":2552
 *     global _eyeLayer
 *     if enable:
 *         _eyeLayer.Header.Flags |= libovr_capi.ovrLayerFlag_HighQuality             # <<<<<<<<<<<<<<
 *     else:
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HighQuality
 */
    __pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Header.Flags = (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Header.Flags | ovrLayerFlag_HighQuality);

    /* "psychxr/libovr/_libovr.pyx":2551
 *     """
 *     global _eyeLayer
 *     if enable:             # <<<<<<<<<<<<<<
 *         _eyeLayer.Header.Flags |= libovr_capi.ovrLayerFlag_HighQuality
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":2554
 *         _eyeLayer.Header.Flags |= libovr_capi.ovrLayerFlag_HighQuality
 *     else:
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HighQuality             # <<<<<<<<<<<<<<
 * 
 * def setHeadLocked(bint enable):
 */
  /*else*/ {
    __pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Header.Flags = (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Header.Flags & (~ovrLayerFlag_HighQuality));
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":2547
 *     return _gfxLuid.Reserved.decode('utf-8')
 * 
 * def setHighQuality(bint enable):             # <<<<<<<<<<<<<<
 *     """Enable high quality mode.
 *     """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2556
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HighQuality
 * 
 * def setHeadLocked(bint enable):             # <<<<<<<<<<<<<<
 *     """True when head-locked mode is enabled.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_39setHeadLocked(PyObject *__pyx_self, PyObject *__pyx_arg_enable); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_38setHeadLocked[] = "setHeadLocked(bool enable)\nTrue when head-locked mode is enabled.\n\n    This is disabled by default when a session is started. Enable this if you\n    are considering to use custom head poses.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_39setHeadLocked = {"setHeadLocked", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_39setHeadLocked, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_38setHeadLocked};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_39setHeadLocked(PyObject *__pyx_self, PyObject *__pyx_arg_enable) {
  int __pyx_v_enable;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setHeadLocked (wrapper)", 0);
  assert(__pyx_arg_enable); {
    __pyx_v_enable = __Pyx_PyObject_IsTrue(__pyx_arg_enable); if (unlikely((__pyx_v_enable == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2556, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.setHeadLocked", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_38setHeadLocked(__pyx_self, ((int)__pyx_v_enable));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_38setHeadLocked(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_enable) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("setHeadLocked", 0);

  /* "psychxr/libovr/_libovr.pyx":2564
 *     """
 *     global _eyeLayer
 *     if enable:             # <<<<<<<<<<<<<<
 *         _eyeLayer.Header.Flags |= libovr_capi.ovrLayerFlag_HeadLocked
 *     else:
 */
  __pyx_t_1 = (__pyx_v_enable != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":2565
 *     global _eyeLayer
 *     if enable:
 *         _eyeLayer.Header.Flags |= libovr_capi.ovrLayerFlag_HeadLocked             # <<<<<<<<<<<<<<
 *     else:
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HeadLocked
 */
    __pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Header.Flags = (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Header.Flags | ovrLayerFlag_HeadLocked);

    /* "psychxr/libovr/_libovr.pyx":2564
 *     """
 *     global _eyeLayer
 *     if enable:             # <<<<<<<<<<<<<<
 *         _eyeLayer.Header.Flags |= libovr_capi.ovrLayerFlag_HeadLocked
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":2567
 *         _eyeLayer.Header.Flags |= libovr_capi.ovrLayerFlag_HeadLocked
 *     else:
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HeadLocked             # <<<<<<<<<<<<<<
 * 
 * def getPixelsPerTanAngleAtCenter(int eye):
 */
  /*else*/ {
    __pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Header.Flags = (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Header.Flags & (~ovrLayerFlag_HeadLocked));
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":2556
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HighQuality
 * 
 * def setHeadLocked(bint enable):             # <<<<<<<<<<<<<<
 *     """True when head-locked mode is enabled.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2569
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HeadLocked
 * 
 * def getPixelsPerTanAngleAtCenter(int eye):             # <<<<<<<<<<<<<<
 *     """Get pixels per tan angle at te center of the display.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_41getPixelsPerTanAngleAtCenter(PyObject *__pyx_self, PyObject *__pyx_arg_eye); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_40getPixelsPerTanAngleAtCenter[] = "getPixelsPerTanAngleAtCenter(int eye)\nGet pixels per tan angle at te center of the display.\n\n    Values reflect the FOVs set by the last call to 'setEyeRenderFov' (or else\n    the default FOVs will be used.)\n\n    Parameters\n    ----------\n    eye: int\n        Eye index. Use either :data:`LIBOVR_EYE_LEFT` or\n        :data:`LIBOVR_EYE_RIGHT`.\n\n    Returns\n    -------\n    tuple of floats\n        Pixels per tan angle at the center of the screen.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_41getPixelsPerTanAngleAtCenter = {"getPixelsPerTanAngleAtCenter", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_41getPixelsPerTanAngleAtCenter, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_40getPixelsPerTanAngleAtCenter};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_41getPixelsPerTanAngleAtCenter(PyObject *__pyx_self, PyObject *__pyx_arg_eye) {
  int __pyx_v_eye;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPixelsPerTanAngleAtCenter (wrapper)", 0);
  assert(__pyx_arg_eye); {
    __pyx_v_eye = __Pyx_PyInt_As_int(__pyx_arg_eye); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2569, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getPixelsPerTanAngleAtCenter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_40getPixelsPerTanAngleAtCenter(__pyx_self, ((int)__pyx_v_eye));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_40getPixelsPerTanAngleAtCenter(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye) {
  ovrVector2f __pyx_v_toReturn;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ovrVector2f __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getPixelsPerTanAngleAtCenter", 0);

  /* "psychxr/libovr/_libovr.pyx":2590
 * 
 *     cdef libovr_capi.ovrVector2f toReturn = \
 *         _eyeRenderDesc[eye].PixelsPerTanAngleAtCenter             # <<<<<<<<<<<<<<
 * 
 *     return toReturn.x, toReturn.y
 */
  __pyx_t_1 = (__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).PixelsPerTanAngleAtCenter;
  __pyx_v_toReturn = __pyx_t_1;

  /* "psychxr/libovr/_libovr.pyx":2592
 *         _eyeRenderDesc[eye].PixelsPerTanAngleAtCenter
 * 
 *     return toReturn.x, toReturn.y             # <<<<<<<<<<<<<<
 * 
 * def getDistortedViewport(int eye):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_toReturn.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_toReturn.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2569
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HeadLocked
 * 
 * def getPixelsPerTanAngleAtCenter(int eye):             # <<<<<<<<<<<<<<
 *     """Get pixels per tan angle at te center of the display.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getPixelsPerTanAngleAtCenter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2594
 *     return toReturn.x, toReturn.y
 * 
 * def getDistortedViewport(int eye):             # <<<<<<<<<<<<<<
 *     """Get the distorted viewport.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_43getDistortedViewport(PyObject *__pyx_self, PyObject *__pyx_arg_eye); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_42getDistortedViewport[] = "getDistortedViewport(int eye)\nGet the distorted viewport.\n\n    You must call 'setEyeRenderFov' first for values to be valid.\n\n    Parameters\n    ----------\n    eye: int\n        Eye index. Use either :data:`LIBOVR_EYE_LEFT` or\n        :data:`LIBOVR_EYE_RIGHT`.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_43getDistortedViewport = {"getDistortedViewport", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_43getDistortedViewport, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_42getDistortedViewport};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_43getDistortedViewport(PyObject *__pyx_self, PyObject *__pyx_arg_eye) {
  int __pyx_v_eye;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDistortedViewport (wrapper)", 0);
  assert(__pyx_arg_eye); {
    __pyx_v_eye = __Pyx_PyInt_As_int(__pyx_arg_eye); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2594, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getDistortedViewport", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_42getDistortedViewport(__pyx_self, ((int)__pyx_v_eye));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_42getDistortedViewport(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye) {
  ovrRecti __pyx_v_distVp;
  PyArrayObject *__pyx_v_toReturn = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ovrRecti __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("getDistortedViewport", 0);

  /* "psychxr/libovr/_libovr.pyx":2606
 * 
 *     """
 *     cdef libovr_capi.ovrRecti distVp = _eyeRenderDesc[eye].DistortedViewport             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray toReturn = np.asarray([
 */
  __pyx_t_1 = (__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).DistortedViewport;
  __pyx_v_distVp = __pyx_t_1;

  /* "psychxr/libovr/_libovr.pyx":2608
 *     cdef libovr_capi.ovrRecti distVp = _eyeRenderDesc[eye].DistortedViewport
 * 
 *     cdef np.ndarray toReturn = np.asarray([             # <<<<<<<<<<<<<<
 *         distVp.Pos.x,
 *         distVp.Pos.x,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "psychxr/libovr/_libovr.pyx":2609
 * 
 *     cdef np.ndarray toReturn = np.asarray([
 *         distVp.Pos.x,             # <<<<<<<<<<<<<<
 *         distVp.Pos.x,
 *         distVp.Size.w,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_distVp.Pos.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":2610
 *     cdef np.ndarray toReturn = np.asarray([
 *         distVp.Pos.x,
 *         distVp.Pos.x,             # <<<<<<<<<<<<<<
 *         distVp.Size.w,
 *         distVp.Size.h],
 */
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_distVp.Pos.x); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "psychxr/libovr/_libovr.pyx":2611
 *         distVp.Pos.x,
 *         distVp.Pos.x,
 *         distVp.Size.w,             # <<<<<<<<<<<<<<
 *         distVp.Size.h],
 *         dtype=np.int)
 */
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_distVp.Size.w); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "psychxr/libovr/_libovr.pyx":2612
 *         distVp.Pos.x,
 *         distVp.Size.w,
 *         distVp.Size.h],             # <<<<<<<<<<<<<<
 *         dtype=np.int)
 * 
 */
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_distVp.Size.h); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "psychxr/libovr/_libovr.pyx":2608
 *     cdef libovr_capi.ovrRecti distVp = _eyeRenderDesc[eye].DistortedViewport
 * 
 *     cdef np.ndarray toReturn = np.asarray([             # <<<<<<<<<<<<<<
 *         distVp.Pos.x,
 *         distVp.Pos.x,
 */
  __pyx_t_7 = PyList_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_6);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "psychxr/libovr/_libovr.pyx":2613
 *         distVp.Size.w,
 *         distVp.Size.h],
 *         dtype=np.int)             # <<<<<<<<<<<<<<
 * 
 *     return toReturn
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 2613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(0, 2613, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "psychxr/libovr/_libovr.pyx":2608
 *     cdef libovr_capi.ovrRecti distVp = _eyeRenderDesc[eye].DistortedViewport
 * 
 *     cdef np.ndarray toReturn = np.asarray([             # <<<<<<<<<<<<<<
 *         distVp.Pos.x,
 *         distVp.Pos.x,
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2608, __pyx_L1_error)
  __pyx_v_toReturn = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "psychxr/libovr/_libovr.pyx":2615
 *         dtype=np.int)
 * 
 *     return toReturn             # <<<<<<<<<<<<<<
 * 
 * def getEyeRenderFov(int eye):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_toReturn));
  __pyx_r = ((PyObject *)__pyx_v_toReturn);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2594
 *     return toReturn.x, toReturn.y
 * 
 * def getDistortedViewport(int eye):             # <<<<<<<<<<<<<<
 *     """Get the distorted viewport.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getDistortedViewport", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_toReturn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2617
 *     return toReturn
 * 
 * def getEyeRenderFov(int eye):             # <<<<<<<<<<<<<<
 *     """Get the field-of-view to use for rendering.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_45getEyeRenderFov(PyObject *__pyx_self, PyObject *__pyx_arg_eye); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_44getEyeRenderFov[] = "getEyeRenderFov(int eye)\nGet the field-of-view to use for rendering.\n\n    The FOV for a given eye are defined as a tuple of tangent angles (Up,\n    Down, Left, Right). By default, this function will return the default\n    FOVs after 'start' is called (see 'defaultEyeFOVs'). You can override\n    these values using 'maxEyeFOVs' and 'symmetricEyeFOVs', or with\n    custom values (see Examples below).\n\n    Parameters\n    ----------\n    eye: int\n        Eye index. Use either :data:`LIBOVR_EYE_LEFT` or\n        :data:`LIBOVR_EYE_RIGHT`.\n\n    Returns\n    -------\n    ndarray of floats\n        Eye FOV tangent angles [UpTan, DownTan, LeftTan, RightTan].\n\n    Examples\n    --------\n    Getting the tangent angles::\n\n        leftFov = libovr.getEyeRenderFOV(libovr.LIBOVR_EYE_LEFT)\n        # left FOV tangent angles, do the same for the right\n        upTan, downTan, leftTan, rightTan =  leftFov\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_45getEyeRenderFov = {"getEyeRenderFov", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_45getEyeRenderFov, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_44getEyeRenderFov};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_45getEyeRenderFov(PyObject *__pyx_self, PyObject *__pyx_arg_eye) {
  int __pyx_v_eye;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEyeRenderFov (wrapper)", 0);
  assert(__pyx_arg_eye); {
    __pyx_v_eye = __Pyx_PyInt_As_int(__pyx_arg_eye); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2617, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeRenderFov", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_44getEyeRenderFov(__pyx_self, ((int)__pyx_v_eye));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_44getEyeRenderFov(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye) {
  PyArrayObject *__pyx_v_to_return = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("getEyeRenderFov", 0);

  /* "psychxr/libovr/_libovr.pyx":2647
 *     """
 *     global _eyeRenderDesc
 *     cdef np.ndarray to_return = np.asarray([             # <<<<<<<<<<<<<<
 *         _eyeRenderDesc[eye].Fov.UpTan,
 *         _eyeRenderDesc[eye].Fov.DownTan,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2648
 *     global _eyeRenderDesc
 *     cdef np.ndarray to_return = np.asarray([
 *         _eyeRenderDesc[eye].Fov.UpTan,             # <<<<<<<<<<<<<<
 *         _eyeRenderDesc[eye].Fov.DownTan,
 *         _eyeRenderDesc[eye].Fov.LeftTan,
 */
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).Fov.UpTan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "psychxr/libovr/_libovr.pyx":2649
 *     cdef np.ndarray to_return = np.asarray([
 *         _eyeRenderDesc[eye].Fov.UpTan,
 *         _eyeRenderDesc[eye].Fov.DownTan,             # <<<<<<<<<<<<<<
 *         _eyeRenderDesc[eye].Fov.LeftTan,
 *         _eyeRenderDesc[eye].Fov.RightTan],
 */
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).Fov.DownTan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "psychxr/libovr/_libovr.pyx":2650
 *         _eyeRenderDesc[eye].Fov.UpTan,
 *         _eyeRenderDesc[eye].Fov.DownTan,
 *         _eyeRenderDesc[eye].Fov.LeftTan,             # <<<<<<<<<<<<<<
 *         _eyeRenderDesc[eye].Fov.RightTan],
 *         dtype=np.float32)
 */
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).Fov.LeftTan); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "psychxr/libovr/_libovr.pyx":2651
 *         _eyeRenderDesc[eye].Fov.DownTan,
 *         _eyeRenderDesc[eye].Fov.LeftTan,
 *         _eyeRenderDesc[eye].Fov.RightTan],             # <<<<<<<<<<<<<<
 *         dtype=np.float32)
 * 
 */
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).Fov.RightTan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "psychxr/libovr/_libovr.pyx":2647
 *     """
 *     global _eyeRenderDesc
 *     cdef np.ndarray to_return = np.asarray([             # <<<<<<<<<<<<<<
 *         _eyeRenderDesc[eye].Fov.UpTan,
 *         _eyeRenderDesc[eye].Fov.DownTan,
 */
  __pyx_t_6 = PyList_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 2647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;

  /* "psychxr/libovr/_libovr.pyx":2652
 *         _eyeRenderDesc[eye].Fov.LeftTan,
 *         _eyeRenderDesc[eye].Fov.RightTan],
 *         dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *     return to_return
 */
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 2652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 2652, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":2647
 *     """
 *     global _eyeRenderDesc
 *     cdef np.ndarray to_return = np.asarray([             # <<<<<<<<<<<<<<
 *         _eyeRenderDesc[eye].Fov.UpTan,
 *         _eyeRenderDesc[eye].Fov.DownTan,
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 2647, __pyx_L1_error)
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":2654
 *         dtype=np.float32)
 * 
 *     return to_return             # <<<<<<<<<<<<<<
 * 
 * def setEyeRenderFov(int eye, object fov):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2617
 *     return toReturn
 * 
 * def getEyeRenderFov(int eye):             # <<<<<<<<<<<<<<
 *     """Get the field-of-view to use for rendering.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeRenderFov", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2656
 *     return to_return
 * 
 * def setEyeRenderFov(int eye, object fov):             # <<<<<<<<<<<<<<
 *     """Set the field-of-view of a given eye. This is used to compute the
 *     projection matrix.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_47setEyeRenderFov(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_46setEyeRenderFov[] = "setEyeRenderFov(int eye, fov)\nSet the field-of-view of a given eye. This is used to compute the\n    projection matrix.\n\n    Parameters\n    ----------\n    eye : int\n        Eye index. Values are `LIBOVR_EYE_LEFT` and `LIBOVR_EYE_RIGHT`.\n    fov : tuple, list or ndarray of floats\n        Eye FOV tangent angles [UpTan, DownTan, LeftTan, RightTan].\n\n    Examples\n    --------\n\n    Setting eye render FOVs to symmetric (needed for mono rendering)::\n\n        leftFov, rightFov = libovr.getSymmetricEyeFOVs()\n        libovr.setEyeRenderFOV(libovr.LIBOVR_EYE_LEFT, leftFov)\n        libovr.setEyeRenderFOV(libovr.LIBOVR_EYE_RIGHT, rightFov)\n\n    Using custom values::\n\n        # Up, Down, Left, Right tan angles\n        libovr.setEyeRenderFOV(libovr.LIBOVR_EYE_LEFT, [1.0, -1.0, -1.0, 1.0])\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_47setEyeRenderFov = {"setEyeRenderFov", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_47setEyeRenderFov, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_46setEyeRenderFov};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_47setEyeRenderFov(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_eye;
  PyObject *__pyx_v_fov = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setEyeRenderFov (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eye,&__pyx_n_s_fov,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eye)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fov)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setEyeRenderFov", 1, 2, 2, 1); __PYX_ERR(0, 2656, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setEyeRenderFov") < 0)) __PYX_ERR(0, 2656, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_eye = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2656, __pyx_L3_error)
    __pyx_v_fov = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setEyeRenderFov", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2656, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.setEyeRenderFov", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_46setEyeRenderFov(__pyx_self, __pyx_v_eye, __pyx_v_fov);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_46setEyeRenderFov(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, PyObject *__pyx_v_fov) {
  ovrFovPort __pyx_v_fov_in;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  float __pyx_t_2;
  ovrFovPort __pyx_t_3;
  __Pyx_RefNannySetupContext("setEyeRenderFov", 0);

  /* "psychxr/libovr/_libovr.pyx":2687
 * 
 *     cdef libovr_capi.ovrFovPort fov_in
 *     fov_in.UpTan = <float>fov[0]             # <<<<<<<<<<<<<<
 *     fov_in.DownTan = <float>fov[1]
 *     fov_in.LeftTan = <float>fov[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_fov, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2687, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fov_in.UpTan = ((float)__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":2688
 *     cdef libovr_capi.ovrFovPort fov_in
 *     fov_in.UpTan = <float>fov[0]
 *     fov_in.DownTan = <float>fov[1]             # <<<<<<<<<<<<<<
 *     fov_in.LeftTan = <float>fov[2]
 *     fov_in.RightTan = <float>fov[3]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_fov, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fov_in.DownTan = ((float)__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":2689
 *     fov_in.UpTan = <float>fov[0]
 *     fov_in.DownTan = <float>fov[1]
 *     fov_in.LeftTan = <float>fov[2]             # <<<<<<<<<<<<<<
 *     fov_in.RightTan = <float>fov[3]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_fov, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2689, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fov_in.LeftTan = ((float)__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":2690
 *     fov_in.DownTan = <float>fov[1]
 *     fov_in.LeftTan = <float>fov[2]
 *     fov_in.RightTan = <float>fov[3]             # <<<<<<<<<<<<<<
 * 
 *     _eyeRenderDesc[<int>eye] = libovr_capi.ovr_GetRenderDesc(
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_fov, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_PyFloat_AsFloat(__pyx_t_1); if (unlikely((__pyx_t_2 == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2690, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_fov_in.RightTan = ((float)__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":2692
 *     fov_in.RightTan = <float>fov[3]
 * 
 *     _eyeRenderDesc[<int>eye] = libovr_capi.ovr_GetRenderDesc(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         <libovr_capi.ovrEyeType>eye,
 */
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[((int)__pyx_v_eye)]) = ovr_GetRenderDesc(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((ovrEyeType)__pyx_v_eye), __pyx_v_fov_in);

  /* "psychxr/libovr/_libovr.pyx":2698
 * 
 *     # set in eye layer too
 *     _eyeLayer.Fov[eye] = _eyeRenderDesc[eye].Fov             # <<<<<<<<<<<<<<
 * 
 * def getEyeAspectRatio(int eye):
 */
  __pyx_t_3 = (__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).Fov;
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Fov[__pyx_v_eye]) = __pyx_t_3;

  /* "psychxr/libovr/_libovr.pyx":2656
 *     return to_return
 * 
 * def setEyeRenderFov(int eye, object fov):             # <<<<<<<<<<<<<<
 *     """Set the field-of-view of a given eye. This is used to compute the
 *     projection matrix.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.setEyeRenderFov", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2700
 *     _eyeLayer.Fov[eye] = _eyeRenderDesc[eye].Fov
 * 
 * def getEyeAspectRatio(int eye):             # <<<<<<<<<<<<<<
 *     """Get the aspect ratio of an eye.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_49getEyeAspectRatio(PyObject *__pyx_self, PyObject *__pyx_arg_eye); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_48getEyeAspectRatio[] = "getEyeAspectRatio(int eye)\nGet the aspect ratio of an eye.\n\n    Parameters\n    ----------\n    eye: int\n        Eye index. Use either :data:`LIBOVR_EYE_LEFT` or\n        :data:`LIBOVR_EYE_RIGHT`.\n\n    Returns\n    -------\n    float\n        Aspect ratio of the eye's FOV.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_49getEyeAspectRatio = {"getEyeAspectRatio", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_49getEyeAspectRatio, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_48getEyeAspectRatio};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_49getEyeAspectRatio(PyObject *__pyx_self, PyObject *__pyx_arg_eye) {
  int __pyx_v_eye;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEyeAspectRatio (wrapper)", 0);
  assert(__pyx_arg_eye); {
    __pyx_v_eye = __Pyx_PyInt_As_int(__pyx_arg_eye); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2700, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeAspectRatio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_48getEyeAspectRatio(__pyx_self, ((int)__pyx_v_eye));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_48getEyeAspectRatio(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye) {
  OVR::FovPort __pyx_v_fovPort;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  float __pyx_t_1;
  float __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getEyeAspectRatio", 0);

  /* "psychxr/libovr/_libovr.pyx":2716
 *     """
 *     cdef libovr_math.FovPort fovPort = \
 *         <libovr_math.FovPort>_eyeRenderDesc[eye].Fov             # <<<<<<<<<<<<<<
 * 
 *     return (fovPort.LeftTan + fovPort.RightTan) / \
 */
  __pyx_v_fovPort = ((OVR::FovPort)(__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).Fov);

  /* "psychxr/libovr/_libovr.pyx":2718
 *         <libovr_math.FovPort>_eyeRenderDesc[eye].Fov
 * 
 *     return (fovPort.LeftTan + fovPort.RightTan) / \             # <<<<<<<<<<<<<<
 *            (fovPort.UpTan + fovPort.DownTan)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = (__pyx_v_fovPort.LeftTan + __pyx_v_fovPort.RightTan);

  /* "psychxr/libovr/_libovr.pyx":2719
 * 
 *     return (fovPort.LeftTan + fovPort.RightTan) / \
 *            (fovPort.UpTan + fovPort.DownTan)             # <<<<<<<<<<<<<<
 * 
 * def getEyeHorizontalFovRadians(int eye):
 */
  __pyx_t_2 = (__pyx_v_fovPort.UpTan + __pyx_v_fovPort.DownTan);

  /* "psychxr/libovr/_libovr.pyx":2718
 *         <libovr_math.FovPort>_eyeRenderDesc[eye].Fov
 * 
 *     return (fovPort.LeftTan + fovPort.RightTan) / \             # <<<<<<<<<<<<<<
 *            (fovPort.UpTan + fovPort.DownTan)
 * 
 */
  if (unlikely(__pyx_t_2 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 2718, __pyx_L1_error)
  }
  __pyx_t_3 = PyFloat_FromDouble((__pyx_t_1 / __pyx_t_2)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2700
 *     _eyeLayer.Fov[eye] = _eyeRenderDesc[eye].Fov
 * 
 * def getEyeAspectRatio(int eye):             # <<<<<<<<<<<<<<
 *     """Get the aspect ratio of an eye.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeAspectRatio", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2721
 *            (fovPort.UpTan + fovPort.DownTan)
 * 
 * def getEyeHorizontalFovRadians(int eye):             # <<<<<<<<<<<<<<
 *     """Get the angle of the horizontal field-of-view (FOV) for a given eye.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_51getEyeHorizontalFovRadians(PyObject *__pyx_self, PyObject *__pyx_arg_eye); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_50getEyeHorizontalFovRadians[] = "getEyeHorizontalFovRadians(int eye)\nGet the angle of the horizontal field-of-view (FOV) for a given eye.\n\n    Parameters\n    ----------\n    eye: int\n        Eye index. Use either :data:`LIBOVR_EYE_LEFT` or\n        :data:`LIBOVR_EYE_RIGHT`.\n\n    Returns\n    -------\n    float\n        Horizontal FOV of a given eye in radians.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_51getEyeHorizontalFovRadians = {"getEyeHorizontalFovRadians", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_51getEyeHorizontalFovRadians, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_50getEyeHorizontalFovRadians};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_51getEyeHorizontalFovRadians(PyObject *__pyx_self, PyObject *__pyx_arg_eye) {
  int __pyx_v_eye;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEyeHorizontalFovRadians (wrapper)", 0);
  assert(__pyx_arg_eye); {
    __pyx_v_eye = __Pyx_PyInt_As_int(__pyx_arg_eye); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2721, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeHorizontalFovRadians", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_50getEyeHorizontalFovRadians(__pyx_self, ((int)__pyx_v_eye));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_50getEyeHorizontalFovRadians(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye) {
  OVR::FovPort __pyx_v_fovPort;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getEyeHorizontalFovRadians", 0);

  /* "psychxr/libovr/_libovr.pyx":2737
 *     """
 *     cdef libovr_math.FovPort fovPort = \
 *         <libovr_math.FovPort>_eyeRenderDesc[eye].Fov             # <<<<<<<<<<<<<<
 * 
 *     return fovPort.GetHorizontalFovRadians()
 */
  __pyx_v_fovPort = ((OVR::FovPort)(__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).Fov);

  /* "psychxr/libovr/_libovr.pyx":2739
 *         <libovr_math.FovPort>_eyeRenderDesc[eye].Fov
 * 
 *     return fovPort.GetHorizontalFovRadians()             # <<<<<<<<<<<<<<
 * 
 * def getEyeVerticalFovRadians(int eye):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_fovPort.GetHorizontalFovRadians()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2721
 *            (fovPort.UpTan + fovPort.DownTan)
 * 
 * def getEyeHorizontalFovRadians(int eye):             # <<<<<<<<<<<<<<
 *     """Get the angle of the horizontal field-of-view (FOV) for a given eye.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeHorizontalFovRadians", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2741
 *     return fovPort.GetHorizontalFovRadians()
 * 
 * def getEyeVerticalFovRadians(int eye):             # <<<<<<<<<<<<<<
 *     """Get the angle of the vertical field-of-view (FOV) for a given eye.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_53getEyeVerticalFovRadians(PyObject *__pyx_self, PyObject *__pyx_arg_eye); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_52getEyeVerticalFovRadians[] = "getEyeVerticalFovRadians(int eye)\nGet the angle of the vertical field-of-view (FOV) for a given eye.\n\n    Parameters\n    ----------\n    eye: int\n        Eye index. Use either :data:`LIBOVR_EYE_LEFT` or\n        :data:`LIBOVR_EYE_RIGHT`.\n\n    Returns\n    -------\n    float\n        Vertical FOV of a given eye in radians.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_53getEyeVerticalFovRadians = {"getEyeVerticalFovRadians", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_53getEyeVerticalFovRadians, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_52getEyeVerticalFovRadians};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_53getEyeVerticalFovRadians(PyObject *__pyx_self, PyObject *__pyx_arg_eye) {
  int __pyx_v_eye;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEyeVerticalFovRadians (wrapper)", 0);
  assert(__pyx_arg_eye); {
    __pyx_v_eye = __Pyx_PyInt_As_int(__pyx_arg_eye); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2741, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeVerticalFovRadians", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_52getEyeVerticalFovRadians(__pyx_self, ((int)__pyx_v_eye));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_52getEyeVerticalFovRadians(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye) {
  OVR::FovPort __pyx_v_fovPort;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getEyeVerticalFovRadians", 0);

  /* "psychxr/libovr/_libovr.pyx":2757
 *     """
 *     cdef libovr_math.FovPort fovPort = \
 *         <libovr_math.FovPort>_eyeRenderDesc[eye].Fov             # <<<<<<<<<<<<<<
 * 
 *     return fovPort.GetVerticalFovRadians()
 */
  __pyx_v_fovPort = ((OVR::FovPort)(__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).Fov);

  /* "psychxr/libovr/_libovr.pyx":2759
 *         <libovr_math.FovPort>_eyeRenderDesc[eye].Fov
 * 
 *     return fovPort.GetVerticalFovRadians()             # <<<<<<<<<<<<<<
 * 
 * def getEyeFocalLength(int eye):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_fovPort.GetVerticalFovRadians()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2741
 *     return fovPort.GetHorizontalFovRadians()
 * 
 * def getEyeVerticalFovRadians(int eye):             # <<<<<<<<<<<<<<
 *     """Get the angle of the vertical field-of-view (FOV) for a given eye.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeVerticalFovRadians", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2761
 *     return fovPort.GetVerticalFovRadians()
 * 
 * def getEyeFocalLength(int eye):             # <<<<<<<<<<<<<<
 *     """Get the focal length of the eye's frustum.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_55getEyeFocalLength(PyObject *__pyx_self, PyObject *__pyx_arg_eye); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_54getEyeFocalLength[] = "getEyeFocalLength(int eye)\nGet the focal length of the eye's frustum.\n\n    Parameters\n    ----------\n    eye: int\n        Eye index. Use either :data:`LIBOVR_EYE_LEFT` or\n        :data:`LIBOVR_EYE_RIGHT`.\n\n    Returns\n    -------\n    float\n        Focal length in meters.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_55getEyeFocalLength = {"getEyeFocalLength", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_55getEyeFocalLength, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_54getEyeFocalLength};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_55getEyeFocalLength(PyObject *__pyx_self, PyObject *__pyx_arg_eye) {
  int __pyx_v_eye;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEyeFocalLength (wrapper)", 0);
  assert(__pyx_arg_eye); {
    __pyx_v_eye = __Pyx_PyInt_As_int(__pyx_arg_eye); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2761, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeFocalLength", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_54getEyeFocalLength(__pyx_self, ((int)__pyx_v_eye));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_54getEyeFocalLength(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  double __pyx_t_6;
  __Pyx_RefNannySetupContext("getEyeFocalLength", 0);

  /* "psychxr/libovr/_libovr.pyx":2776
 * 
 *     """
 *     return 1.0 / tan(getEyeHorizontalFovRadians(eye) / 2.0)             # <<<<<<<<<<<<<<
 * 
 * def calcEyeBufferSize(int eye, float texelsPerPixel=1.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_getEyeHorizontalFovRadians); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_eye); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyFloat_DivideObjC(__pyx_t_1, __pyx_float_2_0, 2.0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 2776, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = tan(__pyx_t_5);
  if (unlikely(__pyx_t_6 == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 2776, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble((1.0 / __pyx_t_6)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2761
 *     return fovPort.GetVerticalFovRadians()
 * 
 * def getEyeFocalLength(int eye):             # <<<<<<<<<<<<<<
 *     """Get the focal length of the eye's frustum.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeFocalLength", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2778
 *     return 1.0 / tan(getEyeHorizontalFovRadians(eye) / 2.0)
 * 
 * def calcEyeBufferSize(int eye, float texelsPerPixel=1.0):             # <<<<<<<<<<<<<<
 *     """Get the recommended buffer (texture) sizes for eye buffers.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_57calcEyeBufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_56calcEyeBufferSize[] = "calcEyeBufferSize(int eye, float texelsPerPixel=1.0)\nGet the recommended buffer (texture) sizes for eye buffers.\n\n    Should be called after 'setEyerenderFovs'. Returns buffer resolutions in\n    pixels (w, h). The values can be used when configuring a framebuffer or swap\n    chain for rendering.\n\n    Parameters\n    ----------\n    eye: int\n        Eye index. Use either :data:LIBOVR_EYE_LEFT or :data:LIBOVR_EYE_RIGHT.\n    texelsPerPixel : float\n        Display pixels per texture pixels at the center of the display. Use a\n        value less than 1.0 to improve performance at the cost of resolution.\n        Specifying a larger texture is possible, but not recommended by the\n        manufacturer.\n\n    Returns\n    -------\n    tuple of tuples\n        Buffer widths and heights (w, h) for each eye.\n\n    Examples\n    --------\n    Getting the buffer sizes::\n\n        # eye FOVs must be set first!\n        leftFov, rightFov = libovr.getDefaultEyeFOVs()\n        libovr.setEyeRenderFov(libovr.LIBOVR_EYE_LEFT, leftFov)\n        libovr.setEyeRenderFov(libovr.LIBOVR_EYE_RIGHT, rightFov)\n\n        leftBufferSize, rightBufferSize = libovr.calcEyeBufferSize()\n        leftW leftH = leftBufferSize\n        rightW, rightH = rightBufferSize\n        # combined size if using a single texture buffer for both eyes\n        w, h = leftW + rightW, max(leftH, rightH)\n        # make the texture ...\n\n    Notes\n    -----\n    This function returns the recommended texture resolution for a specified\n    eye. If you are using a single buffer for both eyes, that buffer should be\n    as wide as the combined width of both eye's values.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_57calcEyeBufferSize = {"calcEyeBufferSize", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_57calcEyeBufferSize, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_56calcEyeBufferSize};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_57calcEyeBufferSize(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED int __pyx_v_eye;
  float __pyx_v_texelsPerPixel;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEyeBufferSize (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eye,&__pyx_n_s_texelsPerPixel,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eye)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_texelsPerPixel);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "calcEyeBufferSize") < 0)) __PYX_ERR(0, 2778, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_eye = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2778, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_texelsPerPixel = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_texelsPerPixel == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 2778, __pyx_L3_error)
    } else {
      __pyx_v_texelsPerPixel = ((float)1.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("calcEyeBufferSize", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2778, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.calcEyeBufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_56calcEyeBufferSize(__pyx_self, __pyx_v_eye, __pyx_v_texelsPerPixel);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_56calcEyeBufferSize(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED int __pyx_v_eye, float __pyx_v_texelsPerPixel) {
  ovrSizei __pyx_v_buffSize;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("calcEyeBufferSize", 0);

  /* "psychxr/libovr/_libovr.pyx":2826
 *     global _eyeRenderDesc
 * 
 *     cdef libovr_capi.ovrSizei buffSize = libovr_capi.ovr_GetFovTextureSize(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         <libovr_capi.ovrEyeType>0,
 */
  __pyx_v_buffSize = ovr_GetFovTextureSize(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((ovrEyeType)0), (__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[0]).Fov, ((float)__pyx_v_texelsPerPixel));

  /* "psychxr/libovr/_libovr.pyx":2832
 *         <float>texelsPerPixel)
 * 
 *     return buffSize.w, buffSize.h             # <<<<<<<<<<<<<<
 * 
 * def getTextureSwapChainLengthGL(int swapChain):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_buffSize.w); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_buffSize.h); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2778
 *     return 1.0 / tan(getEyeHorizontalFovRadians(eye) / 2.0)
 * 
 * def calcEyeBufferSize(int eye, float texelsPerPixel=1.0):             # <<<<<<<<<<<<<<
 *     """Get the recommended buffer (texture) sizes for eye buffers.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.calcEyeBufferSize", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2834
 *     return buffSize.w, buffSize.h
 * 
 * def getTextureSwapChainLengthGL(int swapChain):             # <<<<<<<<<<<<<<
 *     """Get the length of a specified swap chain.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_59getTextureSwapChainLengthGL(PyObject *__pyx_self, PyObject *__pyx_arg_swapChain); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_58getTextureSwapChainLengthGL[] = "getTextureSwapChainLengthGL(int swapChain)\nGet the length of a specified swap chain.\n\n    Parameters\n    ----------\n    swapChain : int\n        Swap chain handle to query. Must be a swap chain initialized by a\n        previous call to 'createTextureSwapChainGL'.\n\n    Returns\n    -------\n    tuple of int\n        Result of the 'ovr_GetTextureSwapChainLength' API call and the\n        length of that swap chain.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_59getTextureSwapChainLengthGL = {"getTextureSwapChainLengthGL", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_59getTextureSwapChainLengthGL, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_58getTextureSwapChainLengthGL};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_59getTextureSwapChainLengthGL(PyObject *__pyx_self, PyObject *__pyx_arg_swapChain) {
  int __pyx_v_swapChain;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTextureSwapChainLengthGL (wrapper)", 0);
  assert(__pyx_arg_swapChain); {
    __pyx_v_swapChain = __Pyx_PyInt_As_int(__pyx_arg_swapChain); if (unlikely((__pyx_v_swapChain == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2834, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTextureSwapChainLengthGL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_58getTextureSwapChainLengthGL(__pyx_self, ((int)__pyx_v_swapChain));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_58getTextureSwapChainLengthGL(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_swapChain) {
  int __pyx_v_outLength;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getTextureSwapChainLengthGL", 0);

  /* "psychxr/libovr/_libovr.pyx":2851
 *     """
 *     cdef int outLength
 *     cdef libovr_capi.ovrResult result = 0             # <<<<<<<<<<<<<<
 *     global _swapChains
 *     global _ptrSession
 */
  __pyx_v_result = 0;

  /* "psychxr/libovr/_libovr.pyx":2857
 * 
 *     # check if there is a swap chain in the slot
 *     if _eyeLayer.ColorTexture[swapChain] == NULL:             # <<<<<<<<<<<<<<
 *         raise RuntimeError(
 *             "Cannot get swap chain length, NULL eye buffer texture.")
 */
  __pyx_t_1 = (((__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.ColorTexture[__pyx_v_swapChain]) == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "psychxr/libovr/_libovr.pyx":2858
 *     # check if there is a swap chain in the slot
 *     if _eyeLayer.ColorTexture[swapChain] == NULL:
 *         raise RuntimeError(             # <<<<<<<<<<<<<<
 *             "Cannot get swap chain length, NULL eye buffer texture.")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 2858, __pyx_L1_error)

    /* "psychxr/libovr/_libovr.pyx":2857
 * 
 *     # check if there is a swap chain in the slot
 *     if _eyeLayer.ColorTexture[swapChain] == NULL:             # <<<<<<<<<<<<<<
 *         raise RuntimeError(
 *             "Cannot get swap chain length, NULL eye buffer texture.")
 */
  }

  /* "psychxr/libovr/_libovr.pyx":2862
 * 
 *     # get the current texture index within the swap chain
 *     result = libovr_capi.ovr_GetTextureSwapChainLength(             # <<<<<<<<<<<<<<
 *         _ptrSession, _swapChains[swapChain], &outLength)
 * 
 */
  __pyx_v_result = ovr_GetTextureSwapChainLength(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (__pyx_v_7psychxr_6libovr_7_libovr__swapChains[__pyx_v_swapChain]), (&__pyx_v_outLength));

  /* "psychxr/libovr/_libovr.pyx":2865
 *         _ptrSession, _swapChains[swapChain], &outLength)
 * 
 *     return result, outLength             # <<<<<<<<<<<<<<
 * 
 * def getTextureSwapChainCurrentIndex(int swapChain):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_outLength); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2834
 *     return buffSize.w, buffSize.h
 * 
 * def getTextureSwapChainLengthGL(int swapChain):             # <<<<<<<<<<<<<<
 *     """Get the length of a specified swap chain.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTextureSwapChainLengthGL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2867
 *     return result, outLength
 * 
 * def getTextureSwapChainCurrentIndex(int swapChain):             # <<<<<<<<<<<<<<
 *     """Get the current buffer index within the swap chain.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_61getTextureSwapChainCurrentIndex(PyObject *__pyx_self, PyObject *__pyx_arg_swapChain); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_60getTextureSwapChainCurrentIndex[] = "getTextureSwapChainCurrentIndex(int swapChain)\nGet the current buffer index within the swap chain.\n\n    Parameters\n    ----------\n    swapChain : int\n        Swap chain handle to query. Must be a swap chain initialized by a\n        previous call to 'createTextureSwapChainGL'.\n\n    Returns\n    -------\n    tuple of int\n        Result of the 'ovr_GetTextureSwapChainCurrentIndex' API call and the\n        index of the buffer.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_61getTextureSwapChainCurrentIndex = {"getTextureSwapChainCurrentIndex", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_61getTextureSwapChainCurrentIndex, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_60getTextureSwapChainCurrentIndex};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_61getTextureSwapChainCurrentIndex(PyObject *__pyx_self, PyObject *__pyx_arg_swapChain) {
  int __pyx_v_swapChain;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTextureSwapChainCurrentIndex (wrapper)", 0);
  assert(__pyx_arg_swapChain); {
    __pyx_v_swapChain = __Pyx_PyInt_As_int(__pyx_arg_swapChain); if (unlikely((__pyx_v_swapChain == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2867, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTextureSwapChainCurrentIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_60getTextureSwapChainCurrentIndex(__pyx_self, ((int)__pyx_v_swapChain));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_60getTextureSwapChainCurrentIndex(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_swapChain) {
  int __pyx_v_current_idx;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getTextureSwapChainCurrentIndex", 0);

  /* "psychxr/libovr/_libovr.pyx":2883
 * 
 *     """
 *     cdef int current_idx = 0             # <<<<<<<<<<<<<<
 *     cdef libovr_capi.ovrResult result = 0
 *     global _swapChains
 */
  __pyx_v_current_idx = 0;

  /* "psychxr/libovr/_libovr.pyx":2884
 *     """
 *     cdef int current_idx = 0
 *     cdef libovr_capi.ovrResult result = 0             # <<<<<<<<<<<<<<
 *     global _swapChains
 *     global _eyeLayer
 */
  __pyx_v_result = 0;

  /* "psychxr/libovr/_libovr.pyx":2890
 * 
 *     # check if there is a swap chain in the slot
 *     if _eyeLayer.ColorTexture[swapChain] == NULL:             # <<<<<<<<<<<<<<
 *         raise RuntimeError(
 *             "Cannot get buffer ID, NULL eye buffer texture.")
 */
  __pyx_t_1 = (((__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.ColorTexture[__pyx_v_swapChain]) == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "psychxr/libovr/_libovr.pyx":2891
 *     # check if there is a swap chain in the slot
 *     if _eyeLayer.ColorTexture[swapChain] == NULL:
 *         raise RuntimeError(             # <<<<<<<<<<<<<<
 *             "Cannot get buffer ID, NULL eye buffer texture.")
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2891, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 2891, __pyx_L1_error)

    /* "psychxr/libovr/_libovr.pyx":2890
 * 
 *     # check if there is a swap chain in the slot
 *     if _eyeLayer.ColorTexture[swapChain] == NULL:             # <<<<<<<<<<<<<<
 *         raise RuntimeError(
 *             "Cannot get buffer ID, NULL eye buffer texture.")
 */
  }

  /* "psychxr/libovr/_libovr.pyx":2895
 * 
 *     # get the current texture index within the swap chain
 *     result = libovr_capi.ovr_GetTextureSwapChainCurrentIndex(             # <<<<<<<<<<<<<<
 *         _ptrSession, _swapChains[swapChain], &current_idx)
 * 
 */
  __pyx_v_result = ovr_GetTextureSwapChainCurrentIndex(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (__pyx_v_7psychxr_6libovr_7_libovr__swapChains[__pyx_v_swapChain]), (&__pyx_v_current_idx));

  /* "psychxr/libovr/_libovr.pyx":2898
 *         _ptrSession, _swapChains[swapChain], &current_idx)
 * 
 *     return result, current_idx             # <<<<<<<<<<<<<<
 * 
 * def getTextureSwapChainBufferGL(int swapChain, int index):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_current_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 2898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2867
 *     return result, outLength
 * 
 * def getTextureSwapChainCurrentIndex(int swapChain):             # <<<<<<<<<<<<<<
 *     """Get the current buffer index within the swap chain.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTextureSwapChainCurrentIndex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2900
 *     return result, current_idx
 * 
 * def getTextureSwapChainBufferGL(int swapChain, int index):             # <<<<<<<<<<<<<<
 *     """Get the texture buffer as an OpenGL name at a specific index in the
 *     swap chain for a given swapChain.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_63getTextureSwapChainBufferGL(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_62getTextureSwapChainBufferGL[] = "getTextureSwapChainBufferGL(int swapChain, int index)\nGet the texture buffer as an OpenGL name at a specific index in the\n    swap chain for a given swapChain.\n\n    Parameters\n    ----------\n    swapChain : int\n        Swap chain handle to query. Must be a swap chain initialized by a\n        previous call to 'createTextureSwapChainGL'.\n    index : int\n        Index within the swap chain to retrieve its OpenGL texture name.\n\n    Returns\n    -------\n    tuple of ints\n        Result of the 'ovr_GetTextureSwapChainBufferGL' API call and the\n        OpenGL texture buffer name. A OpenGL buffer name is invalid when 0,\n        check the returned API call result for an error condition.\n\n    Examples\n    --------\n    Get the OpenGL texture buffer name associated with the swap chain index::\n\n        # get the current available index\n        swapChain = libovr.LIBOVR_TEXTURE_SWAP_CHAIN0\n        result, currentIdx = hmd.getSwapChainCurrentIndex(swapChain)\n\n        # get the OpenGL buffer name\n        result, texId = hmd.getTextureSwapChainBufferGL(swapChain, currentIdx)\n\n        # bind the texture\n        GL.glFramebufferTexture2D(GL.GL_FRAMEBUFFER, GL.GL_COLOR_ATTACHMENT0,\n            GL.GL_TEXTURE_2D, texId, 0)\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_63getTextureSwapChainBufferGL = {"getTextureSwapChainBufferGL", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_63getTextureSwapChainBufferGL, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_62getTextureSwapChainBufferGL};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_63getTextureSwapChainBufferGL(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_swapChain;
  int __pyx_v_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTextureSwapChainBufferGL (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_swapChain,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_swapChain)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getTextureSwapChainBufferGL", 1, 2, 2, 1); __PYX_ERR(0, 2900, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getTextureSwapChainBufferGL") < 0)) __PYX_ERR(0, 2900, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_swapChain = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_swapChain == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2900, __pyx_L3_error)
    __pyx_v_index = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2900, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getTextureSwapChainBufferGL", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2900, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTextureSwapChainBufferGL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_62getTextureSwapChainBufferGL(__pyx_self, __pyx_v_swapChain, __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_62getTextureSwapChainBufferGL(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_swapChain, int __pyx_v_index) {
  unsigned int __pyx_v_tex_id;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getTextureSwapChainBufferGL", 0);

  /* "psychxr/libovr/_libovr.pyx":2935
 * 
 *     """
 *     cdef unsigned int tex_id = 0  # OpenGL texture handle             # <<<<<<<<<<<<<<
 *     global _swapChains
 *     global _eyeLayer
 */
  __pyx_v_tex_id = 0;

  /* "psychxr/libovr/_libovr.pyx":2941
 * 
 *     # get the next available texture ID from the swap chain
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_GetTextureSwapChainBufferGL(             # <<<<<<<<<<<<<<
 *         _ptrSession, _swapChains[swapChain], index, &tex_id)
 * 
 */
  __pyx_v_result = ovr_GetTextureSwapChainBufferGL(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (__pyx_v_7psychxr_6libovr_7_libovr__swapChains[__pyx_v_swapChain]), __pyx_v_index, (&__pyx_v_tex_id));

  /* "psychxr/libovr/_libovr.pyx":2944
 *         _ptrSession, _swapChains[swapChain], index, &tex_id)
 * 
 *     return result, tex_id             # <<<<<<<<<<<<<<
 * 
 * def createTextureSwapChainGL(int swapChain, int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB, int levels=1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_tex_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 2944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2900
 *     return result, current_idx
 * 
 * def getTextureSwapChainBufferGL(int swapChain, int index):             # <<<<<<<<<<<<<<
 *     """Get the texture buffer as an OpenGL name at a specific index in the
 *     swap chain for a given swapChain.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTextureSwapChainBufferGL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":2946
 *     return result, tex_id
 * 
 * def createTextureSwapChainGL(int swapChain, int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB, int levels=1):             # <<<<<<<<<<<<<<
 *     """Create a texture swap chain for eye image buffers.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_65createTextureSwapChainGL(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_64createTextureSwapChainGL[] = "createTextureSwapChainGL(int swapChain, int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB, int levels=1)\nCreate a texture swap chain for eye image buffers.\n\n    You can create up-to 32 swap chains, referenced by their index.\n\n    Parameters\n    ----------\n    swapChain : int\n        Swap chain handle to initialize, usually 'LIBOVR_SWAP_CHAIN*'.\n    width : int\n        Width of texture in pixels.\n    height : int\n        Height of texture in pixels.\n    textureFormat : int\n        Texture format to use. Valid color texture formats are:\n            - :data:`LIBOVR_FORMAT_R8G8B8A8_UNORM`\n            - :data:`LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB`\n            - :data:`LIBOVR_FORMAT_R16G16B16A16_FLOAT`\n            - :data:`LIBOVR_FORMAT_R11G11B10_FLOAT`\n        Depth texture formats:\n            - :data:`LIBOVR_FORMAT_D16_UNORM`\n            - :data:`LIBOVR_FORMAT_D24_UNORM_S8_UINT`\n            - :data:`LIBOVR_FORMAT_D32_FLOAT`\n\n    Other Parameters\n    ----------------\n    levels : int\n        Mip levels to use, default is 1.\n\n    Returns\n    -------\n    int\n        The result of the 'ovr_CreateTextureSwapChainGL' API call.\n\n    Examples\n    --------\n\n    Create a texture swap chain::\n\n        result = libovr.createTextureSwapChainGL(libovr.LIBOVR_TEXTURE_SWAP_CHAIN0,\n            texWidth, texHeight, libovr.LIBOVR_FORMAT_R8G8B8A8_UNORM)\n        # set the swap chain for each eye buffer\n        for eye in range(libovr.LIBOVR_EYE_COUNT):\n            hmd.setEyeColorTextureSwapChain(eye, libovr.LIBOVR_TEXTURE_SWAP_CHAIN0)\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_65createTextureSwapChainGL = {"createTextureSwapChainGL", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_65createTextureSwapChainGL, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_64createTextureSwapChainGL};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_65createTextureSwapChainGL(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_swapChain;
  int __pyx_v_width;
  int __pyx_v_height;
  int __pyx_v_textureFormat;
  int __pyx_v_levels;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createTextureSwapChainGL (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_swapChain,&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_textureFormat,&__pyx_n_s_levels,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_swapChain)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createTextureSwapChainGL", 0, 3, 5, 1); __PYX_ERR(0, 2946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createTextureSwapChainGL", 0, 3, 5, 2); __PYX_ERR(0, 2946, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_textureFormat);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_levels);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "createTextureSwapChainGL") < 0)) __PYX_ERR(0, 2946, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_swapChain = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_swapChain == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2946, __pyx_L3_error)
    __pyx_v_width = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2946, __pyx_L3_error)
    __pyx_v_height = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_height == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2946, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_textureFormat = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_textureFormat == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2946, __pyx_L3_error)
    } else {
      __pyx_v_textureFormat = __pyx_k__26;
    }
    if (values[4]) {
      __pyx_v_levels = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_levels == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2946, __pyx_L3_error)
    } else {
      __pyx_v_levels = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createTextureSwapChainGL", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 2946, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.createTextureSwapChainGL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_64createTextureSwapChainGL(__pyx_self, __pyx_v_swapChain, __pyx_v_width, __pyx_v_height, __pyx_v_textureFormat, __pyx_v_levels);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_64createTextureSwapChainGL(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_swapChain, int __pyx_v_width, int __pyx_v_height, int __pyx_v_textureFormat, int __pyx_v_levels) {
  ovrTextureSwapChainDesc __pyx_v_swapConfig;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("createTextureSwapChainGL", 0);

  /* "psychxr/libovr/_libovr.pyx":2997
 *     # configure the texture
 *     cdef libovr_capi.ovrTextureSwapChainDesc swapConfig
 *     swapConfig.Type = libovr_capi.ovrTexture_2D             # <<<<<<<<<<<<<<
 *     swapConfig.Format = <libovr_capi.ovrTextureFormat>textureFormat
 *     swapConfig.ArraySize = 1
 */
  __pyx_v_swapConfig.Type = ovrTexture_2D;

  /* "psychxr/libovr/_libovr.pyx":2998
 *     cdef libovr_capi.ovrTextureSwapChainDesc swapConfig
 *     swapConfig.Type = libovr_capi.ovrTexture_2D
 *     swapConfig.Format = <libovr_capi.ovrTextureFormat>textureFormat             # <<<<<<<<<<<<<<
 *     swapConfig.ArraySize = 1
 *     swapConfig.Width = <int>width
 */
  __pyx_v_swapConfig.Format = ((ovrTextureFormat)__pyx_v_textureFormat);

  /* "psychxr/libovr/_libovr.pyx":2999
 *     swapConfig.Type = libovr_capi.ovrTexture_2D
 *     swapConfig.Format = <libovr_capi.ovrTextureFormat>textureFormat
 *     swapConfig.ArraySize = 1             # <<<<<<<<<<<<<<
 *     swapConfig.Width = <int>width
 *     swapConfig.Height = <int>height
 */
  __pyx_v_swapConfig.ArraySize = 1;

  /* "psychxr/libovr/_libovr.pyx":3000
 *     swapConfig.Format = <libovr_capi.ovrTextureFormat>textureFormat
 *     swapConfig.ArraySize = 1
 *     swapConfig.Width = <int>width             # <<<<<<<<<<<<<<
 *     swapConfig.Height = <int>height
 *     swapConfig.MipLevels = <int>levels
 */
  __pyx_v_swapConfig.Width = ((int)__pyx_v_width);

  /* "psychxr/libovr/_libovr.pyx":3001
 *     swapConfig.ArraySize = 1
 *     swapConfig.Width = <int>width
 *     swapConfig.Height = <int>height             # <<<<<<<<<<<<<<
 *     swapConfig.MipLevels = <int>levels
 *     swapConfig.SampleCount = 1
 */
  __pyx_v_swapConfig.Height = ((int)__pyx_v_height);

  /* "psychxr/libovr/_libovr.pyx":3002
 *     swapConfig.Width = <int>width
 *     swapConfig.Height = <int>height
 *     swapConfig.MipLevels = <int>levels             # <<<<<<<<<<<<<<
 *     swapConfig.SampleCount = 1
 *     swapConfig.StaticImage = libovr_capi.ovrFalse  # always buffered
 */
  __pyx_v_swapConfig.MipLevels = ((int)__pyx_v_levels);

  /* "psychxr/libovr/_libovr.pyx":3003
 *     swapConfig.Height = <int>height
 *     swapConfig.MipLevels = <int>levels
 *     swapConfig.SampleCount = 1             # <<<<<<<<<<<<<<
 *     swapConfig.StaticImage = libovr_capi.ovrFalse  # always buffered
 *     swapConfig.MiscFlags = libovr_capi.ovrTextureMisc_None
 */
  __pyx_v_swapConfig.SampleCount = 1;

  /* "psychxr/libovr/_libovr.pyx":3004
 *     swapConfig.MipLevels = <int>levels
 *     swapConfig.SampleCount = 1
 *     swapConfig.StaticImage = libovr_capi.ovrFalse  # always buffered             # <<<<<<<<<<<<<<
 *     swapConfig.MiscFlags = libovr_capi.ovrTextureMisc_None
 *     swapConfig.BindFlags = libovr_capi.ovrTextureBind_None
 */
  __pyx_v_swapConfig.StaticImage = ovrFalse;

  /* "psychxr/libovr/_libovr.pyx":3005
 *     swapConfig.SampleCount = 1
 *     swapConfig.StaticImage = libovr_capi.ovrFalse  # always buffered
 *     swapConfig.MiscFlags = libovr_capi.ovrTextureMisc_None             # <<<<<<<<<<<<<<
 *     swapConfig.BindFlags = libovr_capi.ovrTextureBind_None
 * 
 */
  __pyx_v_swapConfig.MiscFlags = ovrTextureMisc_None;

  /* "psychxr/libovr/_libovr.pyx":3006
 *     swapConfig.StaticImage = libovr_capi.ovrFalse  # always buffered
 *     swapConfig.MiscFlags = libovr_capi.ovrTextureMisc_None
 *     swapConfig.BindFlags = libovr_capi.ovrTextureBind_None             # <<<<<<<<<<<<<<
 * 
 *     # create the swap chain
 */
  __pyx_v_swapConfig.BindFlags = ovrTextureBind_None;

  /* "psychxr/libovr/_libovr.pyx":3010
 *     # create the swap chain
 *     cdef libovr_capi.ovrResult result = \
 *         libovr_capi.ovr_CreateTextureSwapChainGL(             # <<<<<<<<<<<<<<
 *             _ptrSession,
 *             &swapConfig,
 */
  __pyx_v_result = ovr_CreateTextureSwapChainGL(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (&__pyx_v_swapConfig), (&(__pyx_v_7psychxr_6libovr_7_libovr__swapChains[__pyx_v_swapChain])));

  /* "psychxr/libovr/_libovr.pyx":3017
 *     #_eyeLayer.ColorTexture[swapChain] = _swapChains[swapChain]
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def setEyeColorTextureSwapChain(int eye, int swapChain):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":2946
 *     return result, tex_id
 * 
 * def createTextureSwapChainGL(int swapChain, int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB, int levels=1):             # <<<<<<<<<<<<<<
 *     """Create a texture swap chain for eye image buffers.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.createTextureSwapChainGL", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3019
 *     return result
 * 
 * def setEyeColorTextureSwapChain(int eye, int swapChain):             # <<<<<<<<<<<<<<
 *     """Set the color texture swap chain for a given eye.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_67setEyeColorTextureSwapChain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_66setEyeColorTextureSwapChain[] = "setEyeColorTextureSwapChain(int eye, int swapChain)\nSet the color texture swap chain for a given eye.\n\n    Should be called after a successful 'createTextureSwapChainGL' call but\n    before any rendering is done.\n\n    Parameters\n    ----------\n    eye : int\n        Eye index.\n    swapChain : int\n        Swap chain handle to query. Must be a swap chain initialized by a\n        previous call to 'createTextureSwapChainGL'.\n\n    Examples\n    --------\n\n    Associate the swap chain with both eyes (single buffer for stereo views)::\n\n        libovr.setEyeColorTextureSwapChain(\n            libovr.LIBOVR_EYE_LEFT, libovr.LIBOVR_TEXTURE_SWAP_CHAIN0)\n        libovr.setEyeColorTextureSwapChain(\n            libovr.LIBOVR_EYE_RIGHT, libovr.LIBOVR_TEXTURE_SWAP_CHAIN0)\n\n        # same as above but with a loop\n        for eye in range(libovr.LIBOVR_EYE_COUNT):\n            libovr.setEyeColorTextureSwapChain(eye, libovr.LIBOVR_TEXTURE_SWAP_CHAIN0)\n\n    Associate a swap chain with each eye (separate buffer for stereo views)::\n\n        libovr.setEyeColorTextureSwapChain(\n            libovr.LIBOVR_EYE_LEFT, libovr.LIBOVR_TEXTURE_SWAP_CHAIN0)\n        libovr.setEyeColorTextureSwapChain(\n            libovr.LIBOVR_EYE_RIGHT, libovr.LIBOVR_TEXTURE_SWAP_CHAIN1)\n\n        # with a loop ...\n        for eye in range(libovr.LIBOVR_EYE_COUNT):\n            libovr.setEyeColorTextureSwapChain(\n                eye, libovr.LIBOVR_TEXTURE_SWAP_CHAIN0 + eye)\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_67setEyeColorTextureSwapChain = {"setEyeColorTextureSwapChain", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_67setEyeColorTextureSwapChain, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_66setEyeColorTextureSwapChain};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_67setEyeColorTextureSwapChain(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_eye;
  int __pyx_v_swapChain;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setEyeColorTextureSwapChain (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eye,&__pyx_n_s_swapChain,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eye)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_swapChain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setEyeColorTextureSwapChain", 1, 2, 2, 1); __PYX_ERR(0, 3019, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setEyeColorTextureSwapChain") < 0)) __PYX_ERR(0, 3019, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_eye = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3019, __pyx_L3_error)
    __pyx_v_swapChain = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_swapChain == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3019, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setEyeColorTextureSwapChain", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3019, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.setEyeColorTextureSwapChain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_66setEyeColorTextureSwapChain(__pyx_self, __pyx_v_eye, __pyx_v_swapChain);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_66setEyeColorTextureSwapChain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, int __pyx_v_swapChain) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setEyeColorTextureSwapChain", 0);

  /* "psychxr/libovr/_libovr.pyx":3063
 *     global _eyeLayer
 * 
 *     _eyeLayer.ColorTexture[eye] = _swapChains[swapChain]             # <<<<<<<<<<<<<<
 * 
 * def createMirrorTexture(int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB):
 */
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.ColorTexture[__pyx_v_eye]) = (__pyx_v_7psychxr_6libovr_7_libovr__swapChains[__pyx_v_swapChain]);

  /* "psychxr/libovr/_libovr.pyx":3019
 *     return result
 * 
 * def setEyeColorTextureSwapChain(int eye, int swapChain):             # <<<<<<<<<<<<<<
 *     """Set the color texture swap chain for a given eye.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3065
 *     _eyeLayer.ColorTexture[eye] = _swapChains[swapChain]
 * 
 * def createMirrorTexture(int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB):             # <<<<<<<<<<<<<<
 *     """Create a mirror texture.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_69createMirrorTexture(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_68createMirrorTexture[] = "createMirrorTexture(int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB)\nCreate a mirror texture.\n\n    This displays the content of the rendered images being presented on the\n    HMD. The image is automatically refreshed to reflect the current content\n    on the display. This displays the post-distortion texture.\n\n    Parameters\n    ----------\n    width : int\n        Width of texture in pixels.\n    height : int\n        Height of texture in pixels.\n    textureFormat : int\n        Color texture format to use, valid texture formats are:\n            - :data:`LIBOVR_FORMAT_R8G8B8A8_UNORM`\n            - :data:`LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB`\n            - :data:`LIBOVR_FORMAT_R16G16B16A16_FLOAT`\n            - :data:`LIBOVR_FORMAT_R11G11B10_FLOAT`\n\n    Returns\n    -------\n    int\n        Result of API call 'ovr_CreateMirrorTextureGL'.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_69createMirrorTexture = {"createMirrorTexture", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_69createMirrorTexture, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_68createMirrorTexture};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_69createMirrorTexture(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_width;
  int __pyx_v_height;
  int __pyx_v_textureFormat;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("createMirrorTexture (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_height,&__pyx_n_s_textureFormat,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_width)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_height)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("createMirrorTexture", 0, 2, 3, 1); __PYX_ERR(0, 3065, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_textureFormat);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "createMirrorTexture") < 0)) __PYX_ERR(0, 3065, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_width = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3065, __pyx_L3_error)
    __pyx_v_height = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_height == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3065, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_textureFormat = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_textureFormat == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3065, __pyx_L3_error)
    } else {
      __pyx_v_textureFormat = __pyx_k__27;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("createMirrorTexture", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3065, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.createMirrorTexture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_68createMirrorTexture(__pyx_self, __pyx_v_width, __pyx_v_height, __pyx_v_textureFormat);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_68createMirrorTexture(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_width, int __pyx_v_height, int __pyx_v_textureFormat) {
  ovrMirrorTextureDesc __pyx_v_mirrorDesc;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("createMirrorTexture", 0);

  /* "psychxr/libovr/_libovr.pyx":3117
 *     global _mirrorTexture
 * 
 *     mirrorDesc.Format = <libovr_capi.ovrTextureFormat>textureFormat             # <<<<<<<<<<<<<<
 *     mirrorDesc.Width = <int>width
 *     mirrorDesc.Height = <int>height
 */
  __pyx_v_mirrorDesc.Format = ((ovrTextureFormat)__pyx_v_textureFormat);

  /* "psychxr/libovr/_libovr.pyx":3118
 * 
 *     mirrorDesc.Format = <libovr_capi.ovrTextureFormat>textureFormat
 *     mirrorDesc.Width = <int>width             # <<<<<<<<<<<<<<
 *     mirrorDesc.Height = <int>height
 *     mirrorDesc.MiscFlags = libovr_capi.ovrTextureMisc_None
 */
  __pyx_v_mirrorDesc.Width = ((int)__pyx_v_width);

  /* "psychxr/libovr/_libovr.pyx":3119
 *     mirrorDesc.Format = <libovr_capi.ovrTextureFormat>textureFormat
 *     mirrorDesc.Width = <int>width
 *     mirrorDesc.Height = <int>height             # <<<<<<<<<<<<<<
 *     mirrorDesc.MiscFlags = libovr_capi.ovrTextureMisc_None
 *     mirrorDesc.MirrorOptions = libovr_capi.ovrMirrorOption_Default
 */
  __pyx_v_mirrorDesc.Height = ((int)__pyx_v_height);

  /* "psychxr/libovr/_libovr.pyx":3120
 *     mirrorDesc.Width = <int>width
 *     mirrorDesc.Height = <int>height
 *     mirrorDesc.MiscFlags = libovr_capi.ovrTextureMisc_None             # <<<<<<<<<<<<<<
 *     mirrorDesc.MirrorOptions = libovr_capi.ovrMirrorOption_Default
 * 
 */
  __pyx_v_mirrorDesc.MiscFlags = ovrTextureMisc_None;

  /* "psychxr/libovr/_libovr.pyx":3121
 *     mirrorDesc.Height = <int>height
 *     mirrorDesc.MiscFlags = libovr_capi.ovrTextureMisc_None
 *     mirrorDesc.MirrorOptions = libovr_capi.ovrMirrorOption_Default             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_CreateMirrorTextureGL(
 */
  __pyx_v_mirrorDesc.MirrorOptions = ovrMirrorOption_Default;

  /* "psychxr/libovr/_libovr.pyx":3123
 *     mirrorDesc.MirrorOptions = libovr_capi.ovrMirrorOption_Default
 * 
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_CreateMirrorTextureGL(             # <<<<<<<<<<<<<<
 *         _ptrSession, &mirrorDesc, &_mirrorTexture)
 * 
 */
  __pyx_v_result = ovr_CreateMirrorTextureGL(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (&__pyx_v_mirrorDesc), (&__pyx_v_7psychxr_6libovr_7_libovr__mirrorTexture));

  /* "psychxr/libovr/_libovr.pyx":3126
 *         _ptrSession, &mirrorDesc, &_mirrorTexture)
 * 
 *     return <int>result             # <<<<<<<<<<<<<<
 * 
 * def getMirrorTexture():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)__pyx_v_result)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3065
 *     _eyeLayer.ColorTexture[eye] = _swapChains[swapChain]
 * 
 * def createMirrorTexture(int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB):             # <<<<<<<<<<<<<<
 *     """Create a mirror texture.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.createMirrorTexture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3128
 *     return <int>result
 * 
 * def getMirrorTexture():             # <<<<<<<<<<<<<<
 *     """Mirror texture ID.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_71getMirrorTexture(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_70getMirrorTexture[] = "getMirrorTexture()\nMirror texture ID.\n\n    Returns\n    -------\n    tuple of int\n        Result of API call 'ovr_GetMirrorTextureBufferGL' and the mirror\n        texture ID. A mirror texture ID = 0 is invalid.\n\n    Examples\n    --------\n\n    Getting the mirror texture for use::\n\n        # get the mirror texture\n        result, mirrorTexId = libovr.getMirrorTexture()\n        if libovr.LIBOVR_FAILURE(result):\n            # raise error ...\n        # bind the mirror texture texture to the framebuffer\n        GL.glFramebufferTexture2D(\n            GL.GL_READ_FRAMEBUFFER,\n            GL.GL_COLOR_ATTACHMENT0,\n            GL.GL_TEXTURE_2D, mirrorTexId, 0)\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_71getMirrorTexture = {"getMirrorTexture", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_71getMirrorTexture, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_70getMirrorTexture};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_71getMirrorTexture(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getMirrorTexture (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_70getMirrorTexture(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_70getMirrorTexture(CYTHON_UNUSED PyObject *__pyx_self) {
  unsigned int __pyx_v_mirror_id;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getMirrorTexture", 0);

  /* "psychxr/libovr/_libovr.pyx":3158
 *     global _mirrorTexture
 * 
 *     if _mirrorTexture == NULL:  # no texture created             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((__pyx_v_7psychxr_6libovr_7_libovr__mirrorTexture == NULL) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":3159
 * 
 *     if _mirrorTexture == NULL:  # no texture created
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrResult result = \
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":3158
 *     global _mirrorTexture
 * 
 *     if _mirrorTexture == NULL:  # no texture created             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":3162
 * 
 *     cdef libovr_capi.ovrResult result = \
 *         libovr_capi.ovr_GetMirrorTextureBufferGL(             # <<<<<<<<<<<<<<
 *             _ptrSession,
 *             _mirrorTexture,
 */
  __pyx_v_result = ovr_GetMirrorTextureBufferGL(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, __pyx_v_7psychxr_6libovr_7_libovr__mirrorTexture, (&__pyx_v_mirror_id));

  /* "psychxr/libovr/_libovr.pyx":3167
 *             &mirror_id)
 * 
 *     return <int>result, <unsigned int>mirror_id             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(((int)__pyx_v_result)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_unsigned_int(((unsigned int)__pyx_v_mirror_id)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3128
 *     return <int>result
 * 
 * def getMirrorTexture():             # <<<<<<<<<<<<<<
 *     """Mirror texture ID.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getMirrorTexture", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3170
 * 
 * 
 * def getTrackingState(double absTime, bint latencyMarker=True):             # <<<<<<<<<<<<<<
 *     """Get the current poses of the head and hands.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_73getTrackingState(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_72getTrackingState[] = "getTrackingState(double absTime, bool latencyMarker=True)\nGet the current poses of the head and hands.\n\n    Parameters\n    ----------\n    absTime : float\n        Absolute time in seconds which the tracking state refers to.\n    latencyMarker : bool\n        Insert a latency marker for motion-to-photon calculation.\n\n    Returns\n    -------\n    tuple of LibOVRPoseState\n        Pose state for the head, left and right hands.\n\n    Examples\n    --------\n    Getting the head pose and calculating eye render poses::\n\n        t = hmd.getPredictedDisplayTime()\n        trackedPoses = hmd.getTrackedPoses(t)\n        head = trackedPoses['Head']\n\n        # check if tracking\n        if head.orientationTracked and head.positionTracked:\n            hmd.calcEyePose(head.thePose)  # calculate eye poses\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_73getTrackingState = {"getTrackingState", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_73getTrackingState, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_72getTrackingState};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_73getTrackingState(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_absTime;
  int __pyx_v_latencyMarker;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTrackingState (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_absTime,&__pyx_n_s_latencyMarker,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_absTime)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_latencyMarker);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getTrackingState") < 0)) __PYX_ERR(0, 3170, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_absTime = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_absTime == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3170, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_latencyMarker = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_latencyMarker == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3170, __pyx_L3_error)
    } else {
      __pyx_v_latencyMarker = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getTrackingState", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3170, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTrackingState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_72getTrackingState(__pyx_self, __pyx_v_absTime, __pyx_v_latencyMarker);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_72getTrackingState(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_absTime, int __pyx_v_latencyMarker) {
  ovrBool __pyx_v_use_marker;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *__pyx_v_toReturn = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ovrBool __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("getTrackingState", 0);

  /* "psychxr/libovr/_libovr.pyx":3203
 * 
 *     cdef libovr_capi.ovrBool use_marker = \
 *         libovr_capi.ovrTrue if latencyMarker else libovr_capi.ovrFalse             # <<<<<<<<<<<<<<
 * 
 *     # tracking state object that is actually returned to Python land
 */
  if ((__pyx_v_latencyMarker != 0)) {
    __pyx_t_1 = ovrTrue;
  } else {
    __pyx_t_1 = ovrFalse;
  }
  __pyx_v_use_marker = __pyx_t_1;

  /* "psychxr/libovr/_libovr.pyx":3206
 * 
 *     # tracking state object that is actually returned to Python land
 *     cdef LibOVRTrackingState toReturn = LibOVRTrackingState()             # <<<<<<<<<<<<<<
 *     toReturn.c_data[0] = libovr_capi.ovr_GetTrackingState(
 *         _ptrSession, absTime, use_marker)
 */
  __pyx_t_2 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRTrackingState)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_toReturn = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "psychxr/libovr/_libovr.pyx":3207
 *     # tracking state object that is actually returned to Python land
 *     cdef LibOVRTrackingState toReturn = LibOVRTrackingState()
 *     toReturn.c_data[0] = libovr_capi.ovr_GetTrackingState(             # <<<<<<<<<<<<<<
 *         _ptrSession, absTime, use_marker)
 * 
 */
  (__pyx_v_toReturn->c_data[0]) = ovr_GetTrackingState(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, __pyx_v_absTime, __pyx_v_use_marker);

  /* "psychxr/libovr/_libovr.pyx":3213
 *     #_eyeLayer.SensorSampleTime = toReturn.c_data[0].HeadPose.TimeInSeconds
 * 
 *     return toReturn             # <<<<<<<<<<<<<<
 * 
 * # def getDevicePose(int deviceType, double absTime, bint latencyMarker=True):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_toReturn));
  __pyx_r = ((PyObject *)__pyx_v_toReturn);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3170
 * 
 * 
 * def getTrackingState(double absTime, bint latencyMarker=True):             # <<<<<<<<<<<<<<
 *     """Get the current poses of the head and hands.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTrackingState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_toReturn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3273
 * #     return result, devicePose
 * 
 * def getDevicePoses(object deviceTypes, double absTime, bint latencyMarker=True):             # <<<<<<<<<<<<<<
 *     """Get tracked device poses.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_75getDevicePoses(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_74getDevicePoses[] = "getDevicePoses(deviceTypes, double absTime, bool latencyMarker=True)\nGet tracked device poses.\n\n    Each pose in the returned array matches the device type at each index\n    specified in 'deviceTypes'. You need to call this function to get the poses\n    for 'objects', which are additional Touch controllers that can be paired and\n    tracked in the scene.\n\n    It is recommended that `getTrackingState` is used for obtaining the head and\n    hand poses.\n\n    Parameters\n    ----------\n    deviceTypes : `list` or `tuple` of `int`\n        List of device types. Valid device types identifiers are:\n\n        - LIBOVR_TRACKED_DEVICE_TYPE_HMD: The head or HMD.\n        - LIBOVR_TRACKED_DEVICE_TYPE_LTOUCH: Left touch controller or hand.\n        - LIBOVR_TRACKED_DEVICE_TYPE_RTOUCH: Right touch controller or hand.\n        - LIBOVR_TRACKED_DEVICE_TYPE_TOUCH: Both touch controllers.\n\n        Up to four additional touch controllers can be paired and tracked, they\n        are assigned as:\n\n        - LIBOVR_TRACKED_DEVICE_TYPE_OBJECT0\n        - LIBOVR_TRACKED_DEVICE_TYPE_OBJECT1\n        - LIBOVR_TRACKED_DEVICE_TYPE_OBJECT2\n        - LIBOVR_TRACKED_DEVICE_TYPE_OBJECT3\n\n    absTime : `float`\n        Absolute time in seconds poses refer to.\n    latencyMarker: `bool`\n        Insert a marker for motion-to-photon latency calculation. Set this to\n        False if 'getTrackingState' was previously called and a latency marker\n        was set there.\n\n    Returns\n    -------\n    tuple\n        Return code (`int`) of the 'ovr_GetDevicePoses' API call and list of\n        tracked device poses (`list` of `LibOVRPoseState`). If a device cannot\n        be tracked, the return code will be `LIBOVR_ERROR_LOST_TRACKING`.\n\n    Warning\n    -------\n    If multiple devices were specified with `deviceTypes`, the return code will\n    be `LIBOVR_ERROR_LOST_TRACKING` if ANY of the devices lost tracking.\n\n    Examples\n    --------\n\n    Get HMD and touch controller po""ses::\n\n        deviceTypes = (ovr.LIBOVR_TRACKED_DEVICE_TYPE_HMD,\n                       ovr.LIBOVR_TRACKED_DEVICE_TYPE_LTOUCH,\n                       ovr.LIBOVR_TRACKED_DEVICE_TYPE_RTOUCH)\n        headPose, leftHandPose, rightHandPose = ovr.getDevicePoses(\n            deviceTypes, absTime)\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_75getDevicePoses = {"getDevicePoses", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_75getDevicePoses, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_74getDevicePoses};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_75getDevicePoses(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_deviceTypes = 0;
  double __pyx_v_absTime;
  int __pyx_v_latencyMarker;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getDevicePoses (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_deviceTypes,&__pyx_n_s_absTime,&__pyx_n_s_latencyMarker,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_deviceTypes)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_absTime)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getDevicePoses", 0, 2, 3, 1); __PYX_ERR(0, 3273, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_latencyMarker);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getDevicePoses") < 0)) __PYX_ERR(0, 3273, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_deviceTypes = values[0];
    __pyx_v_absTime = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_absTime == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 3273, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_latencyMarker = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_latencyMarker == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3273, __pyx_L3_error)
    } else {
      __pyx_v_latencyMarker = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getDevicePoses", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3273, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getDevicePoses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_74getDevicePoses(__pyx_self, __pyx_v_deviceTypes, __pyx_v_absTime, __pyx_v_latencyMarker);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_74getDevicePoses(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_deviceTypes, double __pyx_v_absTime, int __pyx_v_latencyMarker) {
  int __pyx_v_count;
  ovrTrackedDeviceType *__pyx_v_devices;
  int __pyx_v_i;
  ovrPoseStatef *__pyx_v_devicePoses;
  ovrResult __pyx_v_result;
  PyObject *__pyx_v_outPoses = 0;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *__pyx_v_thisPose = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  ovrTrackedDeviceType __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("getDevicePoses", 0);

  /* "psychxr/libovr/_libovr.pyx":3334
 *     """
 *     # give a success code and empty pose list if an empty list was specified
 *     if not deviceTypes:             # <<<<<<<<<<<<<<
 *         return libovr_capi.ovrSuccess, []
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_deviceTypes); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 3334, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":3335
 *     # give a success code and empty pose list if an empty list was specified
 *     if not deviceTypes:
 *         return libovr_capi.ovrSuccess, []             # <<<<<<<<<<<<<<
 * 
 *     global _ptrSession
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_ovrSuccessType(ovrSuccess); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":3334
 *     """
 *     # give a success code and empty pose list if an empty list was specified
 *     if not deviceTypes:             # <<<<<<<<<<<<<<
 *         return libovr_capi.ovrSuccess, []
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":3342
 * 
 *     # for computing app photon-to-motion latency
 *     if latencyMarker:             # <<<<<<<<<<<<<<
 *         _eyeLayer.SensorSampleTime = absTime
 * 
 */
  __pyx_t_2 = (__pyx_v_latencyMarker != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":3343
 *     # for computing app photon-to-motion latency
 *     if latencyMarker:
 *         _eyeLayer.SensorSampleTime = absTime             # <<<<<<<<<<<<<<
 * 
 *     # allocate arrays to store pose types and poses
 */
    __pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.SensorSampleTime = __pyx_v_absTime;

    /* "psychxr/libovr/_libovr.pyx":3342
 * 
 *     # for computing app photon-to-motion latency
 *     if latencyMarker:             # <<<<<<<<<<<<<<
 *         _eyeLayer.SensorSampleTime = absTime
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":3346
 * 
 *     # allocate arrays to store pose types and poses
 *     cdef int count = <int>len(deviceTypes)             # <<<<<<<<<<<<<<
 *     cdef libovr_capi.ovrTrackedDeviceType* devices = \
 *         <libovr_capi.ovrTrackedDeviceType*>malloc(
 */
  __pyx_t_6 = PyObject_Length(__pyx_v_deviceTypes); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 3346, __pyx_L1_error)
  __pyx_v_count = ((int)__pyx_t_6);

  /* "psychxr/libovr/_libovr.pyx":3348
 *     cdef int count = <int>len(deviceTypes)
 *     cdef libovr_capi.ovrTrackedDeviceType* devices = \
 *         <libovr_capi.ovrTrackedDeviceType*>malloc(             # <<<<<<<<<<<<<<
 *             count * sizeof(libovr_capi.ovrTrackedDeviceType))
 *     if not devices:
 */
  __pyx_v_devices = ((ovrTrackedDeviceType *)malloc((__pyx_v_count * (sizeof(ovrTrackedDeviceType)))));

  /* "psychxr/libovr/_libovr.pyx":3350
 *         <libovr_capi.ovrTrackedDeviceType*>malloc(
 *             count * sizeof(libovr_capi.ovrTrackedDeviceType))
 *     if not devices:             # <<<<<<<<<<<<<<
 *         raise MemoryError("Failed to allocate array 'devices'.")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_devices != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "psychxr/libovr/_libovr.pyx":3351
 *             count * sizeof(libovr_capi.ovrTrackedDeviceType))
 *     if not devices:
 *         raise MemoryError("Failed to allocate array 'devices'.")             # <<<<<<<<<<<<<<
 * 
 *     cdef int i = 0
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 3351, __pyx_L1_error)

    /* "psychxr/libovr/_libovr.pyx":3350
 *         <libovr_capi.ovrTrackedDeviceType*>malloc(
 *             count * sizeof(libovr_capi.ovrTrackedDeviceType))
 *     if not devices:             # <<<<<<<<<<<<<<
 *         raise MemoryError("Failed to allocate array 'devices'.")
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":3353
 *         raise MemoryError("Failed to allocate array 'devices'.")
 * 
 *     cdef int i = 0             # <<<<<<<<<<<<<<
 *     for i in range(count):
 *         devices[i] = <libovr_capi.ovrTrackedDeviceType>deviceTypes[i]
 */
  __pyx_v_i = 0;

  /* "psychxr/libovr/_libovr.pyx":3354
 * 
 *     cdef int i = 0
 *     for i in range(count):             # <<<<<<<<<<<<<<
 *         devices[i] = <libovr_capi.ovrTrackedDeviceType>deviceTypes[i]
 * 
 */
  __pyx_t_7 = __pyx_v_count;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "psychxr/libovr/_libovr.pyx":3355
 *     cdef int i = 0
 *     for i in range(count):
 *         devices[i] = <libovr_capi.ovrTrackedDeviceType>deviceTypes[i]             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrPoseStatef* devicePoses = \
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_deviceTypes, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = ((ovrTrackedDeviceType)__Pyx_PyInt_As_ovrTrackedDeviceType(__pyx_t_5)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 3355, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (__pyx_v_devices[__pyx_v_i]) = ((ovrTrackedDeviceType)__pyx_t_10);
  }

  /* "psychxr/libovr/_libovr.pyx":3358
 * 
 *     cdef libovr_capi.ovrPoseStatef* devicePoses = \
 *         <libovr_capi.ovrPoseStatef*>malloc(             # <<<<<<<<<<<<<<
 *             count * sizeof(libovr_capi.ovrPoseStatef))
 *     if not devicePoses:
 */
  __pyx_v_devicePoses = ((ovrPoseStatef *)malloc((__pyx_v_count * (sizeof(ovrPoseStatef)))));

  /* "psychxr/libovr/_libovr.pyx":3360
 *         <libovr_capi.ovrPoseStatef*>malloc(
 *             count * sizeof(libovr_capi.ovrPoseStatef))
 *     if not devicePoses:             # <<<<<<<<<<<<<<
 *         raise MemoryError("Failed to allocate array 'devicePoses'.")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_devicePoses != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "psychxr/libovr/_libovr.pyx":3361
 *             count * sizeof(libovr_capi.ovrPoseStatef))
 *     if not devicePoses:
 *         raise MemoryError("Failed to allocate array 'devicePoses'.")             # <<<<<<<<<<<<<<
 * 
 *     # get the device poses
 */
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(0, 3361, __pyx_L1_error)

    /* "psychxr/libovr/_libovr.pyx":3360
 *         <libovr_capi.ovrPoseStatef*>malloc(
 *             count * sizeof(libovr_capi.ovrPoseStatef))
 *     if not devicePoses:             # <<<<<<<<<<<<<<
 *         raise MemoryError("Failed to allocate array 'devicePoses'.")
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":3364
 * 
 *     # get the device poses
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_GetDevicePoses(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         devices,
 */
  __pyx_v_result = ovr_GetDevicePoses(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, __pyx_v_devices, __pyx_v_count, __pyx_v_absTime, __pyx_v_devicePoses);

  /* "psychxr/libovr/_libovr.pyx":3372
 * 
 *     # build list of device poses
 *     cdef list outPoses = list()             # <<<<<<<<<<<<<<
 *     cdef LibOVRPoseState thisPose
 *     for i in range(count):
 */
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_v_outPoses = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "psychxr/libovr/_libovr.pyx":3374
 *     cdef list outPoses = list()
 *     cdef LibOVRPoseState thisPose
 *     for i in range(count):             # <<<<<<<<<<<<<<
 *         thisPose = LibOVRPoseState()  # new
 *         thisPose.c_data[0] = devicePoses[i]
 */
  __pyx_t_7 = __pyx_v_count;
  __pyx_t_8 = __pyx_t_7;
  for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "psychxr/libovr/_libovr.pyx":3375
 *     cdef LibOVRPoseState thisPose
 *     for i in range(count):
 *         thisPose = LibOVRPoseState()  # new             # <<<<<<<<<<<<<<
 *         thisPose.c_data[0] = devicePoses[i]
 *         outPoses.append(thisPose)
 */
    __pyx_t_5 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPoseState)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_thisPose, ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "psychxr/libovr/_libovr.pyx":3376
 *     for i in range(count):
 *         thisPose = LibOVRPoseState()  # new
 *         thisPose.c_data[0] = devicePoses[i]             # <<<<<<<<<<<<<<
 *         outPoses.append(thisPose)
 * 
 */
    (__pyx_v_thisPose->c_data[0]) = (__pyx_v_devicePoses[__pyx_v_i]);

    /* "psychxr/libovr/_libovr.pyx":3377
 *         thisPose = LibOVRPoseState()  # new
 *         thisPose.c_data[0] = devicePoses[i]
 *         outPoses.append(thisPose)             # <<<<<<<<<<<<<<
 * 
 *     # free the allocated arrays
 */
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_outPoses, ((PyObject *)__pyx_v_thisPose)); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 3377, __pyx_L1_error)
  }

  /* "psychxr/libovr/_libovr.pyx":3380
 * 
 *     # free the allocated arrays
 *     free(devices)             # <<<<<<<<<<<<<<
 *     free(devicePoses)
 * 
 */
  free(__pyx_v_devices);

  /* "psychxr/libovr/_libovr.pyx":3381
 *     # free the allocated arrays
 *     free(devices)
 *     free(devicePoses)             # <<<<<<<<<<<<<<
 * 
 *     return result, outPoses
 */
  free(__pyx_v_devicePoses);

  /* "psychxr/libovr/_libovr.pyx":3383
 *     free(devicePoses)
 * 
 *     return result, outPoses             # <<<<<<<<<<<<<<
 * 
 * def calcEyePoses(LibOVRPose headPose):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_v_outPoses);
  __Pyx_GIVEREF(__pyx_v_outPoses);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_outPoses);
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3273
 * #     return result, devicePose
 * 
 * def getDevicePoses(object deviceTypes, double absTime, bint latencyMarker=True):             # <<<<<<<<<<<<<<
 *     """Get tracked device poses.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getDevicePoses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_outPoses);
  __Pyx_XDECREF((PyObject *)__pyx_v_thisPose);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3385
 *     return result, outPoses
 * 
 * def calcEyePoses(LibOVRPose headPose):             # <<<<<<<<<<<<<<
 *     """Calculate eye poses using a given pose state.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_77calcEyePoses(PyObject *__pyx_self, PyObject *__pyx_v_headPose); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_76calcEyePoses[] = "calcEyePoses(LibOVRPose headPose)\nCalculate eye poses using a given pose state.\n\n    Eye poses are derived from the head pose stored in the pose state and\n    the HMD to eye poses reported by LibOVR. Calculated eye poses are stored\n    and passed to the compositor when 'endFrame' is called for additional\n    rendering.\n\n    You can access the computed poses via the 'getEyeRenderPose' function.\n\n    Parameters\n    ----------\n    headPose : LibOVRPose\n        Head pose.\n\n    Examples\n    --------\n\n    Compute the eye poses from tracker data::\n\n        t = hmd.getPredictedDisplayTime()\n        trackedPoses = hmd.getTrackedPoses(t)\n\n        head = trackedPoses['Head']\n\n        # check if tracking\n        if head.orientationTracked and head.positionTracked:\n            hmd.calcEyePoses(head.thePose)  # calculate eye poses\n        else:\n            # do something ...\n\n        # computed render poses appear here\n        renderPoseLeft, renderPoseRight = hmd.getEyeRenderPoses()\n\n    Use a custom head pose::\n\n        headPose = LibOVRPose((0., 1.5, 0.))  # eyes 1.5 meters off the ground\n        hmd.calcEyePoses(headPose)  # calculate eye poses\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_77calcEyePoses = {"calcEyePoses", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_77calcEyePoses, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_76calcEyePoses};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_77calcEyePoses(PyObject *__pyx_self, PyObject *__pyx_v_headPose) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calcEyePoses (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_headPose), __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose, 1, "headPose", 0))) __PYX_ERR(0, 3385, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_76calcEyePoses(__pyx_self, ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_headPose));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_76calcEyePoses(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_headPose) {
  ovrPosef __pyx_v_hmdToEyePoses[2];
  OVR::Vector3f __pyx_v_pos;
  OVR::Quatf __pyx_v_ori;
  OVR::Vector3f __pyx_v_up;
  OVR::Vector3f __pyx_v_forward;
  OVR::Matrix4f __pyx_v_rm;
  int __pyx_v_eye;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ovrPosef __pyx_t_1;
  ovrEyeType __pyx_t_2;
  ovrEyeType __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  OVR::Vector3f __pyx_t_6;
  __Pyx_RefNannySetupContext("calcEyePoses", 0);

  /* "psychxr/libovr/_libovr.pyx":3433
 * 
 *     cdef libovr_capi.ovrPosef[2] hmdToEyePoses
 *     hmdToEyePoses[0] = _eyeRenderDesc[0].HmdToEyePose             # <<<<<<<<<<<<<<
 *     hmdToEyePoses[1] = _eyeRenderDesc[1].HmdToEyePose
 * 
 */
  __pyx_t_1 = (__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[0]).HmdToEyePose;
  (__pyx_v_hmdToEyePoses[0]) = __pyx_t_1;

  /* "psychxr/libovr/_libovr.pyx":3434
 *     cdef libovr_capi.ovrPosef[2] hmdToEyePoses
 *     hmdToEyePoses[0] = _eyeRenderDesc[0].HmdToEyePose
 *     hmdToEyePoses[1] = _eyeRenderDesc[1].HmdToEyePose             # <<<<<<<<<<<<<<
 * 
 *      # calculate the eye poses
 */
  __pyx_t_1 = (__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[1]).HmdToEyePose;
  (__pyx_v_hmdToEyePoses[1]) = __pyx_t_1;

  /* "psychxr/libovr/_libovr.pyx":3437
 * 
 *      # calculate the eye poses
 *     libovr_capi.ovr_CalcEyePoses2(             # <<<<<<<<<<<<<<
 *         headPose.c_data[0],
 *         hmdToEyePoses,
 */
  ovr_CalcEyePoses2((__pyx_v_headPose->c_data[0]), __pyx_v_hmdToEyePoses, __pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.RenderPose);

  /* "psychxr/libovr/_libovr.pyx":3449
 *     cdef libovr_math.Matrix4f rm
 * 
 *     cdef int eye = 0             # <<<<<<<<<<<<<<
 *     for eye in range(libovr_capi.ovrEye_Count):
 *         pos = <libovr_math.Vector3f>_eyeLayer.RenderPose[eye].Position
 */
  __pyx_v_eye = 0;

  /* "psychxr/libovr/_libovr.pyx":3450
 * 
 *     cdef int eye = 0
 *     for eye in range(libovr_capi.ovrEye_Count):             # <<<<<<<<<<<<<<
 *         pos = <libovr_math.Vector3f>_eyeLayer.RenderPose[eye].Position
 *         ori = <libovr_math.Quatf>_eyeLayer.RenderPose[eye].Orientation
 */
  __pyx_t_2 = ovrEye_Count;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_eye = __pyx_t_4;

    /* "psychxr/libovr/_libovr.pyx":3451
 *     cdef int eye = 0
 *     for eye in range(libovr_capi.ovrEye_Count):
 *         pos = <libovr_math.Vector3f>_eyeLayer.RenderPose[eye].Position             # <<<<<<<<<<<<<<
 *         ori = <libovr_math.Quatf>_eyeLayer.RenderPose[eye].Orientation
 * 
 */
    __pyx_v_pos = ((OVR::Vector3f)(__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.RenderPose[__pyx_v_eye]).Position);

    /* "psychxr/libovr/_libovr.pyx":3452
 *     for eye in range(libovr_capi.ovrEye_Count):
 *         pos = <libovr_math.Vector3f>_eyeLayer.RenderPose[eye].Position
 *         ori = <libovr_math.Quatf>_eyeLayer.RenderPose[eye].Orientation             # <<<<<<<<<<<<<<
 * 
 *         if not ori.IsNormalized():  # make sure orientation is normalized
 */
    __pyx_v_ori = ((OVR::Quatf)(__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.RenderPose[__pyx_v_eye]).Orientation);

    /* "psychxr/libovr/_libovr.pyx":3454
 *         ori = <libovr_math.Quatf>_eyeLayer.RenderPose[eye].Orientation
 * 
 *         if not ori.IsNormalized():  # make sure orientation is normalized             # <<<<<<<<<<<<<<
 *             ori.Normalize()
 * 
 */
    __pyx_t_5 = ((!(__pyx_v_ori.IsNormalized() != 0)) != 0);
    if (__pyx_t_5) {

      /* "psychxr/libovr/_libovr.pyx":3455
 * 
 *         if not ori.IsNormalized():  # make sure orientation is normalized
 *             ori.Normalize()             # <<<<<<<<<<<<<<
 * 
 *         rm = libovr_math.Matrix4f(ori)
 */
      __pyx_v_ori.Normalize();

      /* "psychxr/libovr/_libovr.pyx":3454
 *         ori = <libovr_math.Quatf>_eyeLayer.RenderPose[eye].Orientation
 * 
 *         if not ori.IsNormalized():  # make sure orientation is normalized             # <<<<<<<<<<<<<<
 *             ori.Normalize()
 * 
 */
    }

    /* "psychxr/libovr/_libovr.pyx":3457
 *             ori.Normalize()
 * 
 *         rm = libovr_math.Matrix4f(ori)             # <<<<<<<<<<<<<<
 *         up = rm.Transform(libovr_math.Vector3f(0., 1., 0.))
 *         forward = rm.Transform(libovr_math.Vector3f(0., 0., -1.))
 */
    __pyx_v_rm = OVR::Matrix4f(__pyx_v_ori);

    /* "psychxr/libovr/_libovr.pyx":3458
 * 
 *         rm = libovr_math.Matrix4f(ori)
 *         up = rm.Transform(libovr_math.Vector3f(0., 1., 0.))             # <<<<<<<<<<<<<<
 *         forward = rm.Transform(libovr_math.Vector3f(0., 0., -1.))
 *         _eyeViewMatrix[eye] = \
 */
    try {
      __pyx_t_6 = OVR::Vector3f(0., 1., 0.);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3458, __pyx_L1_error)
    }
    __pyx_v_up = __pyx_v_rm.Transform(__pyx_t_6);

    /* "psychxr/libovr/_libovr.pyx":3459
 *         rm = libovr_math.Matrix4f(ori)
 *         up = rm.Transform(libovr_math.Vector3f(0., 1., 0.))
 *         forward = rm.Transform(libovr_math.Vector3f(0., 0., -1.))             # <<<<<<<<<<<<<<
 *         _eyeViewMatrix[eye] = \
 *             libovr_math.Matrix4f.LookAtRH(pos, pos + forward, up)
 */
    try {
      __pyx_t_6 = OVR::Vector3f(0., 0., -1.);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 3459, __pyx_L1_error)
    }
    __pyx_v_forward = __pyx_v_rm.Transform(__pyx_t_6);

    /* "psychxr/libovr/_libovr.pyx":3460
 *         up = rm.Transform(libovr_math.Vector3f(0., 1., 0.))
 *         forward = rm.Transform(libovr_math.Vector3f(0., 0., -1.))
 *         _eyeViewMatrix[eye] = \             # <<<<<<<<<<<<<<
 *             libovr_math.Matrix4f.LookAtRH(pos, pos + forward, up)
 *         _eyeViewProjectionMatrix[eye] = \
 */
    (__pyx_v_7psychxr_6libovr_7_libovr__eyeViewMatrix[__pyx_v_eye]) = OVR::Matrix4f::LookAtRH(__pyx_v_pos, (__pyx_v_pos + __pyx_v_forward), __pyx_v_up);

    /* "psychxr/libovr/_libovr.pyx":3462
 *         _eyeViewMatrix[eye] = \
 *             libovr_math.Matrix4f.LookAtRH(pos, pos + forward, up)
 *         _eyeViewProjectionMatrix[eye] = \             # <<<<<<<<<<<<<<
 *             _eyeProjectionMatrix[eye] * _eyeViewMatrix[eye]
 * 
 */
    (__pyx_v_7psychxr_6libovr_7_libovr__eyeViewProjectionMatrix[__pyx_v_eye]) = ((__pyx_v_7psychxr_6libovr_7_libovr__eyeProjectionMatrix[__pyx_v_eye]) * (__pyx_v_7psychxr_6libovr_7_libovr__eyeViewMatrix[__pyx_v_eye]));
  }

  /* "psychxr/libovr/_libovr.pyx":3385
 *     return result, outPoses
 * 
 * def calcEyePoses(LibOVRPose headPose):             # <<<<<<<<<<<<<<
 *     """Calculate eye poses using a given pose state.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.calcEyePoses", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3465
 *             _eyeProjectionMatrix[eye] * _eyeViewMatrix[eye]
 * 
 * def getHmdToEyePose(int eye):             # <<<<<<<<<<<<<<
 *     """HMD to eye poses.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_79getHmdToEyePose(PyObject *__pyx_self, PyObject *__pyx_arg_eye); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_78getHmdToEyePose[] = "getHmdToEyePose(int eye)\nHMD to eye poses.\n\n    These are the prototype eye poses specified by LibOVR, defined only\n    after 'start' is called. These poses are transformed by the head pose\n    by 'calcEyePoses' to get 'getEyeRenderPoses'.\n\n    Parameters\n    ----------\n    eye : int\n        Eye index.\n\n    Returns\n    -------\n    tuple of LibOVRPose\n        Copy of the HMD to eye pose.\n\n    Notes\n    -----\n    The horizontal (x-axis) separation of the eye poses are determined by the\n    configured lens spacing (slider adjustment). This spacing is supposed to\n    correspond to the actual inter-ocular distance (IOD) of the user. You can\n    get the IOD used for rendering by adding up the absolute values of the\n    x-components of the eye poses, or by multiplying the value of\n    'getEyeToNoseDist()' by two. Furthermore, the IOD values can be altered,\n    prior to calling 'calcEyePoses', to override the values specified by LibOVR.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_79getHmdToEyePose = {"getHmdToEyePose", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_79getHmdToEyePose, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_78getHmdToEyePose};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_79getHmdToEyePose(PyObject *__pyx_self, PyObject *__pyx_arg_eye) {
  int __pyx_v_eye;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getHmdToEyePose (wrapper)", 0);
  assert(__pyx_arg_eye); {
    __pyx_v_eye = __Pyx_PyInt_As_int(__pyx_arg_eye); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3465, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getHmdToEyePose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_78getHmdToEyePose(__pyx_self, ((int)__pyx_v_eye));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_78getHmdToEyePose(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getHmdToEyePose", 0);

  /* "psychxr/libovr/_libovr.pyx":3494
 *     """
 *     global _eyeRenderDesc
 *     return LibOVRPose.fromPtr(&_eyeRenderDesc[eye].HmdToEyePose)             # <<<<<<<<<<<<<<
 * 
 * def setHmdToEyePose(int eye, LibOVRPose eyePose):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPose->fromPtr((&(__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).HmdToEyePose), NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3465
 *             _eyeProjectionMatrix[eye] * _eyeViewMatrix[eye]
 * 
 * def getHmdToEyePose(int eye):             # <<<<<<<<<<<<<<
 *     """HMD to eye poses.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getHmdToEyePose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3496
 *     return LibOVRPose.fromPtr(&_eyeRenderDesc[eye].HmdToEyePose)
 * 
 * def setHmdToEyePose(int eye, LibOVRPose eyePose):             # <<<<<<<<<<<<<<
 *     """Set the HMD eye poses.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_81setHmdToEyePose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_80setHmdToEyePose[] = "setHmdToEyePose(int eye, LibOVRPose eyePose)\nSet the HMD eye poses.\n\n    Parameters\n    ----------\n    eye : int\n        Eye index.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_81setHmdToEyePose = {"setHmdToEyePose", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_81setHmdToEyePose, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_80setHmdToEyePose};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_81setHmdToEyePose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED int __pyx_v_eye;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_eyePose = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setHmdToEyePose (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eye,&__pyx_n_s_eyePose,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eye)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eyePose)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setHmdToEyePose", 1, 2, 2, 1); __PYX_ERR(0, 3496, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setHmdToEyePose") < 0)) __PYX_ERR(0, 3496, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_eye = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3496, __pyx_L3_error)
    __pyx_v_eyePose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setHmdToEyePose", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3496, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.setHmdToEyePose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_eyePose), __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose, 1, "eyePose", 0))) __PYX_ERR(0, 3496, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_80setHmdToEyePose(__pyx_self, __pyx_v_eye, __pyx_v_eyePose);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_80setHmdToEyePose(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED int __pyx_v_eye, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_eyePose) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setHmdToEyePose", 0);

  /* "psychxr/libovr/_libovr.pyx":3506
 *     """
 *     global _eyeRenderDesc
 *     _eyeRenderDesc[0].HmdToEyePose = eyePose.c_data[0]             # <<<<<<<<<<<<<<
 * 
 * def getEyeRenderPose(int eye):
 */
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[0]).HmdToEyePose = (__pyx_v_eyePose->c_data[0]);

  /* "psychxr/libovr/_libovr.pyx":3496
 *     return LibOVRPose.fromPtr(&_eyeRenderDesc[eye].HmdToEyePose)
 * 
 * def setHmdToEyePose(int eye, LibOVRPose eyePose):             # <<<<<<<<<<<<<<
 *     """Set the HMD eye poses.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3508
 *     _eyeRenderDesc[0].HmdToEyePose = eyePose.c_data[0]
 * 
 * def getEyeRenderPose(int eye):             # <<<<<<<<<<<<<<
 *     """Get eye render poses.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_83getEyeRenderPose(PyObject *__pyx_self, PyObject *__pyx_arg_eye); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_82getEyeRenderPose[] = "getEyeRenderPose(int eye)\nGet eye render poses.\n\n    Pose are those computed by the last 'calcEyePoses' call. Returned\n    objects are copies of the data stored internally by the session\n    instance. These poses are used to define the view matrix when rendering\n    for each eye.\n\n    Parameters\n    ----------\n    eye : int\n        Eye index.\n\n    Returns\n    -------\n    tuple of LibOVRPose\n        Copies of the HMD to eye poses for the left and right eye.\n\n    Notes\n    -----\n    The returned LibOVRPose objects are copies of data stored internally by the\n    session object. Setting renderPoses will recompute their transformation\n    matrices.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_83getEyeRenderPose = {"getEyeRenderPose", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_83getEyeRenderPose, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_82getEyeRenderPose};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_83getEyeRenderPose(PyObject *__pyx_self, PyObject *__pyx_arg_eye) {
  int __pyx_v_eye;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEyeRenderPose (wrapper)", 0);
  assert(__pyx_arg_eye); {
    __pyx_v_eye = __Pyx_PyInt_As_int(__pyx_arg_eye); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3508, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeRenderPose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_82getEyeRenderPose(__pyx_self, ((int)__pyx_v_eye));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_82getEyeRenderPose(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getEyeRenderPose", 0);

  /* "psychxr/libovr/_libovr.pyx":3534
 *     """
 *     global _eyeLayer
 *     return LibOVRPose.fromPtr(&_eyeLayer.RenderPose[eye])             # <<<<<<<<<<<<<<
 * 
 * def setEyeRenderPose(int eye, LibOVRPose value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)__pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPose->fromPtr((&(__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.RenderPose[__pyx_v_eye])), NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3508
 *     _eyeRenderDesc[0].HmdToEyePose = eyePose.c_data[0]
 * 
 * def getEyeRenderPose(int eye):             # <<<<<<<<<<<<<<
 *     """Get eye render poses.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeRenderPose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3536
 *     return LibOVRPose.fromPtr(&_eyeLayer.RenderPose[eye])
 * 
 * def setEyeRenderPose(int eye, LibOVRPose value):             # <<<<<<<<<<<<<<
 *     """Set eye render poses.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_85setEyeRenderPose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_84setEyeRenderPose[] = "setEyeRenderPose(int eye, LibOVRPose value)\nSet eye render poses.\n\n    Parameters\n    ----------\n    eye : int\n        Eye index.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_85setEyeRenderPose = {"setEyeRenderPose", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_85setEyeRenderPose, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_84setEyeRenderPose};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_85setEyeRenderPose(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_eye;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setEyeRenderPose (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eye,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eye)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setEyeRenderPose", 1, 2, 2, 1); __PYX_ERR(0, 3536, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setEyeRenderPose") < 0)) __PYX_ERR(0, 3536, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_eye = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3536, __pyx_L3_error)
    __pyx_v_value = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setEyeRenderPose", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3536, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.setEyeRenderPose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose, 1, "value", 0))) __PYX_ERR(0, 3536, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_84setEyeRenderPose(__pyx_self, __pyx_v_eye, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_84setEyeRenderPose(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_value) {
  OVR::Vector3f __pyx_v_pos;
  OVR::Quatf __pyx_v_ori;
  OVR::Vector3f __pyx_v_up;
  OVR::Vector3f __pyx_v_forward;
  OVR::Matrix4f __pyx_v_rm;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  OVR::Vector3f __pyx_t_2;
  __Pyx_RefNannySetupContext("setEyeRenderPose", 0);

  /* "psychxr/libovr/_libovr.pyx":3549
 *     global _eyeViewProjectionMatrix
 * 
 *     _eyeLayer.RenderPose[eye] = value.c_data[0]             # <<<<<<<<<<<<<<
 * 
 *     # re-compute the eye transformation matrices from poses
 */
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.RenderPose[__pyx_v_eye]) = (__pyx_v_value->c_data[0]);

  /* "psychxr/libovr/_libovr.pyx":3558
 *     cdef libovr_math.Matrix4f rm
 * 
 *     pos = <libovr_math.Vector3f>_eyeLayer.RenderPose[eye].Position             # <<<<<<<<<<<<<<
 *     ori = <libovr_math.Quatf>_eyeLayer.RenderPose[eye].Orientation
 * 
 */
  __pyx_v_pos = ((OVR::Vector3f)(__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.RenderPose[__pyx_v_eye]).Position);

  /* "psychxr/libovr/_libovr.pyx":3559
 * 
 *     pos = <libovr_math.Vector3f>_eyeLayer.RenderPose[eye].Position
 *     ori = <libovr_math.Quatf>_eyeLayer.RenderPose[eye].Orientation             # <<<<<<<<<<<<<<
 * 
 *     if not ori.IsNormalized():  # make sure orientation is normalized
 */
  __pyx_v_ori = ((OVR::Quatf)(__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.RenderPose[__pyx_v_eye]).Orientation);

  /* "psychxr/libovr/_libovr.pyx":3561
 *     ori = <libovr_math.Quatf>_eyeLayer.RenderPose[eye].Orientation
 * 
 *     if not ori.IsNormalized():  # make sure orientation is normalized             # <<<<<<<<<<<<<<
 *         ori.Normalize()
 * 
 */
  __pyx_t_1 = ((!(__pyx_v_ori.IsNormalized() != 0)) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":3562
 * 
 *     if not ori.IsNormalized():  # make sure orientation is normalized
 *         ori.Normalize()             # <<<<<<<<<<<<<<
 * 
 *     rm = libovr_math.Matrix4f(ori)
 */
    __pyx_v_ori.Normalize();

    /* "psychxr/libovr/_libovr.pyx":3561
 *     ori = <libovr_math.Quatf>_eyeLayer.RenderPose[eye].Orientation
 * 
 *     if not ori.IsNormalized():  # make sure orientation is normalized             # <<<<<<<<<<<<<<
 *         ori.Normalize()
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":3564
 *         ori.Normalize()
 * 
 *     rm = libovr_math.Matrix4f(ori)             # <<<<<<<<<<<<<<
 *     up = rm.Transform(libovr_math.Vector3f(0., 1., 0.))
 *     forward = rm.Transform(libovr_math.Vector3f(0., 0., -1.))
 */
  __pyx_v_rm = OVR::Matrix4f(__pyx_v_ori);

  /* "psychxr/libovr/_libovr.pyx":3565
 * 
 *     rm = libovr_math.Matrix4f(ori)
 *     up = rm.Transform(libovr_math.Vector3f(0., 1., 0.))             # <<<<<<<<<<<<<<
 *     forward = rm.Transform(libovr_math.Vector3f(0., 0., -1.))
 *     _eyeViewMatrix[eye] = \
 */
  try {
    __pyx_t_2 = OVR::Vector3f(0., 1., 0.);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3565, __pyx_L1_error)
  }
  __pyx_v_up = __pyx_v_rm.Transform(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":3566
 *     rm = libovr_math.Matrix4f(ori)
 *     up = rm.Transform(libovr_math.Vector3f(0., 1., 0.))
 *     forward = rm.Transform(libovr_math.Vector3f(0., 0., -1.))             # <<<<<<<<<<<<<<
 *     _eyeViewMatrix[eye] = \
 *         libovr_math.Matrix4f.LookAtRH(pos, pos + forward, up)
 */
  try {
    __pyx_t_2 = OVR::Vector3f(0., 0., -1.);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 3566, __pyx_L1_error)
  }
  __pyx_v_forward = __pyx_v_rm.Transform(__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":3567
 *     up = rm.Transform(libovr_math.Vector3f(0., 1., 0.))
 *     forward = rm.Transform(libovr_math.Vector3f(0., 0., -1.))
 *     _eyeViewMatrix[eye] = \             # <<<<<<<<<<<<<<
 *         libovr_math.Matrix4f.LookAtRH(pos, pos + forward, up)
 *     _eyeViewProjectionMatrix[eye] = \
 */
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeViewMatrix[__pyx_v_eye]) = OVR::Matrix4f::LookAtRH(__pyx_v_pos, (__pyx_v_pos + __pyx_v_forward), __pyx_v_up);

  /* "psychxr/libovr/_libovr.pyx":3569
 *     _eyeViewMatrix[eye] = \
 *         libovr_math.Matrix4f.LookAtRH(pos, pos + forward, up)
 *     _eyeViewProjectionMatrix[eye] = \             # <<<<<<<<<<<<<<
 *         _eyeProjectionMatrix[eye] * _eyeViewMatrix[eye]
 * 
 */
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeViewProjectionMatrix[__pyx_v_eye]) = ((__pyx_v_7psychxr_6libovr_7_libovr__eyeProjectionMatrix[__pyx_v_eye]) * (__pyx_v_7psychxr_6libovr_7_libovr__eyeViewMatrix[__pyx_v_eye]));

  /* "psychxr/libovr/_libovr.pyx":3536
 *     return LibOVRPose.fromPtr(&_eyeLayer.RenderPose[eye])
 * 
 * def setEyeRenderPose(int eye, LibOVRPose value):             # <<<<<<<<<<<<<<
 *     """Set eye render poses.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.setEyeRenderPose", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3572
 *         _eyeProjectionMatrix[eye] * _eyeViewMatrix[eye]
 * 
 * def getEyeProjectionMatrix(int eye, float nearClip=0.01, float farClip=1000.0, object outMatrix=None):             # <<<<<<<<<<<<<<
 *     """Compute the projection matrix.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_87getEyeProjectionMatrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_86getEyeProjectionMatrix[] = "getEyeProjectionMatrix(int eye, float nearClip=0.01, float farClip=1000.0, outMatrix=None)\nCompute the projection matrix.\n\n    The projection matrix is computed by the runtime using the eye FOV\n    parameters set with '~libovr.LibOVRSession.setEyeRenderFov' calls.\n\n    Parameters\n    ----------\n    eye : int\n        Eye index.\n    nearClip : float\n        Near clipping plane in meters.\n    farClip : float\n        Far clipping plane in meters.\n    outMatrix : ndarray or None\n\n    Returns\n    -------\n    ndarray of floats\n        4x4 projection matrix.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_87getEyeProjectionMatrix = {"getEyeProjectionMatrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_87getEyeProjectionMatrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_86getEyeProjectionMatrix};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_87getEyeProjectionMatrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_eye;
  float __pyx_v_nearClip;
  float __pyx_v_farClip;
  PyObject *__pyx_v_outMatrix = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEyeProjectionMatrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eye,&__pyx_n_s_nearClip,&__pyx_n_s_farClip,&__pyx_n_s_outMatrix,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eye)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_nearClip);
          if (value) { values[1] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_farClip);
          if (value) { values[2] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outMatrix);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getEyeProjectionMatrix") < 0)) __PYX_ERR(0, 3572, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_eye = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3572, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_nearClip = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_nearClip == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3572, __pyx_L3_error)
    } else {
      __pyx_v_nearClip = ((float)0.01);
    }
    if (values[2]) {
      __pyx_v_farClip = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_farClip == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 3572, __pyx_L3_error)
    } else {
      __pyx_v_farClip = ((float)1000.0);
    }
    __pyx_v_outMatrix = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getEyeProjectionMatrix", 0, 1, 4, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3572, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeProjectionMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_86getEyeProjectionMatrix(__pyx_self, __pyx_v_eye, __pyx_v_nearClip, __pyx_v_farClip, __pyx_v_outMatrix);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_86getEyeProjectionMatrix(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, float __pyx_v_nearClip, float __pyx_v_farClip, PyObject *__pyx_v_outMatrix) {
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_memviewslice __pyx_v_mv = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_N;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_memviewslice __pyx_t_12 = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  Py_ssize_t __pyx_t_20;
  __Pyx_RefNannySetupContext("getEyeProjectionMatrix", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":3603
 *     cdef np.ndarray[np.float32_t, ndim=2] to_return
 * 
 *     if outMatrix is None:             # <<<<<<<<<<<<<<
 *         to_return = np.zeros((4, 4), dtype=np.float32)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_outMatrix == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":3604
 * 
 *     if outMatrix is None:
 *         to_return = np.zeros((4, 4), dtype=np.float32)             # <<<<<<<<<<<<<<
 *     else:
 *         to_return = outMatrix
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 3604, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__8, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3604, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 3604, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_v_to_return, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        }
        __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
      }
      __pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_to_return.diminfo[1].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_to_return.diminfo[1].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 3604, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __pyx_v_to_return = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "psychxr/libovr/_libovr.pyx":3603
 *     cdef np.ndarray[np.float32_t, ndim=2] to_return
 * 
 *     if outMatrix is None:             # <<<<<<<<<<<<<<
 *         to_return = np.zeros((4, 4), dtype=np.float32)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":3606
 *         to_return = np.zeros((4, 4), dtype=np.float32)
 *     else:
 *         to_return = outMatrix             # <<<<<<<<<<<<<<
 * 
 *     _eyeProjectionMatrix[eye] = \
 */
  /*else*/ {
    if (!(likely(((__pyx_v_outMatrix) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_outMatrix, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 3606, __pyx_L1_error)
    __pyx_t_6 = __pyx_v_outMatrix;
    __Pyx_INCREF(__pyx_t_6);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_6), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_v_to_return, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
        }
        __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
      }
      __pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_to_return.diminfo[1].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_to_return.diminfo[1].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 3606, __pyx_L1_error)
    }
    __pyx_v_to_return = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":3608
 *         to_return = outMatrix
 * 
 *     _eyeProjectionMatrix[eye] = \             # <<<<<<<<<<<<<<
 *         <libovr_math.Matrix4f>libovr_capi.ovrMatrix4f_Projection(
 *             _eyeRenderDesc[eye].Fov,
 */
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeProjectionMatrix[__pyx_v_eye]) = ((OVR::Matrix4f)ovrMatrix4f_Projection((__pyx_v_7psychxr_6libovr_7_libovr__eyeRenderDesc[__pyx_v_eye]).Fov, __pyx_v_nearClip, __pyx_v_farClip, ovrProjection_ClipRangeOpenGL));

  /* "psychxr/libovr/_libovr.pyx":3616
 * 
 *     # fast copy matrix to numpy array
 *     cdef float [:, :] mv = to_return             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t i, j
 *     cdef Py_ssize_t N = 4
 */
  __pyx_t_12 = __Pyx_PyObject_to_MemoryviewSlice_dsds_float(((PyObject *)__pyx_v_to_return), PyBUF_WRITABLE); if (unlikely(!__pyx_t_12.memview)) __PYX_ERR(0, 3616, __pyx_L1_error)
  __pyx_v_mv = __pyx_t_12;
  __pyx_t_12.memview = NULL;
  __pyx_t_12.data = NULL;

  /* "psychxr/libovr/_libovr.pyx":3618
 *     cdef float [:, :] mv = to_return
 *     cdef Py_ssize_t i, j
 *     cdef Py_ssize_t N = 4             # <<<<<<<<<<<<<<
 *     i = j = 0
 *     for i in range(N):
 */
  __pyx_v_N = 4;

  /* "psychxr/libovr/_libovr.pyx":3619
 *     cdef Py_ssize_t i, j
 *     cdef Py_ssize_t N = 4
 *     i = j = 0             # <<<<<<<<<<<<<<
 *     for i in range(N):
 *         for j in range(N):
 */
  __pyx_v_i = 0;
  __pyx_v_j = 0;

  /* "psychxr/libovr/_libovr.pyx":3620
 *     cdef Py_ssize_t N = 4
 *     i = j = 0
 *     for i in range(N):             # <<<<<<<<<<<<<<
 *         for j in range(N):
 *             mv[i, j] = _eyeProjectionMatrix[eye].M[i][j]
 */
  __pyx_t_13 = __pyx_v_N;
  __pyx_t_14 = __pyx_t_13;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_i = __pyx_t_15;

    /* "psychxr/libovr/_libovr.pyx":3621
 *     i = j = 0
 *     for i in range(N):
 *         for j in range(N):             # <<<<<<<<<<<<<<
 *             mv[i, j] = _eyeProjectionMatrix[eye].M[i][j]
 * 
 */
    __pyx_t_16 = __pyx_v_N;
    __pyx_t_17 = __pyx_t_16;
    for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {
      __pyx_v_j = __pyx_t_18;

      /* "psychxr/libovr/_libovr.pyx":3622
 *     for i in range(N):
 *         for j in range(N):
 *             mv[i, j] = _eyeProjectionMatrix[eye].M[i][j]             # <<<<<<<<<<<<<<
 * 
 *     if outMatrix is None:
 */
      __pyx_t_19 = __pyx_v_i;
      __pyx_t_20 = __pyx_v_j;
      __pyx_t_8 = -1;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_v_mv.shape[0];
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_8 = 0;
      } else if (unlikely(__pyx_t_19 >= __pyx_v_mv.shape[0])) __pyx_t_8 = 0;
      if (__pyx_t_20 < 0) {
        __pyx_t_20 += __pyx_v_mv.shape[1];
        if (unlikely(__pyx_t_20 < 0)) __pyx_t_8 = 1;
      } else if (unlikely(__pyx_t_20 >= __pyx_v_mv.shape[1])) __pyx_t_8 = 1;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(0, 3622, __pyx_L1_error)
      }
      *((float *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_mv.data + __pyx_t_19 * __pyx_v_mv.strides[0]) ) + __pyx_t_20 * __pyx_v_mv.strides[1]) )) = (((__pyx_v_7psychxr_6libovr_7_libovr__eyeProjectionMatrix[__pyx_v_eye]).M[__pyx_v_i])[__pyx_v_j]);
    }
  }

  /* "psychxr/libovr/_libovr.pyx":3624
 *             mv[i, j] = _eyeProjectionMatrix[eye].M[i][j]
 * 
 *     if outMatrix is None:             # <<<<<<<<<<<<<<
 *         return to_return
 * 
 */
  __pyx_t_2 = (__pyx_v_outMatrix == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":3625
 * 
 *     if outMatrix is None:
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 * def getEyeRenderViewport(int eye, object outRect=None):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
    __pyx_r = ((PyObject *)__pyx_v_to_return);
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":3624
 *             mv[i, j] = _eyeProjectionMatrix[eye].M[i][j]
 * 
 *     if outMatrix is None:             # <<<<<<<<<<<<<<
 *         return to_return
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":3572
 *         _eyeProjectionMatrix[eye] * _eyeViewMatrix[eye]
 * 
 * def getEyeProjectionMatrix(int eye, float nearClip=0.01, float farClip=1000.0, object outMatrix=None):             # <<<<<<<<<<<<<<
 *     """Compute the projection matrix.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XDEC_MEMVIEW(&__pyx_t_12, 1);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeProjectionMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __PYX_XDEC_MEMVIEW(&__pyx_v_mv, 1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3627
 *         return to_return
 * 
 * def getEyeRenderViewport(int eye, object outRect=None):             # <<<<<<<<<<<<<<
 *     """Get the eye render viewport.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_89getEyeRenderViewport(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_88getEyeRenderViewport[] = "getEyeRenderViewport(int eye, outRect=None)\nGet the eye render viewport.\n\n    The viewport defines the region on the swap texture a given eye's image is\n    drawn to.\n\n    Parameters\n    ----------\n    eye : int\n        The eye index.\n    outRect : ndarray\n        Optional NumPy array to place values. If None, this function will return\n        a new array. Must be dtype=int and length 4.\n\n    Returns\n    -------\n    ndarray of ints or None\n        Viewport rectangle [x, y, w, h]. None if 'outRect' was specified.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_89getEyeRenderViewport = {"getEyeRenderViewport", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_89getEyeRenderViewport, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_88getEyeRenderViewport};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_89getEyeRenderViewport(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_eye;
  PyObject *__pyx_v_outRect = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEyeRenderViewport (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eye,&__pyx_n_s_outRect,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eye)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outRect);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getEyeRenderViewport") < 0)) __PYX_ERR(0, 3627, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_eye = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3627, __pyx_L3_error)
    __pyx_v_outRect = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getEyeRenderViewport", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3627, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeRenderViewport", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_88getEyeRenderViewport(__pyx_self, __pyx_v_eye, __pyx_v_outRect);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_88getEyeRenderViewport(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, PyObject *__pyx_v_outRect) {
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  __Pyx_RefNannySetupContext("getEyeRenderViewport", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":3650
 *     cdef np.ndarray[np.int_t, ndim=1] to_return
 * 
 *     if outRect is None:             # <<<<<<<<<<<<<<
 *         to_return = np.zeros((4,), dtype=np.int)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_outRect == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":3651
 * 
 *     if outRect is None:
 *         to_return = np.zeros((4,), dtype=np.int)             # <<<<<<<<<<<<<<
 *     else:
 *         to_return = outRect
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 3651, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__31, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 3651, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_v_to_return, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        }
        __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
      }
      __pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 3651, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __pyx_v_to_return = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "psychxr/libovr/_libovr.pyx":3650
 *     cdef np.ndarray[np.int_t, ndim=1] to_return
 * 
 *     if outRect is None:             # <<<<<<<<<<<<<<
 *         to_return = np.zeros((4,), dtype=np.int)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":3653
 *         to_return = np.zeros((4,), dtype=np.int)
 *     else:
 *         to_return = outRect             # <<<<<<<<<<<<<<
 * 
 *     to_return[0] = _eyeLayer.Viewport[eye].Pos.x
 */
  /*else*/ {
    if (!(likely(((__pyx_v_outRect) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_outRect, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 3653, __pyx_L1_error)
    __pyx_t_6 = __pyx_v_outRect;
    __Pyx_INCREF(__pyx_t_6);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_6), &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_v_to_return, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
        }
        __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
      }
      __pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 3653, __pyx_L1_error)
    }
    __pyx_v_to_return = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":3655
 *         to_return = outRect
 * 
 *     to_return[0] = _eyeLayer.Viewport[eye].Pos.x             # <<<<<<<<<<<<<<
 *     to_return[1] = _eyeLayer.Viewport[eye].Pos.y
 *     to_return[2] = _eyeLayer.Viewport[eye].Size.w
 */
  __pyx_t_8 = (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Viewport[__pyx_v_eye]).Pos.x;
  __pyx_t_12 = 0;
  __pyx_t_13 = -1;
  if (__pyx_t_12 < 0) {
    __pyx_t_12 += __pyx_pybuffernd_to_return.diminfo[0].shape;
    if (unlikely(__pyx_t_12 < 0)) __pyx_t_13 = 0;
  } else if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_to_return.diminfo[0].shape)) __pyx_t_13 = 0;
  if (unlikely(__pyx_t_13 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_13);
    __PYX_ERR(0, 3655, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_to_return.diminfo[0].strides) = __pyx_t_8;

  /* "psychxr/libovr/_libovr.pyx":3656
 * 
 *     to_return[0] = _eyeLayer.Viewport[eye].Pos.x
 *     to_return[1] = _eyeLayer.Viewport[eye].Pos.y             # <<<<<<<<<<<<<<
 *     to_return[2] = _eyeLayer.Viewport[eye].Size.w
 *     to_return[3] = _eyeLayer.Viewport[eye].Size.h
 */
  __pyx_t_8 = (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Viewport[__pyx_v_eye]).Pos.y;
  __pyx_t_14 = 1;
  __pyx_t_13 = -1;
  if (__pyx_t_14 < 0) {
    __pyx_t_14 += __pyx_pybuffernd_to_return.diminfo[0].shape;
    if (unlikely(__pyx_t_14 < 0)) __pyx_t_13 = 0;
  } else if (unlikely(__pyx_t_14 >= __pyx_pybuffernd_to_return.diminfo[0].shape)) __pyx_t_13 = 0;
  if (unlikely(__pyx_t_13 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_13);
    __PYX_ERR(0, 3656, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_to_return.diminfo[0].strides) = __pyx_t_8;

  /* "psychxr/libovr/_libovr.pyx":3657
 *     to_return[0] = _eyeLayer.Viewport[eye].Pos.x
 *     to_return[1] = _eyeLayer.Viewport[eye].Pos.y
 *     to_return[2] = _eyeLayer.Viewport[eye].Size.w             # <<<<<<<<<<<<<<
 *     to_return[3] = _eyeLayer.Viewport[eye].Size.h
 * 
 */
  __pyx_t_8 = (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Viewport[__pyx_v_eye]).Size.w;
  __pyx_t_15 = 2;
  __pyx_t_13 = -1;
  if (__pyx_t_15 < 0) {
    __pyx_t_15 += __pyx_pybuffernd_to_return.diminfo[0].shape;
    if (unlikely(__pyx_t_15 < 0)) __pyx_t_13 = 0;
  } else if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_to_return.diminfo[0].shape)) __pyx_t_13 = 0;
  if (unlikely(__pyx_t_13 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_13);
    __PYX_ERR(0, 3657, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_to_return.diminfo[0].strides) = __pyx_t_8;

  /* "psychxr/libovr/_libovr.pyx":3658
 *     to_return[1] = _eyeLayer.Viewport[eye].Pos.y
 *     to_return[2] = _eyeLayer.Viewport[eye].Size.w
 *     to_return[3] = _eyeLayer.Viewport[eye].Size.h             # <<<<<<<<<<<<<<
 * 
 *     if outRect is None:
 */
  __pyx_t_8 = (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Viewport[__pyx_v_eye]).Size.h;
  __pyx_t_16 = 3;
  __pyx_t_13 = -1;
  if (__pyx_t_16 < 0) {
    __pyx_t_16 += __pyx_pybuffernd_to_return.diminfo[0].shape;
    if (unlikely(__pyx_t_16 < 0)) __pyx_t_13 = 0;
  } else if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_to_return.diminfo[0].shape)) __pyx_t_13 = 0;
  if (unlikely(__pyx_t_13 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_13);
    __PYX_ERR(0, 3658, __pyx_L1_error)
  }
  *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_to_return.diminfo[0].strides) = __pyx_t_8;

  /* "psychxr/libovr/_libovr.pyx":3660
 *     to_return[3] = _eyeLayer.Viewport[eye].Size.h
 * 
 *     if outRect is None:             # <<<<<<<<<<<<<<
 *         return to_return
 * 
 */
  __pyx_t_2 = (__pyx_v_outRect == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":3661
 * 
 *     if outRect is None:
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 * def setEyeRenderViewport(int eye, object values):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
    __pyx_r = ((PyObject *)__pyx_v_to_return);
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":3660
 *     to_return[3] = _eyeLayer.Viewport[eye].Size.h
 * 
 *     if outRect is None:             # <<<<<<<<<<<<<<
 *         return to_return
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":3627
 *         return to_return
 * 
 * def getEyeRenderViewport(int eye, object outRect=None):             # <<<<<<<<<<<<<<
 *     """Get the eye render viewport.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeRenderViewport", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3663
 *         return to_return
 * 
 * def setEyeRenderViewport(int eye, object values):             # <<<<<<<<<<<<<<
 *     """Set the eye render viewport.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_91setEyeRenderViewport(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_90setEyeRenderViewport[] = "setEyeRenderViewport(int eye, values)\nSet the eye render viewport.\n\n    The viewport defines the region on the swap texture a given eye's image is\n    drawn to.\n\n    Parameters\n    ----------\n    eye : int\n        The eye index.\n    ndarray, list, or tuple of ints\n        Viewport rectangle [x, y, w, h].\n\n    Examples\n    --------\n\n    Setting the viewports for both eyes on a single swap chain buffer::\n\n        # Calculate the optimal eye buffer sizes for the FOVs, these will define the\n        # dimensions of the render target.\n        leftBufferSize, rightBufferSize = libovr.calcEyeBufferSizes()\n        # Define the viewports, which specifies the region on the render target a\n        # eye's image will be drawn to and accessed from. Viewports are rectangles\n        # defined like [x, y, w, h]. The x-position of the rightViewport is offset\n        # by the width of the left viewport.\n        leftViewport = [0, 0, leftBufferSize[0], leftBufferSize[1]]\n        rightViewport = [leftBufferSize[0], 0, rightBufferSize[0], rightBufferSize[1]]\n        # set both viewports\n        libovr.setEyeRenderViewport(libovr.LIBOVR_EYE_LEFT, leftViewport)\n        libovr.setEyeRenderViewport(libovr.LIBOVR_EYE_RIGHT, rightViewport)\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_91setEyeRenderViewport = {"setEyeRenderViewport", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_91setEyeRenderViewport, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_90setEyeRenderViewport};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_91setEyeRenderViewport(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_eye;
  PyObject *__pyx_v_values = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setEyeRenderViewport (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eye,&__pyx_n_s_values,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eye)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_values)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setEyeRenderViewport", 1, 2, 2, 1); __PYX_ERR(0, 3663, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setEyeRenderViewport") < 0)) __PYX_ERR(0, 3663, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_eye = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3663, __pyx_L3_error)
    __pyx_v_values = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setEyeRenderViewport", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3663, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.setEyeRenderViewport", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_90setEyeRenderViewport(__pyx_self, __pyx_v_eye, __pyx_v_values);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_90setEyeRenderViewport(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, PyObject *__pyx_v_values) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("setEyeRenderViewport", 0);

  /* "psychxr/libovr/_libovr.pyx":3696
 *     """
 *     global _eyeLayer
 *     _eyeLayer.Viewport[eye].Pos.x = <int>values[0]             # <<<<<<<<<<<<<<
 *     _eyeLayer.Viewport[eye].Pos.y = <int>values[1]
 *     _eyeLayer.Viewport[eye].Size.w = <int>values[2]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_values, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3696, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Viewport[__pyx_v_eye]).Pos.x = ((int)__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":3697
 *     global _eyeLayer
 *     _eyeLayer.Viewport[eye].Pos.x = <int>values[0]
 *     _eyeLayer.Viewport[eye].Pos.y = <int>values[1]             # <<<<<<<<<<<<<<
 *     _eyeLayer.Viewport[eye].Size.w = <int>values[2]
 *     _eyeLayer.Viewport[eye].Size.h = <int>values[3]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_values, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3697, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Viewport[__pyx_v_eye]).Pos.y = ((int)__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":3698
 *     _eyeLayer.Viewport[eye].Pos.x = <int>values[0]
 *     _eyeLayer.Viewport[eye].Pos.y = <int>values[1]
 *     _eyeLayer.Viewport[eye].Size.w = <int>values[2]             # <<<<<<<<<<<<<<
 *     _eyeLayer.Viewport[eye].Size.h = <int>values[3]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_values, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Viewport[__pyx_v_eye]).Size.w = ((int)__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":3699
 *     _eyeLayer.Viewport[eye].Pos.y = <int>values[1]
 *     _eyeLayer.Viewport[eye].Size.w = <int>values[2]
 *     _eyeLayer.Viewport[eye].Size.h = <int>values[3]             # <<<<<<<<<<<<<<
 * 
 * def getEyeViewMatrix(int eye, object outMatrix=None):
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_values, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3699, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Viewport[__pyx_v_eye]).Size.h = ((int)__pyx_t_2);

  /* "psychxr/libovr/_libovr.pyx":3663
 *         return to_return
 * 
 * def setEyeRenderViewport(int eye, object values):             # <<<<<<<<<<<<<<
 *     """Set the eye render viewport.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.setEyeRenderViewport", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3701
 *     _eyeLayer.Viewport[eye].Size.h = <int>values[3]
 * 
 * def getEyeViewMatrix(int eye, object outMatrix=None):             # <<<<<<<<<<<<<<
 *     """Compute a view matrix for a specified eye.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_93getEyeViewMatrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_92getEyeViewMatrix[] = "getEyeViewMatrix(int eye, outMatrix=None)\nCompute a view matrix for a specified eye.\n\n    View matrices are derived from the eye render poses calculated by the\n    last 'calcEyePoses' call or update to 'renderPoses'.\n\n    Parameters\n    ----------\n    eye : int\n        Eye index.\n    outMatrix : ndarray or None\n        Optional array to write to. Must have ndim=2, dtype=np.float32, and\n        shape == (4,4).\n\n    Returns\n    -------\n    ndarray\n        4x4 view matrix (16x1 if flatten=True).\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_93getEyeViewMatrix = {"getEyeViewMatrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_93getEyeViewMatrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_92getEyeViewMatrix};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_93getEyeViewMatrix(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_eye;
  PyObject *__pyx_v_outMatrix = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getEyeViewMatrix (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_eye,&__pyx_n_s_outMatrix,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_eye)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_outMatrix);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getEyeViewMatrix") < 0)) __PYX_ERR(0, 3701, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_eye = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3701, __pyx_L3_error)
    __pyx_v_outMatrix = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getEyeViewMatrix", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3701, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeViewMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_92getEyeViewMatrix(__pyx_self, __pyx_v_eye, __pyx_v_outMatrix);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_92getEyeViewMatrix(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye, PyObject *__pyx_v_outMatrix) {
  PyArrayObject *__pyx_v_to_return = 0;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_N;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  __Pyx_RefNannySetupContext("getEyeViewMatrix", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":3724
 *     cdef np.ndarray[np.float32_t, ndim=2] to_return
 * 
 *     if outMatrix is None:             # <<<<<<<<<<<<<<
 *         to_return = np.zeros((4, 4), dtype=np.float32)
 *     else:
 */
  __pyx_t_1 = (__pyx_v_outMatrix == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":3725
 * 
 *     if outMatrix is None:
 *         to_return = np.zeros((4, 4), dtype=np.float32)             # <<<<<<<<<<<<<<
 *     else:
 *         to_return = outMatrix
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 3725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 3725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 3725, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__8, __pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 3725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 3725, __pyx_L1_error)
    __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_v_to_return, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_9); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        }
        __pyx_t_9 = __pyx_t_10 = __pyx_t_11 = 0;
      }
      __pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_to_return.diminfo[1].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_to_return.diminfo[1].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 3725, __pyx_L1_error)
    }
    __pyx_t_7 = 0;
    __pyx_v_to_return = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "psychxr/libovr/_libovr.pyx":3724
 *     cdef np.ndarray[np.float32_t, ndim=2] to_return
 * 
 *     if outMatrix is None:             # <<<<<<<<<<<<<<
 *         to_return = np.zeros((4, 4), dtype=np.float32)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":3727
 *         to_return = np.zeros((4, 4), dtype=np.float32)
 *     else:
 *         to_return = outMatrix             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i, j, N
 */
  /*else*/ {
    if (!(likely(((__pyx_v_outMatrix) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_outMatrix, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 3727, __pyx_L1_error)
    __pyx_t_6 = __pyx_v_outMatrix;
    __Pyx_INCREF(__pyx_t_6);
    {
      __Pyx_BufFmt_StackElem __pyx_stack[1];
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
      __pyx_t_8 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)((PyArrayObject *)__pyx_t_6), &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack);
      if (unlikely(__pyx_t_8 < 0)) {
        PyErr_Fetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_v_to_return, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
          Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_9);
          __Pyx_RaiseBufferFallbackError();
        } else {
          PyErr_Restore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
        }
        __pyx_t_11 = __pyx_t_10 = __pyx_t_9 = 0;
      }
      __pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_to_return.diminfo[1].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_to_return.diminfo[1].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[1];
      if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 3727, __pyx_L1_error)
    }
    __pyx_v_to_return = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":3730
 * 
 *     cdef Py_ssize_t i, j, N
 *     i = j = 0             # <<<<<<<<<<<<<<
 *     N = 4
 *     for i in range(N):
 */
  __pyx_v_i = 0;
  __pyx_v_j = 0;

  /* "psychxr/libovr/_libovr.pyx":3731
 *     cdef Py_ssize_t i, j, N
 *     i = j = 0
 *     N = 4             # <<<<<<<<<<<<<<
 *     for i in range(N):
 *         for j in range(N):
 */
  __pyx_v_N = 4;

  /* "psychxr/libovr/_libovr.pyx":3732
 *     i = j = 0
 *     N = 4
 *     for i in range(N):             # <<<<<<<<<<<<<<
 *         for j in range(N):
 *             to_return[i, j] = _eyeViewMatrix[eye].M[i][j]
 */
  __pyx_t_12 = __pyx_v_N;
  __pyx_t_13 = __pyx_t_12;
  for (__pyx_t_14 = 0; __pyx_t_14 < __pyx_t_13; __pyx_t_14+=1) {
    __pyx_v_i = __pyx_t_14;

    /* "psychxr/libovr/_libovr.pyx":3733
 *     N = 4
 *     for i in range(N):
 *         for j in range(N):             # <<<<<<<<<<<<<<
 *             to_return[i, j] = _eyeViewMatrix[eye].M[i][j]
 * 
 */
    __pyx_t_15 = __pyx_v_N;
    __pyx_t_16 = __pyx_t_15;
    for (__pyx_t_17 = 0; __pyx_t_17 < __pyx_t_16; __pyx_t_17+=1) {
      __pyx_v_j = __pyx_t_17;

      /* "psychxr/libovr/_libovr.pyx":3734
 *     for i in range(N):
 *         for j in range(N):
 *             to_return[i, j] = _eyeViewMatrix[eye].M[i][j]             # <<<<<<<<<<<<<<
 * 
 *     if outMatrix is None:
 */
      __pyx_t_18 = __pyx_v_i;
      __pyx_t_19 = __pyx_v_j;
      __pyx_t_8 = -1;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_pybuffernd_to_return.diminfo[0].shape;
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_8 = 0;
      } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_to_return.diminfo[0].shape)) __pyx_t_8 = 0;
      if (__pyx_t_19 < 0) {
        __pyx_t_19 += __pyx_pybuffernd_to_return.diminfo[1].shape;
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_8 = 1;
      } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_to_return.diminfo[1].shape)) __pyx_t_8 = 1;
      if (unlikely(__pyx_t_8 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_8);
        __PYX_ERR(0, 3734, __pyx_L1_error)
      }
      *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_to_return.diminfo[0].strides, __pyx_t_19, __pyx_pybuffernd_to_return.diminfo[1].strides) = (((__pyx_v_7psychxr_6libovr_7_libovr__eyeViewMatrix[__pyx_v_eye]).M[__pyx_v_i])[__pyx_v_j]);
    }
  }

  /* "psychxr/libovr/_libovr.pyx":3736
 *             to_return[i, j] = _eyeViewMatrix[eye].M[i][j]
 * 
 *     if outMatrix is None:             # <<<<<<<<<<<<<<
 *         return to_return
 * 
 */
  __pyx_t_2 = (__pyx_v_outMatrix == Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":3737
 * 
 *     if outMatrix is None:
 *         return to_return             # <<<<<<<<<<<<<<
 * 
 * def getPredictedDisplayTime(unsigned int frameIndex=0):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
    __pyx_r = ((PyObject *)__pyx_v_to_return);
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":3736
 *             to_return[i, j] = _eyeViewMatrix[eye].M[i][j]
 * 
 *     if outMatrix is None:             # <<<<<<<<<<<<<<
 *         return to_return
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":3701
 *     _eyeLayer.Viewport[eye].Size.h = <int>values[3]
 * 
 * def getEyeViewMatrix(int eye, object outMatrix=None):             # <<<<<<<<<<<<<<
 *     """Compute a view matrix for a specified eye.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.getEyeViewMatrix", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3739
 *         return to_return
 * 
 * def getPredictedDisplayTime(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Get the predicted time a frame will be displayed.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_95getPredictedDisplayTime(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_94getPredictedDisplayTime[] = "getPredictedDisplayTime(unsigned int frameIndex=0)\nGet the predicted time a frame will be displayed.\n\n    Parameters\n    ----------\n    frameIndex : int\n        Frame index.\n\n    Returns\n    -------\n    float\n        Absolute frame mid-point time for the given frame index in seconds.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_95getPredictedDisplayTime = {"getPredictedDisplayTime", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_95getPredictedDisplayTime, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_94getPredictedDisplayTime};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_95getPredictedDisplayTime(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_frameIndex;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getPredictedDisplayTime (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frameIndex,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frameIndex);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getPredictedDisplayTime") < 0)) __PYX_ERR(0, 3739, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_frameIndex = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_frameIndex == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3739, __pyx_L3_error)
    } else {
      __pyx_v_frameIndex = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getPredictedDisplayTime", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3739, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getPredictedDisplayTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_94getPredictedDisplayTime(__pyx_self, __pyx_v_frameIndex);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_94getPredictedDisplayTime(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_frameIndex) {
  double __pyx_v_t_sec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getPredictedDisplayTime", 0);

  /* "psychxr/libovr/_libovr.pyx":3754
 *     """
 *     global _ptrSession
 *     cdef double t_sec = libovr_capi.ovr_GetPredictedDisplayTime(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         frameIndex)
 */
  __pyx_v_t_sec = ovr_GetPredictedDisplayTime(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, __pyx_v_frameIndex);

  /* "psychxr/libovr/_libovr.pyx":3758
 *         frameIndex)
 * 
 *     return t_sec             # <<<<<<<<<<<<<<
 * 
 * def timeInSeconds():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_t_sec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3739
 *         return to_return
 * 
 * def getPredictedDisplayTime(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Get the predicted time a frame will be displayed.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getPredictedDisplayTime", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3760
 *     return t_sec
 * 
 * def timeInSeconds():             # <<<<<<<<<<<<<<
 *     """Absolute time in seconds.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_97timeInSeconds(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_96timeInSeconds[] = "timeInSeconds()\nAbsolute time in seconds.\n\n    Returns\n    -------\n    float\n        Time in seconds.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_97timeInSeconds = {"timeInSeconds", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_97timeInSeconds, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_96timeInSeconds};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_97timeInSeconds(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("timeInSeconds (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_96timeInSeconds(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_96timeInSeconds(CYTHON_UNUSED PyObject *__pyx_self) {
  double __pyx_v_t_sec;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("timeInSeconds", 0);

  /* "psychxr/libovr/_libovr.pyx":3769
 * 
 *     """
 *     cdef double t_sec = libovr_capi.ovr_GetTimeInSeconds()             # <<<<<<<<<<<<<<
 * 
 *     return t_sec
 */
  __pyx_v_t_sec = ovr_GetTimeInSeconds();

  /* "psychxr/libovr/_libovr.pyx":3771
 *     cdef double t_sec = libovr_capi.ovr_GetTimeInSeconds()
 * 
 *     return t_sec             # <<<<<<<<<<<<<<
 * 
 * def perfHudMode(str mode):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_t_sec); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3760
 *     return t_sec
 * 
 * def timeInSeconds():             # <<<<<<<<<<<<<<
 *     """Absolute time in seconds.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.timeInSeconds", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3773
 *     return t_sec
 * 
 * def perfHudMode(str mode):             # <<<<<<<<<<<<<<
 *     """Display a performance information HUD.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_99perfHudMode(PyObject *__pyx_self, PyObject *__pyx_v_mode); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_98perfHudMode[] = "perfHudMode(str mode)\nDisplay a performance information HUD.\n\n    Parameters\n    ----------\n    mode : str\n        Performance HUD mode to present. Valid mode strings are:\n        'PerfSummary', 'LatencyTiming', 'AppRenderTiming',\n        'CompRenderTiming', 'AswStats', 'VersionInfo' and 'Off'. Specifying\n        'Off' hides the performance HUD.\n\n    Warning\n    -------\n    The performance HUD remains visible until 'Off' is specified, even after\n    the application quits.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_99perfHudMode = {"perfHudMode", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_99perfHudMode, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_98perfHudMode};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_99perfHudMode(PyObject *__pyx_self, PyObject *__pyx_v_mode) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("perfHudMode (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_mode), (&PyString_Type), 1, "mode", 1))) __PYX_ERR(0, 3773, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_98perfHudMode(__pyx_self, ((PyObject*)__pyx_v_mode));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_98perfHudMode(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_mode) {
  int __pyx_v_perfHudMode;
  CYTHON_UNUSED ovrBool __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("perfHudMode", 0);

  /* "psychxr/libovr/_libovr.pyx":3791
 *     """
 *     global _ptrSession
 *     cdef int perfHudMode = 0             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  __pyx_v_perfHudMode = 0;

  /* "psychxr/libovr/_libovr.pyx":3793
 *     cdef int perfHudMode = 0
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         perfHudMode = <int>_performance_hud_modes[mode]
 *     except KeyError:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "psychxr/libovr/_libovr.pyx":3794
 * 
 *     try:
 *         perfHudMode = <int>_performance_hud_modes[mode]             # <<<<<<<<<<<<<<
 *     except KeyError:
 *         raise KeyError("Invalid performance HUD mode specified.")
 */
      if (unlikely(__pyx_v_7psychxr_6libovr_7_libovr__performance_hud_modes == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 3794, __pyx_L3_error)
      }
      __pyx_t_4 = __Pyx_PyDict_GetItem(__pyx_v_7psychxr_6libovr_7_libovr__performance_hud_modes, __pyx_v_mode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 3794, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3794, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_perfHudMode = ((int)__pyx_t_5);

      /* "psychxr/libovr/_libovr.pyx":3793
 *     cdef int perfHudMode = 0
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         perfHudMode = <int>_performance_hud_modes[mode]
 *     except KeyError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "psychxr/libovr/_libovr.pyx":3795
 *     try:
 *         perfHudMode = <int>_performance_hud_modes[mode]
 *     except KeyError:             # <<<<<<<<<<<<<<
 *         raise KeyError("Invalid performance HUD mode specified.")
 * 
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_KeyError);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("psychxr.libovr._libovr.perfHudMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(0, 3795, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "psychxr/libovr/_libovr.pyx":3796
 *         perfHudMode = <int>_performance_hud_modes[mode]
 *     except KeyError:
 *         raise KeyError("Invalid performance HUD mode specified.")             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrBool ret = libovr_capi.ovr_SetInt(
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_KeyError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 3796, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(0, 3796, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "psychxr/libovr/_libovr.pyx":3793
 *     cdef int perfHudMode = 0
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         perfHudMode = <int>_performance_hud_modes[mode]
 *     except KeyError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "psychxr/libovr/_libovr.pyx":3798
 *         raise KeyError("Invalid performance HUD mode specified.")
 * 
 *     cdef libovr_capi.ovrBool ret = libovr_capi.ovr_SetInt(             # <<<<<<<<<<<<<<
 *         _ptrSession, b"PerfHudMode", perfHudMode)
 * 
 */
  __pyx_v_ret = ovr_SetInt(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((char const *)"PerfHudMode"), __pyx_v_perfHudMode);

  /* "psychxr/libovr/_libovr.pyx":3773
 *     return t_sec
 * 
 * def perfHudMode(str mode):             # <<<<<<<<<<<<<<
 *     """Display a performance information HUD.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("psychxr.libovr._libovr.perfHudMode", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3801
 *         _ptrSession, b"PerfHudMode", perfHudMode)
 * 
 * def hidePerfHud():             # <<<<<<<<<<<<<<
 *     """Hide the performance HUD.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_101hidePerfHud(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_100hidePerfHud[] = "hidePerfHud()\nHide the performance HUD.\n\n    This is a convenience function that is equivalent to calling\n    'perf_hud_mode('Off').\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_101hidePerfHud = {"hidePerfHud", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_101hidePerfHud, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_100hidePerfHud};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_101hidePerfHud(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hidePerfHud (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_100hidePerfHud(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_100hidePerfHud(CYTHON_UNUSED PyObject *__pyx_self) {
  CYTHON_UNUSED ovrBool __pyx_v_ret;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hidePerfHud", 0);

  /* "psychxr/libovr/_libovr.pyx":3809
 *     """
 *     global _ptrSession
 *     cdef libovr_capi.ovrBool ret = libovr_capi.ovr_SetInt(             # <<<<<<<<<<<<<<
 *         _ptrSession, b"PerfHudMode", libovr_capi.ovrPerfHud_Off)
 * 
 */
  __pyx_v_ret = ovr_SetInt(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((char const *)"PerfHudMode"), ovrPerfHud_Off);

  /* "psychxr/libovr/_libovr.pyx":3801
 *         _ptrSession, b"PerfHudMode", perfHudMode)
 * 
 * def hidePerfHud():             # <<<<<<<<<<<<<<
 *     """Hide the performance HUD.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3812
 *         _ptrSession, b"PerfHudMode", libovr_capi.ovrPerfHud_Off)
 * 
 * def perfHudModes():             # <<<<<<<<<<<<<<
 *     """List of valid performance HUD modes."""
 *     return [*_performance_hud_modes]
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_103perfHudModes(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_102perfHudModes[] = "perfHudModes()\nList of valid performance HUD modes.";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_103perfHudModes = {"perfHudModes", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_103perfHudModes, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_102perfHudModes};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_103perfHudModes(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("perfHudModes (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_102perfHudModes(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_102perfHudModes(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("perfHudModes", 0);

  /* "psychxr/libovr/_libovr.pyx":3814
 * def perfHudModes():
 *     """List of valid performance HUD modes."""
 *     return [*_performance_hud_modes]             # <<<<<<<<<<<<<<
 * 
 * # def getEyeViewport(int eye):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_List(__pyx_v_7psychxr_6libovr_7_libovr__performance_hud_modes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3812
 *         _ptrSession, b"PerfHudMode", libovr_capi.ovrPerfHud_Off)
 * 
 * def perfHudModes():             # <<<<<<<<<<<<<<
 *     """List of valid performance HUD modes."""
 *     return [*_performance_hud_modes]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.perfHudModes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3858
 * #     _eyeLayer.Viewport[eye] = viewportRect
 * 
 * def waitToBeginFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Wait until a buffer is available and frame rendering can begin. Must
 *     be called before 'beginFrame'.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_105waitToBeginFrame(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_104waitToBeginFrame[] = "waitToBeginFrame(unsigned int frameIndex=0)\nWait until a buffer is available and frame rendering can begin. Must\n    be called before 'beginFrame'.\n\n    Parameters\n    ----------\n    frameIndex : int\n        The target frame index.\n\n    Returns\n    -------\n    int\n        Return code of the LibOVR API call 'ovr_WaitToBeginFrame'. Returns\n        :data:`LIBOVR_SUCCESS` if completed without errors. May return\n        :data:`LIBOVR_ERROR_DISPLAY_LOST` if the device was removed, rendering\n        the current session invalid.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_105waitToBeginFrame = {"waitToBeginFrame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_105waitToBeginFrame, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_104waitToBeginFrame};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_105waitToBeginFrame(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_frameIndex;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("waitToBeginFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frameIndex,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frameIndex);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "waitToBeginFrame") < 0)) __PYX_ERR(0, 3858, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_frameIndex = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_frameIndex == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3858, __pyx_L3_error)
    } else {
      __pyx_v_frameIndex = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("waitToBeginFrame", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3858, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.waitToBeginFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_104waitToBeginFrame(__pyx_self, __pyx_v_frameIndex);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_104waitToBeginFrame(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_frameIndex) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("waitToBeginFrame", 0);

  /* "psychxr/libovr/_libovr.pyx":3878
 *     global _ptrSession
 *     cdef libovr_capi.ovrResult result = \
 *         libovr_capi.ovr_WaitToBeginFrame(_ptrSession, frameIndex)             # <<<<<<<<<<<<<<
 * 
 *     return <int>result
 */
  __pyx_v_result = ovr_WaitToBeginFrame(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, __pyx_v_frameIndex);

  /* "psychxr/libovr/_libovr.pyx":3880
 *         libovr_capi.ovr_WaitToBeginFrame(_ptrSession, frameIndex)
 * 
 *     return <int>result             # <<<<<<<<<<<<<<
 * 
 * def beginFrame(unsigned int frameIndex=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)__pyx_v_result)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3858
 * #     _eyeLayer.Viewport[eye] = viewportRect
 * 
 * def waitToBeginFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Wait until a buffer is available and frame rendering can begin. Must
 *     be called before 'beginFrame'.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.waitToBeginFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3882
 *     return <int>result
 * 
 * def beginFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Begin rendering the frame. Must be called prior to drawing and
 *     'endFrame'.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_107beginFrame(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_106beginFrame[] = "beginFrame(unsigned int frameIndex=0)\nBegin rendering the frame. Must be called prior to drawing and\n    'endFrame'.\n\n    Parameters\n    ----------\n    frameIndex : int\n        The target frame index.\n\n    Returns\n    -------\n    int\n        Error code returned by 'ovr_BeginFrame'.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_107beginFrame = {"beginFrame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_107beginFrame, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_106beginFrame};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_107beginFrame(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_frameIndex;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("beginFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frameIndex,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frameIndex);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "beginFrame") < 0)) __PYX_ERR(0, 3882, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_frameIndex = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_frameIndex == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3882, __pyx_L3_error)
    } else {
      __pyx_v_frameIndex = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("beginFrame", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3882, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.beginFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_106beginFrame(__pyx_self, __pyx_v_frameIndex);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_106beginFrame(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_frameIndex) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("beginFrame", 0);

  /* "psychxr/libovr/_libovr.pyx":3899
 *     global _ptrSession
 *     cdef libovr_capi.ovrResult result = \
 *         libovr_capi.ovr_BeginFrame(_ptrSession, frameIndex)             # <<<<<<<<<<<<<<
 * 
 *     return <int>result
 */
  __pyx_v_result = ovr_BeginFrame(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, __pyx_v_frameIndex);

  /* "psychxr/libovr/_libovr.pyx":3901
 *         libovr_capi.ovr_BeginFrame(_ptrSession, frameIndex)
 * 
 *     return <int>result             # <<<<<<<<<<<<<<
 * 
 * def commitTextureSwapChain(int eye):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)__pyx_v_result)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3882
 *     return <int>result
 * 
 * def beginFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Begin rendering the frame. Must be called prior to drawing and
 *     'endFrame'.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.beginFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3903
 *     return <int>result
 * 
 * def commitTextureSwapChain(int eye):             # <<<<<<<<<<<<<<
 *     """Commit changes to a given eye's texture swap chain. When called, the
 *     runtime is notified that the texture is ready for use, and the swap
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_109commitTextureSwapChain(PyObject *__pyx_self, PyObject *__pyx_arg_eye); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_108commitTextureSwapChain[] = "commitTextureSwapChain(int eye)\nCommit changes to a given eye's texture swap chain. When called, the\n    runtime is notified that the texture is ready for use, and the swap\n    chain index is incremented.\n\n    Parameters\n    ----------\n    eye : int\n        Eye buffer index.\n\n    Returns\n    -------\n    int\n        Error code returned by API call 'ovr_CommitTextureSwapChain'. Will\n        return :data:`LIBOVR_SUCCESS` if successful. Returns error code\n        :data:`LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_FULL` if called too many\n        times without calling 'endFrame'.\n\n    Warning\n    -------\n\n    No additional drawing operations are permitted once the texture is committed\n    until the SDK dereferences it, making it available again.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_109commitTextureSwapChain = {"commitTextureSwapChain", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_109commitTextureSwapChain, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_108commitTextureSwapChain};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_109commitTextureSwapChain(PyObject *__pyx_self, PyObject *__pyx_arg_eye) {
  int __pyx_v_eye;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("commitTextureSwapChain (wrapper)", 0);
  assert(__pyx_arg_eye); {
    __pyx_v_eye = __Pyx_PyInt_As_int(__pyx_arg_eye); if (unlikely((__pyx_v_eye == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3903, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.commitTextureSwapChain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_108commitTextureSwapChain(__pyx_self, ((int)__pyx_v_eye));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_108commitTextureSwapChain(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_eye) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("commitTextureSwapChain", 0);

  /* "psychxr/libovr/_libovr.pyx":3930
 *     global _swapChains
 *     global _ptrSession
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_CommitTextureSwapChain(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         _swapChains[eye])
 */
  __pyx_v_result = ovr_CommitTextureSwapChain(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (__pyx_v_7psychxr_6libovr_7_libovr__swapChains[__pyx_v_eye]));

  /* "psychxr/libovr/_libovr.pyx":3934
 *         _swapChains[eye])
 * 
 *     return <int>result             # <<<<<<<<<<<<<<
 * 
 * def endFrame(unsigned int frameIndex=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)__pyx_v_result)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3903
 *     return <int>result
 * 
 * def commitTextureSwapChain(int eye):             # <<<<<<<<<<<<<<
 *     """Commit changes to a given eye's texture swap chain. When called, the
 *     runtime is notified that the texture is ready for use, and the swap
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.commitTextureSwapChain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3936
 *     return <int>result
 * 
 * def endFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Call when rendering a frame has completed. Buffers which have been
 *     committed are passed to the compositor for distortion.
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_111endFrame(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_110endFrame[] = "endFrame(unsigned int frameIndex=0)\nCall when rendering a frame has completed. Buffers which have been\n    committed are passed to the compositor for distortion.\n\n    Parameters\n    ----------\n    frameIndex : int\n        The target frame index.\n\n    Returns\n    -------\n    int\n        Error code returned by API call 'ovr_EndFrame'. Check against\n        :data:`LIBOVR_SUCCESS`, :data:`LIBOVR_SUCCESS_NOT_VISIBLE`,\n        :data:`LIBOVR_SUCCESS_BOUNDARY_INVALID`,\n        :data:`LIBOVR_SUCCESS_DEVICE_UNAVAILABLE`.\n\n    Raises\n    ------\n    RuntimeError\n        Raised if 'debugMode' is True and the API call to 'ovr_EndFrame'\n        returns an error.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_111endFrame = {"endFrame", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_111endFrame, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_110endFrame};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_111endFrame(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_frameIndex;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("endFrame (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frameIndex,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frameIndex);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "endFrame") < 0)) __PYX_ERR(0, 3936, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_frameIndex = __Pyx_PyInt_As_unsigned_int(values[0]); if (unlikely((__pyx_v_frameIndex == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3936, __pyx_L3_error)
    } else {
      __pyx_v_frameIndex = ((unsigned int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("endFrame", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 3936, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.endFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_110endFrame(__pyx_self, __pyx_v_frameIndex);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_110endFrame(CYTHON_UNUSED PyObject *__pyx_self, unsigned int __pyx_v_frameIndex) {
  ovrLayerHeader *__pyx_v_layers;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("endFrame", 0);

  /* "psychxr/libovr/_libovr.pyx":3963
 *     global _eyeLayer
 * 
 *     cdef libovr_capi.ovrLayerHeader* layers = &_eyeLayer.Header             # <<<<<<<<<<<<<<
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_EndFrame(
 *         _ptrSession,
 */
  __pyx_v_layers = (&__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Header);

  /* "psychxr/libovr/_libovr.pyx":3964
 * 
 *     cdef libovr_capi.ovrLayerHeader* layers = &_eyeLayer.Header
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_EndFrame(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         frameIndex,
 */
  __pyx_v_result = ovr_EndFrame(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, __pyx_v_frameIndex, NULL, (&__pyx_v_layers), ((unsigned int)1));

  /* "psychxr/libovr/_libovr.pyx":3971
 *         <unsigned int>1)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def resetFrameStats():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3936
 *     return <int>result
 * 
 * def endFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Call when rendering a frame has completed. Buffers which have been
 *     committed are passed to the compositor for distortion.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.endFrame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3973
 *     return result
 * 
 * def resetFrameStats():             # <<<<<<<<<<<<<<
 *     """Reset frame statistics.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_113resetFrameStats(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_112resetFrameStats[] = "resetFrameStats()\nReset frame statistics.\n\n    Returns\n    -------\n    int\n        Error code returned by 'ovr_ResetPerfStats'.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_113resetFrameStats = {"resetFrameStats", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_113resetFrameStats, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_112resetFrameStats};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_113resetFrameStats(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetFrameStats (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_112resetFrameStats(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_112resetFrameStats(CYTHON_UNUSED PyObject *__pyx_self) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("resetFrameStats", 0);

  /* "psychxr/libovr/_libovr.pyx":3983
 *     """
 *     global _ptrSession
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_ResetPerfStats(_ptrSession)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result = ovr_ResetPerfStats(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession);

  /* "psychxr/libovr/_libovr.pyx":3985
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_ResetPerfStats(_ptrSession)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def getTrackingOriginType():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":3973
 *     return result
 * 
 * def resetFrameStats():             # <<<<<<<<<<<<<<
 *     """Reset frame statistics.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.resetFrameStats", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":3987
 *     return result
 * 
 * def getTrackingOriginType():             # <<<<<<<<<<<<<<
 *     """Tracking origin type.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_115getTrackingOriginType(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_114getTrackingOriginType[] = "getTrackingOriginType()\nTracking origin type.\n\n    The tracking origin type specifies where the origin is placed when computing\n    the pose of tracked objects (i.e. the head and touch controllers.) Valid\n    values are 'floor' and 'eye'.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_115getTrackingOriginType = {"getTrackingOriginType", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_115getTrackingOriginType, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_114getTrackingOriginType};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_115getTrackingOriginType(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTrackingOriginType (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_114getTrackingOriginType(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_114getTrackingOriginType(CYTHON_UNUSED PyObject *__pyx_self) {
  ovrTrackingOrigin __pyx_v_origin;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTrackingOriginType", 0);

  /* "psychxr/libovr/_libovr.pyx":3997
 *     global _ptrSession
 *     cdef libovr_capi.ovrTrackingOrigin origin = \
 *         libovr_capi.ovr_GetTrackingOriginType(_ptrSession)             # <<<<<<<<<<<<<<
 * 
 *     if origin == libovr_capi.ovrTrackingOrigin_FloorLevel:
 */
  __pyx_v_origin = ovr_GetTrackingOriginType(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession);

  /* "psychxr/libovr/_libovr.pyx":3999
 *         libovr_capi.ovr_GetTrackingOriginType(_ptrSession)
 * 
 *     if origin == libovr_capi.ovrTrackingOrigin_FloorLevel:             # <<<<<<<<<<<<<<
 *         return 'floor'
 *     elif origin == libovr_capi.ovrTrackingOrigin_EyeLevel:
 */
  switch (__pyx_v_origin) {
    case ovrTrackingOrigin_FloorLevel:

    /* "psychxr/libovr/_libovr.pyx":4000
 * 
 *     if origin == libovr_capi.ovrTrackingOrigin_FloorLevel:
 *         return 'floor'             # <<<<<<<<<<<<<<
 *     elif origin == libovr_capi.ovrTrackingOrigin_EyeLevel:
 *         return 'eye'
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_floor);
    __pyx_r = __pyx_n_s_floor;
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":3999
 *         libovr_capi.ovr_GetTrackingOriginType(_ptrSession)
 * 
 *     if origin == libovr_capi.ovrTrackingOrigin_FloorLevel:             # <<<<<<<<<<<<<<
 *         return 'floor'
 *     elif origin == libovr_capi.ovrTrackingOrigin_EyeLevel:
 */
    break;
    case ovrTrackingOrigin_EyeLevel:

    /* "psychxr/libovr/_libovr.pyx":4002
 *         return 'floor'
 *     elif origin == libovr_capi.ovrTrackingOrigin_EyeLevel:
 *         return 'eye'             # <<<<<<<<<<<<<<
 * 
 * def setTrackingOriginType(str value):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_n_s_eye);
    __pyx_r = __pyx_n_s_eye;
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":4001
 *     if origin == libovr_capi.ovrTrackingOrigin_FloorLevel:
 *         return 'floor'
 *     elif origin == libovr_capi.ovrTrackingOrigin_EyeLevel:             # <<<<<<<<<<<<<<
 *         return 'eye'
 * 
 */
    break;
    default: break;
  }

  /* "psychxr/libovr/_libovr.pyx":3987
 *     return result
 * 
 * def getTrackingOriginType():             # <<<<<<<<<<<<<<
 *     """Tracking origin type.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4004
 *         return 'eye'
 * 
 * def setTrackingOriginType(str value):             # <<<<<<<<<<<<<<
 *     cdef libovr_capi.ovrResult result
 *     global _ptrSession
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_117setTrackingOriginType(PyObject *__pyx_self, PyObject *__pyx_v_value); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_116setTrackingOriginType[] = "setTrackingOriginType(str value)";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_117setTrackingOriginType = {"setTrackingOriginType", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_117setTrackingOriginType, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_116setTrackingOriginType};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_117setTrackingOriginType(PyObject *__pyx_self, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setTrackingOriginType (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_value), (&PyString_Type), 1, "value", 1))) __PYX_ERR(0, 4004, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_116setTrackingOriginType(__pyx_self, ((PyObject*)__pyx_v_value));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_116setTrackingOriginType(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_value) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("setTrackingOriginType", 0);

  /* "psychxr/libovr/_libovr.pyx":4007
 *     cdef libovr_capi.ovrResult result
 *     global _ptrSession
 *     if value == 'floor':             # <<<<<<<<<<<<<<
 *         result = libovr_capi.ovr_SetTrackingOriginType(
 *             _ptrSession, libovr_capi.ovrTrackingOrigin_FloorLevel)
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_value, __pyx_n_s_floor, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 4007, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4008
 *     global _ptrSession
 *     if value == 'floor':
 *         result = libovr_capi.ovr_SetTrackingOriginType(             # <<<<<<<<<<<<<<
 *             _ptrSession, libovr_capi.ovrTrackingOrigin_FloorLevel)
 *     elif value == 'eye':
 */
    __pyx_v_result = ovr_SetTrackingOriginType(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ovrTrackingOrigin_FloorLevel);

    /* "psychxr/libovr/_libovr.pyx":4007
 *     cdef libovr_capi.ovrResult result
 *     global _ptrSession
 *     if value == 'floor':             # <<<<<<<<<<<<<<
 *         result = libovr_capi.ovr_SetTrackingOriginType(
 *             _ptrSession, libovr_capi.ovrTrackingOrigin_FloorLevel)
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4010
 *         result = libovr_capi.ovr_SetTrackingOriginType(
 *             _ptrSession, libovr_capi.ovrTrackingOrigin_FloorLevel)
 *     elif value == 'eye':             # <<<<<<<<<<<<<<
 *         result = libovr_capi.ovr_SetTrackingOriginType(
 *             _ptrSession, libovr_capi.ovrTrackingOrigin_EyeLevel)
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_value, __pyx_n_s_eye, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4010, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":4011
 *             _ptrSession, libovr_capi.ovrTrackingOrigin_FloorLevel)
 *     elif value == 'eye':
 *         result = libovr_capi.ovr_SetTrackingOriginType(             # <<<<<<<<<<<<<<
 *             _ptrSession, libovr_capi.ovrTrackingOrigin_EyeLevel)
 * 
 */
    __pyx_v_result = ovr_SetTrackingOriginType(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ovrTrackingOrigin_EyeLevel);

    /* "psychxr/libovr/_libovr.pyx":4010
 *         result = libovr_capi.ovr_SetTrackingOriginType(
 *             _ptrSession, libovr_capi.ovrTrackingOrigin_FloorLevel)
 *     elif value == 'eye':             # <<<<<<<<<<<<<<
 *         result = libovr_capi.ovr_SetTrackingOriginType(
 *             _ptrSession, libovr_capi.ovrTrackingOrigin_EyeLevel)
 */
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":4014
 *             _ptrSession, libovr_capi.ovrTrackingOrigin_EyeLevel)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def recenterTrackingOrigin():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4004
 *         return 'eye'
 * 
 * def setTrackingOriginType(str value):             # <<<<<<<<<<<<<<
 *     cdef libovr_capi.ovrResult result
 *     global _ptrSession
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.setTrackingOriginType", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4016
 *     return result
 * 
 * def recenterTrackingOrigin():             # <<<<<<<<<<<<<<
 *     """Recenter the tracking origin.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_119recenterTrackingOrigin(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_118recenterTrackingOrigin[] = "recenterTrackingOrigin()\nRecenter the tracking origin.\n\n    Returns\n    -------\n    None\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_119recenterTrackingOrigin = {"recenterTrackingOrigin", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_119recenterTrackingOrigin, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_118recenterTrackingOrigin};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_119recenterTrackingOrigin(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("recenterTrackingOrigin (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_118recenterTrackingOrigin(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_118recenterTrackingOrigin(CYTHON_UNUSED PyObject *__pyx_self) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("recenterTrackingOrigin", 0);

  /* "psychxr/libovr/_libovr.pyx":4025
 *     """
 *     global _ptrSession
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_RecenterTrackingOrigin(             # <<<<<<<<<<<<<<
 *         _ptrSession)
 * 
 */
  __pyx_v_result = ovr_RecenterTrackingOrigin(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession);

  /* "psychxr/libovr/_libovr.pyx":4028
 *         _ptrSession)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def specifyTrackingOrigin(LibOVRPose newOrigin):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4016
 *     return result
 * 
 * def recenterTrackingOrigin():             # <<<<<<<<<<<<<<
 *     """Recenter the tracking origin.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.recenterTrackingOrigin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4030
 *     return result
 * 
 * def specifyTrackingOrigin(LibOVRPose newOrigin):             # <<<<<<<<<<<<<<
 *     """Specify a new tracking origin.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_121specifyTrackingOrigin(PyObject *__pyx_self, PyObject *__pyx_v_newOrigin); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_120specifyTrackingOrigin[] = "specifyTrackingOrigin(LibOVRPose newOrigin)\nSpecify a new tracking origin.\n\n    Parameters\n    ----------\n    newOrigin : LibOVRPose\n        New origin to use.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_121specifyTrackingOrigin = {"specifyTrackingOrigin", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_121specifyTrackingOrigin, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_120specifyTrackingOrigin};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_121specifyTrackingOrigin(PyObject *__pyx_self, PyObject *__pyx_v_newOrigin) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("specifyTrackingOrigin (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_newOrigin), __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose, 1, "newOrigin", 0))) __PYX_ERR(0, 4030, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_120specifyTrackingOrigin(__pyx_self, ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)__pyx_v_newOrigin));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_120specifyTrackingOrigin(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *__pyx_v_newOrigin) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("specifyTrackingOrigin", 0);

  /* "psychxr/libovr/_libovr.pyx":4040
 *     """
 *     global _ptrSession
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_SpecifyTrackingOrigin(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         newOrigin.c_data[0])
 */
  __pyx_v_result = ovr_SpecifyTrackingOrigin(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (__pyx_v_newOrigin->c_data[0]));

  /* "psychxr/libovr/_libovr.pyx":4044
 *         newOrigin.c_data[0])
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def clearShouldRecenterFlag():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4030
 *     return result
 * 
 * def specifyTrackingOrigin(LibOVRPose newOrigin):             # <<<<<<<<<<<<<<
 *     """Specify a new tracking origin.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.specifyTrackingOrigin", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4046
 *     return result
 * 
 * def clearShouldRecenterFlag():             # <<<<<<<<<<<<<<
 *     """Clear the `shouldRecenter` flag.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_123clearShouldRecenterFlag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_122clearShouldRecenterFlag[] = "clearShouldRecenterFlag()\nClear the `shouldRecenter` flag.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_123clearShouldRecenterFlag = {"clearShouldRecenterFlag", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_123clearShouldRecenterFlag, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_122clearShouldRecenterFlag};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_123clearShouldRecenterFlag(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearShouldRecenterFlag (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_122clearShouldRecenterFlag(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_122clearShouldRecenterFlag(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clearShouldRecenterFlag", 0);

  /* "psychxr/libovr/_libovr.pyx":4051
 *     """
 *     global _ptrSession
 *     libovr_capi.ovr_ClearShouldRecenterFlag(_ptrSession)             # <<<<<<<<<<<<<<
 * 
 * def getTrackerCount():
 */
  ovr_ClearShouldRecenterFlag(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession);

  /* "psychxr/libovr/_libovr.pyx":4046
 *     return result
 * 
 * def clearShouldRecenterFlag():             # <<<<<<<<<<<<<<
 *     """Clear the `shouldRecenter` flag.
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4053
 *     libovr_capi.ovr_ClearShouldRecenterFlag(_ptrSession)
 * 
 * def getTrackerCount():             # <<<<<<<<<<<<<<
 *     """Get the number of attached trackers."""
 *     global _ptrSession
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_125getTrackerCount(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_124getTrackerCount[] = "getTrackerCount()\nGet the number of attached trackers.";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_125getTrackerCount = {"getTrackerCount", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_125getTrackerCount, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_124getTrackerCount};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_125getTrackerCount(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTrackerCount (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_124getTrackerCount(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_124getTrackerCount(CYTHON_UNUSED PyObject *__pyx_self) {
  unsigned int __pyx_v_trackerCount;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getTrackerCount", 0);

  /* "psychxr/libovr/_libovr.pyx":4056
 *     """Get the number of attached trackers."""
 *     global _ptrSession
 *     cdef unsigned int trackerCount = libovr_capi.ovr_GetTrackerCount(             # <<<<<<<<<<<<<<
 *         _ptrSession)
 * 
 */
  __pyx_v_trackerCount = ovr_GetTrackerCount(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession);

  /* "psychxr/libovr/_libovr.pyx":4059
 *         _ptrSession)
 * 
 *     return <int>trackerCount             # <<<<<<<<<<<<<<
 * 
 * def getTrackerInfo(int trackerIndex):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)__pyx_v_trackerCount)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4053
 *     libovr_capi.ovr_ClearShouldRecenterFlag(_ptrSession)
 * 
 * def getTrackerCount():             # <<<<<<<<<<<<<<
 *     """Get the number of attached trackers."""
 *     global _ptrSession
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTrackerCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4061
 *     return <int>trackerCount
 * 
 * def getTrackerInfo(int trackerIndex):             # <<<<<<<<<<<<<<
 *     """Get information about a given tracker.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_127getTrackerInfo(PyObject *__pyx_self, PyObject *__pyx_arg_trackerIndex); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_126getTrackerInfo[] = "getTrackerInfo(int trackerIndex)\nGet information about a given tracker.\n\n    Parameters\n    ----------\n    trackerIndex : int\n        The index of the sensor to query. Valid values are between 0 and\n        'getTrackerCount()'.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_127getTrackerInfo = {"getTrackerInfo", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_127getTrackerInfo, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_126getTrackerInfo};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_127getTrackerInfo(PyObject *__pyx_self, PyObject *__pyx_arg_trackerIndex) {
  int __pyx_v_trackerIndex;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTrackerInfo (wrapper)", 0);
  assert(__pyx_arg_trackerIndex); {
    __pyx_v_trackerIndex = __Pyx_PyInt_As_int(__pyx_arg_trackerIndex); if (unlikely((__pyx_v_trackerIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4061, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTrackerInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_126getTrackerInfo(__pyx_self, ((int)__pyx_v_trackerIndex));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_126getTrackerInfo(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_trackerIndex) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *__pyx_v_to_return = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getTrackerInfo", 0);

  /* "psychxr/libovr/_libovr.pyx":4071
 * 
 *     """
 *     cdef LibOVRTrackerInfo to_return = LibOVRTrackerInfo()             # <<<<<<<<<<<<<<
 *     global _ptrSession
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_to_return = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4075
 * 
 *     # set the tracker index
 *     to_return._trackerIndex = <unsigned int>trackerIndex             # <<<<<<<<<<<<<<
 * 
 *     # set the descriptor data
 */
  __pyx_v_to_return->_trackerIndex = ((unsigned int)__pyx_v_trackerIndex);

  /* "psychxr/libovr/_libovr.pyx":4078
 * 
 *     # set the descriptor data
 *     to_return.c_ovrTrackerDesc = libovr_capi.ovr_GetTrackerDesc(             # <<<<<<<<<<<<<<
 *         _ptrSession, <unsigned int>trackerIndex)
 *     # get the tracker pose
 */
  __pyx_v_to_return->c_ovrTrackerDesc = ovr_GetTrackerDesc(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((unsigned int)__pyx_v_trackerIndex));

  /* "psychxr/libovr/_libovr.pyx":4081
 *         _ptrSession, <unsigned int>trackerIndex)
 *     # get the tracker pose
 *     to_return.c_ovrTrackerPose = libovr_capi.ovr_GetTrackerPose(             # <<<<<<<<<<<<<<
 *         _ptrSession, <unsigned int>trackerIndex)
 * 
 */
  __pyx_v_to_return->c_ovrTrackerPose = ovr_GetTrackerPose(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((unsigned int)__pyx_v_trackerIndex));

  /* "psychxr/libovr/_libovr.pyx":4084
 *         _ptrSession, <unsigned int>trackerIndex)
 * 
 *     return to_return             # <<<<<<<<<<<<<<
 * 
 * def refreshPerformanceStats():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4061
 *     return <int>trackerCount
 * 
 * def getTrackerInfo(int trackerIndex):             # <<<<<<<<<<<<<<
 *     """Get information about a given tracker.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTrackerInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4086
 *     return to_return
 * 
 * def refreshPerformanceStats():             # <<<<<<<<<<<<<<
 *     """Refresh performance statistics.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_129refreshPerformanceStats(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_128refreshPerformanceStats[] = "refreshPerformanceStats()\nRefresh performance statistics.\n\n    Should be called after 'endFrame'.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_129refreshPerformanceStats = {"refreshPerformanceStats", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_129refreshPerformanceStats, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_128refreshPerformanceStats};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_129refreshPerformanceStats(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("refreshPerformanceStats (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_128refreshPerformanceStats(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_128refreshPerformanceStats(CYTHON_UNUSED PyObject *__pyx_self) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_v_compFrameStats = 0;
  int __pyx_v_statIdx;
  int __pyx_v_numStats;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_frameStat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  __Pyx_RefNannySetupContext("refreshPerformanceStats", 0);

  /* "psychxr/libovr/_libovr.pyx":4094
 *     global _ptrSession
 *     global _frameStats
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_GetPerfStats(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         &_frameStats)
 */
  __pyx_v_result = ovr_GetPerfStats(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (&__pyx_v_7psychxr_6libovr_7_libovr__frameStats));

  /* "psychxr/libovr/_libovr.pyx":4099
 * 
 *     # clear
 *     cdef list compFrameStats = list()             # <<<<<<<<<<<<<<
 * 
 *     cdef int statIdx = 0
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_compFrameStats = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4101
 *     cdef list compFrameStats = list()
 * 
 *     cdef int statIdx = 0             # <<<<<<<<<<<<<<
 *     cdef int numStats = _frameStats.FrameStatsCount
 *     for statIdx in range(numStats):
 */
  __pyx_v_statIdx = 0;

  /* "psychxr/libovr/_libovr.pyx":4102
 * 
 *     cdef int statIdx = 0
 *     cdef int numStats = _frameStats.FrameStatsCount             # <<<<<<<<<<<<<<
 *     for statIdx in range(numStats):
 *         frameStat = LibOVRFrameStat()
 */
  __pyx_t_2 = __pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStatsCount;
  __pyx_v_numStats = __pyx_t_2;

  /* "psychxr/libovr/_libovr.pyx":4103
 *     cdef int statIdx = 0
 *     cdef int numStats = _frameStats.FrameStatsCount
 *     for statIdx in range(numStats):             # <<<<<<<<<<<<<<
 *         frameStat = LibOVRFrameStat()
 *         frameStat.c_data[0] = _frameStats.FrameStats[statIdx]
 */
  __pyx_t_2 = __pyx_v_numStats;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_statIdx = __pyx_t_4;

    /* "psychxr/libovr/_libovr.pyx":4104
 *     cdef int numStats = _frameStats.FrameStatsCount
 *     for statIdx in range(numStats):
 *         frameStat = LibOVRFrameStat()             # <<<<<<<<<<<<<<
 *         frameStat.c_data[0] = _frameStats.FrameStats[statIdx]
 *         compFrameStats.append(frameStat)
 */
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRFrameStat)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_frameStat, ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "psychxr/libovr/_libovr.pyx":4105
 *     for statIdx in range(numStats):
 *         frameStat = LibOVRFrameStat()
 *         frameStat.c_data[0] = _frameStats.FrameStats[statIdx]             # <<<<<<<<<<<<<<
 *         compFrameStats.append(frameStat)
 * 
 */
    (__pyx_v_frameStat->c_data[0]) = (__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStats[__pyx_v_statIdx]);

    /* "psychxr/libovr/_libovr.pyx":4106
 *         frameStat = LibOVRFrameStat()
 *         frameStat.c_data[0] = _frameStats.FrameStats[statIdx]
 *         compFrameStats.append(frameStat)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_compFrameStats, ((PyObject *)__pyx_v_frameStat)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 4106, __pyx_L1_error)
  }

  /* "psychxr/libovr/_libovr.pyx":4108
 *         compFrameStats.append(frameStat)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def updatePerfStats():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4086
 *     return to_return
 * 
 * def refreshPerformanceStats():             # <<<<<<<<<<<<<<
 *     """Refresh performance statistics.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.refreshPerformanceStats", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_compFrameStats);
  __Pyx_XDECREF((PyObject *)__pyx_v_frameStat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4110
 *     return result
 * 
 * def updatePerfStats():             # <<<<<<<<<<<<<<
 *     """Update performance stats.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_131updatePerfStats(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_130updatePerfStats[] = "updatePerfStats()\nUpdate performance stats.\n\n    Returns\n    -------\n    int\n        Result of the 'ovr_GetPerfStats' LibOVR API call.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_131updatePerfStats = {"updatePerfStats", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_131updatePerfStats, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_130updatePerfStats};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_131updatePerfStats(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updatePerfStats (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_130updatePerfStats(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_130updatePerfStats(CYTHON_UNUSED PyObject *__pyx_self) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("updatePerfStats", 0);

  /* "psychxr/libovr/_libovr.pyx":4123
 *     global _lastFrameStats
 * 
 *     if _frameStats.FrameStatsCount > 0:             # <<<<<<<<<<<<<<
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:
 *             # copy last frame stats
 */
  __pyx_t_1 = ((__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStatsCount > 0) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":4124
 * 
 *     if _frameStats.FrameStatsCount > 0:
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:             # <<<<<<<<<<<<<<
 *             # copy last frame stats
 *             _lastFrameStats = _frameStats.FrameStats[0]
 */
    __pyx_t_1 = (((__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStats[0]).HmdVsyncIndex > 0) != 0);
    if (__pyx_t_1) {

      /* "psychxr/libovr/_libovr.pyx":4126
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:
 *             # copy last frame stats
 *             _lastFrameStats = _frameStats.FrameStats[0]             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_GetPerfStats(
 */
      __pyx_v_7psychxr_6libovr_7_libovr__lastFrameStats = (__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStats[0]);

      /* "psychxr/libovr/_libovr.pyx":4124
 * 
 *     if _frameStats.FrameStatsCount > 0:
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:             # <<<<<<<<<<<<<<
 *             # copy last frame stats
 *             _lastFrameStats = _frameStats.FrameStats[0]
 */
    }

    /* "psychxr/libovr/_libovr.pyx":4123
 *     global _lastFrameStats
 * 
 *     if _frameStats.FrameStatsCount > 0:             # <<<<<<<<<<<<<<
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:
 *             # copy last frame stats
 */
  }

  /* "psychxr/libovr/_libovr.pyx":4128
 *             _lastFrameStats = _frameStats.FrameStats[0]
 * 
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_GetPerfStats(             # <<<<<<<<<<<<<<
 *         _ptrSession, &_frameStats)
 * 
 */
  __pyx_v_result = ovr_GetPerfStats(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (&__pyx_v_7psychxr_6libovr_7_libovr__frameStats));

  /* "psychxr/libovr/_libovr.pyx":4131
 *         _ptrSession, &_frameStats)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def getAdaptiveGpuPerformanceScale():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4110
 *     return result
 * 
 * def updatePerfStats():             # <<<<<<<<<<<<<<
 *     """Update performance stats.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("psychxr.libovr._libovr.updatePerfStats", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4133
 *     return result
 * 
 * def getAdaptiveGpuPerformanceScale():             # <<<<<<<<<<<<<<
 *     """Get the adaptive GPU performance scale.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_133getAdaptiveGpuPerformanceScale(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_132getAdaptiveGpuPerformanceScale[] = "getAdaptiveGpuPerformanceScale()\nGet the adaptive GPU performance scale.\n\n    Returns\n    -------\n    float\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_133getAdaptiveGpuPerformanceScale = {"getAdaptiveGpuPerformanceScale", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_133getAdaptiveGpuPerformanceScale, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_132getAdaptiveGpuPerformanceScale};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_133getAdaptiveGpuPerformanceScale(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getAdaptiveGpuPerformanceScale (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_132getAdaptiveGpuPerformanceScale(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_132getAdaptiveGpuPerformanceScale(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getAdaptiveGpuPerformanceScale", 0);

  /* "psychxr/libovr/_libovr.pyx":4142
 *     """
 *     global _frameStats
 *     return _frameStats.AdaptiveGpuPerformanceScale             # <<<<<<<<<<<<<<
 * 
 * def getFrameStatsCount():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_7psychxr_6libovr_7_libovr__frameStats.AdaptiveGpuPerformanceScale); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4133
 *     return result
 * 
 * def getAdaptiveGpuPerformanceScale():             # <<<<<<<<<<<<<<
 *     """Get the adaptive GPU performance scale.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getAdaptiveGpuPerformanceScale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4144
 *     return _frameStats.AdaptiveGpuPerformanceScale
 * 
 * def getFrameStatsCount():             # <<<<<<<<<<<<<<
 *     """Get the number of queued compositor statistics.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_135getFrameStatsCount(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_134getFrameStatsCount[] = "getFrameStatsCount()\nGet the number of queued compositor statistics.\n\n    Returns\n    -------\n    int\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_135getFrameStatsCount = {"getFrameStatsCount", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_135getFrameStatsCount, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_134getFrameStatsCount};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_135getFrameStatsCount(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFrameStatsCount (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_134getFrameStatsCount(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_134getFrameStatsCount(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getFrameStatsCount", 0);

  /* "psychxr/libovr/_libovr.pyx":4153
 *     """
 *     global _frameStats
 *     return _frameStats.FrameStatsCount             # <<<<<<<<<<<<<<
 * 
 * def anyFrameStatsDropped():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStatsCount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4144
 *     return _frameStats.AdaptiveGpuPerformanceScale
 * 
 * def getFrameStatsCount():             # <<<<<<<<<<<<<<
 *     """Get the number of queued compositor statistics.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getFrameStatsCount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4155
 *     return _frameStats.FrameStatsCount
 * 
 * def anyFrameStatsDropped():             # <<<<<<<<<<<<<<
 *     """Check if frame stats were dropped.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_137anyFrameStatsDropped(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_136anyFrameStatsDropped[] = "anyFrameStatsDropped()\nCheck if frame stats were dropped.\n\n    This occurs when 'updatePerfStats' is called fewer than once every 5 frames.\n\n    Returns\n    -------\n    bool\n        True if frame statistics were dropped.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_137anyFrameStatsDropped = {"anyFrameStatsDropped", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_137anyFrameStatsDropped, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_136anyFrameStatsDropped};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_137anyFrameStatsDropped(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("anyFrameStatsDropped (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_136anyFrameStatsDropped(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_136anyFrameStatsDropped(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("anyFrameStatsDropped", 0);

  /* "psychxr/libovr/_libovr.pyx":4167
 *     """
 *     global _frameStats
 *     return <bint>_frameStats.AnyFrameStatsDropped             # <<<<<<<<<<<<<<
 * 
 * def checkAswIsAvailable():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_7psychxr_6libovr_7_libovr__frameStats.AnyFrameStatsDropped != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4155
 *     return _frameStats.FrameStatsCount
 * 
 * def anyFrameStatsDropped():             # <<<<<<<<<<<<<<
 *     """Check if frame stats were dropped.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.anyFrameStatsDropped", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4169
 *     return <bint>_frameStats.AnyFrameStatsDropped
 * 
 * def checkAswIsAvailable():             # <<<<<<<<<<<<<<
 *     """Check if ASW is available.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_139checkAswIsAvailable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_138checkAswIsAvailable[] = "checkAswIsAvailable()\nCheck if ASW is available.\n\n    Returns\n    -------\n    bool\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_139checkAswIsAvailable = {"checkAswIsAvailable", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_139checkAswIsAvailable, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_138checkAswIsAvailable};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_139checkAswIsAvailable(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkAswIsAvailable (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_138checkAswIsAvailable(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_138checkAswIsAvailable(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("checkAswIsAvailable", 0);

  /* "psychxr/libovr/_libovr.pyx":4178
 *     """
 *     global _frameStats
 *     return <bint>_frameStats.AswIsAvailable             # <<<<<<<<<<<<<<
 * 
 * def getVisibleProcessId():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong((__pyx_v_7psychxr_6libovr_7_libovr__frameStats.AswIsAvailable != 0)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4169
 *     return <bint>_frameStats.AnyFrameStatsDropped
 * 
 * def checkAswIsAvailable():             # <<<<<<<<<<<<<<
 *     """Check if ASW is available.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.checkAswIsAvailable", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4180
 *     return <bint>_frameStats.AswIsAvailable
 * 
 * def getVisibleProcessId():             # <<<<<<<<<<<<<<
 *     """Process ID which the performance stats are currently being polled.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_141getVisibleProcessId(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_140getVisibleProcessId[] = "getVisibleProcessId()\nProcess ID which the performance stats are currently being polled.\n\n    Returns\n    -------\n    int\n        Process ID.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_141getVisibleProcessId = {"getVisibleProcessId", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_141getVisibleProcessId, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_140getVisibleProcessId};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_141getVisibleProcessId(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getVisibleProcessId (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_140getVisibleProcessId(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_140getVisibleProcessId(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getVisibleProcessId", 0);

  /* "psychxr/libovr/_libovr.pyx":4190
 *     """
 *     global _frameStats
 *     return <int>_frameStats.VisibleProcessId             # <<<<<<<<<<<<<<
 * 
 * def checkAppLastFrameDropped():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((int)__pyx_v_7psychxr_6libovr_7_libovr__frameStats.VisibleProcessId)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4180
 *     return <bint>_frameStats.AswIsAvailable
 * 
 * def getVisibleProcessId():             # <<<<<<<<<<<<<<
 *     """Process ID which the performance stats are currently being polled.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getVisibleProcessId", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4192
 *     return <int>_frameStats.VisibleProcessId
 * 
 * def checkAppLastFrameDropped():             # <<<<<<<<<<<<<<
 *     """Check if the application dropped a frame.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_143checkAppLastFrameDropped(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_142checkAppLastFrameDropped[] = "checkAppLastFrameDropped()\nCheck if the application dropped a frame.\n\n    Returns\n    -------\n    bool\n        True if the application missed the HMD's flip deadline last frame.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_143checkAppLastFrameDropped = {"checkAppLastFrameDropped", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_143checkAppLastFrameDropped, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_142checkAppLastFrameDropped};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_143checkAppLastFrameDropped(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkAppLastFrameDropped (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_142checkAppLastFrameDropped(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_142checkAppLastFrameDropped(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("checkAppLastFrameDropped", 0);

  /* "psychxr/libovr/_libovr.pyx":4204
 *     global _frameStats
 * 
 *     if _frameStats.FrameStatsCount > 0:             # <<<<<<<<<<<<<<
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:
 *             return _frameStats.FrameStats[0].AppDroppedFrameCount > \
 */
  __pyx_t_1 = ((__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStatsCount > 0) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":4205
 * 
 *     if _frameStats.FrameStatsCount > 0:
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:             # <<<<<<<<<<<<<<
 *             return _frameStats.FrameStats[0].AppDroppedFrameCount > \
 *                    _lastFrameStats.AppDroppedFrameCount
 */
    __pyx_t_1 = (((__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStats[0]).HmdVsyncIndex > 0) != 0);
    if (__pyx_t_1) {

      /* "psychxr/libovr/_libovr.pyx":4206
 *     if _frameStats.FrameStatsCount > 0:
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:
 *             return _frameStats.FrameStats[0].AppDroppedFrameCount > \             # <<<<<<<<<<<<<<
 *                    _lastFrameStats.AppDroppedFrameCount
 * 
 */
      __Pyx_XDECREF(__pyx_r);

      /* "psychxr/libovr/_libovr.pyx":4207
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:
 *             return _frameStats.FrameStats[0].AppDroppedFrameCount > \
 *                    _lastFrameStats.AppDroppedFrameCount             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
      __pyx_t_2 = __Pyx_PyBool_FromLong(((__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStats[0]).AppDroppedFrameCount > __pyx_v_7psychxr_6libovr_7_libovr__lastFrameStats.AppDroppedFrameCount)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "psychxr/libovr/_libovr.pyx":4205
 * 
 *     if _frameStats.FrameStatsCount > 0:
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:             # <<<<<<<<<<<<<<
 *             return _frameStats.FrameStats[0].AppDroppedFrameCount > \
 *                    _lastFrameStats.AppDroppedFrameCount
 */
    }

    /* "psychxr/libovr/_libovr.pyx":4204
 *     global _frameStats
 * 
 *     if _frameStats.FrameStatsCount > 0:             # <<<<<<<<<<<<<<
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:
 *             return _frameStats.FrameStats[0].AppDroppedFrameCount > \
 */
  }

  /* "psychxr/libovr/_libovr.pyx":4209
 *                    _lastFrameStats.AppDroppedFrameCount
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 * def checkCompLastFrameDropped():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4192
 *     return <int>_frameStats.VisibleProcessId
 * 
 * def checkAppLastFrameDropped():             # <<<<<<<<<<<<<<
 *     """Check if the application dropped a frame.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("psychxr.libovr._libovr.checkAppLastFrameDropped", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4211
 *     return False
 * 
 * def checkCompLastFrameDropped():             # <<<<<<<<<<<<<<
 *     """Check if the compositor dropped a frame.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_145checkCompLastFrameDropped(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_144checkCompLastFrameDropped[] = "checkCompLastFrameDropped()\nCheck if the compositor dropped a frame.\n\n    Returns\n    -------\n    bool\n        True if the compositor missed the HMD's flip deadline last frame.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_145checkCompLastFrameDropped = {"checkCompLastFrameDropped", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_145checkCompLastFrameDropped, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_144checkCompLastFrameDropped};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_145checkCompLastFrameDropped(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("checkCompLastFrameDropped (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_144checkCompLastFrameDropped(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_144checkCompLastFrameDropped(CYTHON_UNUSED PyObject *__pyx_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("checkCompLastFrameDropped", 0);

  /* "psychxr/libovr/_libovr.pyx":4223
 *     global _frameStats
 * 
 *     if _frameStats.FrameStatsCount > 0:             # <<<<<<<<<<<<<<
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:
 *             return _frameStats.FrameStats[0].CompositorDroppedFrameCount > \
 */
  __pyx_t_1 = ((__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStatsCount > 0) != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":4224
 * 
 *     if _frameStats.FrameStatsCount > 0:
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:             # <<<<<<<<<<<<<<
 *             return _frameStats.FrameStats[0].CompositorDroppedFrameCount > \
 *                    _lastFrameStats.CompositorDroppedFrameCount
 */
    __pyx_t_1 = (((__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStats[0]).HmdVsyncIndex > 0) != 0);
    if (__pyx_t_1) {

      /* "psychxr/libovr/_libovr.pyx":4225
 *     if _frameStats.FrameStatsCount > 0:
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:
 *             return _frameStats.FrameStats[0].CompositorDroppedFrameCount > \             # <<<<<<<<<<<<<<
 *                    _lastFrameStats.CompositorDroppedFrameCount
 * 
 */
      __Pyx_XDECREF(__pyx_r);

      /* "psychxr/libovr/_libovr.pyx":4226
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:
 *             return _frameStats.FrameStats[0].CompositorDroppedFrameCount > \
 *                    _lastFrameStats.CompositorDroppedFrameCount             # <<<<<<<<<<<<<<
 * 
 *     return False
 */
      __pyx_t_2 = __Pyx_PyBool_FromLong(((__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStats[0]).CompositorDroppedFrameCount > __pyx_v_7psychxr_6libovr_7_libovr__lastFrameStats.CompositorDroppedFrameCount)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4225, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      goto __pyx_L0;

      /* "psychxr/libovr/_libovr.pyx":4224
 * 
 *     if _frameStats.FrameStatsCount > 0:
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:             # <<<<<<<<<<<<<<
 *             return _frameStats.FrameStats[0].CompositorDroppedFrameCount > \
 *                    _lastFrameStats.CompositorDroppedFrameCount
 */
    }

    /* "psychxr/libovr/_libovr.pyx":4223
 *     global _frameStats
 * 
 *     if _frameStats.FrameStatsCount > 0:             # <<<<<<<<<<<<<<
 *         if _frameStats.FrameStats[0].HmdVsyncIndex > 0:
 *             return _frameStats.FrameStats[0].CompositorDroppedFrameCount > \
 */
  }

  /* "psychxr/libovr/_libovr.pyx":4228
 *                    _lastFrameStats.CompositorDroppedFrameCount
 * 
 *     return False             # <<<<<<<<<<<<<<
 * 
 * # def getFrameStats():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4211
 *     return False
 * 
 * def checkCompLastFrameDropped():             # <<<<<<<<<<<<<<
 *     """Check if the compositor dropped a frame.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("psychxr.libovr._libovr.checkCompLastFrameDropped", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4245
 * #     return toReturn
 * 
 * def getFrameStats(int frameStatIndex=0):             # <<<<<<<<<<<<<<
 *     """Get detailed compositor frame statistics.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_147getFrameStats(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_146getFrameStats[] = "getFrameStats(int frameStatIndex=0)\nGet detailed compositor frame statistics.\n\n    Parameters\n    ----------\n    frameStatIndex : int (default 0)\n        Frame statistics index to retrieve.\n\n    Returns\n    -------\n    LibOVRFrameStat\n        Frame statistics from the compositor.\n\n    Notes\n    -----\n    If 'updatePerfStats' was called less than once per frame, more than one\n    frame statistic will be available. Check 'getFrameStatsCount' for the number\n    of queued stats and use an index >0 to access them.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_147getFrameStats = {"getFrameStats", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_147getFrameStats, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_146getFrameStats};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_147getFrameStats(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_frameStatIndex;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getFrameStats (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_frameStatIndex,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frameStatIndex);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getFrameStats") < 0)) __PYX_ERR(0, 4245, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_frameStatIndex = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_frameStatIndex == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4245, __pyx_L3_error)
    } else {
      __pyx_v_frameStatIndex = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getFrameStats", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4245, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getFrameStats", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_146getFrameStats(__pyx_self, __pyx_v_frameStatIndex);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_146getFrameStats(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_frameStatIndex) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *__pyx_v_stat = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getFrameStats", 0);

  /* "psychxr/libovr/_libovr.pyx":4267
 *     global _frameStats
 * 
 *     if 0 > frameStatIndex >= _frameStats.FrameStatsCount:             # <<<<<<<<<<<<<<
 *         raise IndexError("Frame stats index out of range.")
 * 
 */
  __pyx_t_1 = (0 > __pyx_v_frameStatIndex);
  if (__pyx_t_1) {
    __pyx_t_1 = (__pyx_v_frameStatIndex >= __pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStatsCount);
  }
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (unlikely(__pyx_t_2)) {

    /* "psychxr/libovr/_libovr.pyx":4268
 * 
 *     if 0 > frameStatIndex >= _frameStats.FrameStatsCount:
 *         raise IndexError("Frame stats index out of range.")             # <<<<<<<<<<<<<<
 * 
 *     cdef LibOVRFrameStat stat = LibOVRFrameStat()
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4268, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 4268, __pyx_L1_error)

    /* "psychxr/libovr/_libovr.pyx":4267
 *     global _frameStats
 * 
 *     if 0 > frameStatIndex >= _frameStats.FrameStatsCount:             # <<<<<<<<<<<<<<
 *         raise IndexError("Frame stats index out of range.")
 * 
 */
  }

  /* "psychxr/libovr/_libovr.pyx":4270
 *         raise IndexError("Frame stats index out of range.")
 * 
 *     cdef LibOVRFrameStat stat = LibOVRFrameStat()             # <<<<<<<<<<<<<<
 *     stat.c_data[0] = _frameStats.FrameStats[0]
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRFrameStat)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4270, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_stat = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":4271
 * 
 *     cdef LibOVRFrameStat stat = LibOVRFrameStat()
 *     stat.c_data[0] = _frameStats.FrameStats[0]             # <<<<<<<<<<<<<<
 * 
 *     return stat
 */
  (__pyx_v_stat->c_data[0]) = (__pyx_v_7psychxr_6libovr_7_libovr__frameStats.FrameStats[0]);

  /* "psychxr/libovr/_libovr.pyx":4273
 *     stat.c_data[0] = _frameStats.FrameStats[0]
 * 
 *     return stat             # <<<<<<<<<<<<<<
 * 
 * def getLastErrorInfo():
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_stat));
  __pyx_r = ((PyObject *)__pyx_v_stat);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4245
 * #     return toReturn
 * 
 * def getFrameStats(int frameStatIndex=0):             # <<<<<<<<<<<<<<
 *     """Get detailed compositor frame statistics.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getFrameStats", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_stat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4275
 *     return stat
 * 
 * def getLastErrorInfo():             # <<<<<<<<<<<<<<
 *     """Get the last error code and information string reported by the API.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_149getLastErrorInfo(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_148getLastErrorInfo[] = "getLastErrorInfo()\nGet the last error code and information string reported by the API.\n\n    This function can be used when implementing custom error handlers.\n\n    Returns\n    -------\n    tuple of int, str\n        Tuple of the API call result and error string.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_149getLastErrorInfo = {"getLastErrorInfo", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_149getLastErrorInfo, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_148getLastErrorInfo};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_149getLastErrorInfo(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getLastErrorInfo (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_148getLastErrorInfo(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_148getLastErrorInfo(CYTHON_UNUSED PyObject *__pyx_self) {
  ovrErrorInfo __pyx_v_lastErrorInfo;
  ovrResult __pyx_v_result;
  PyObject *__pyx_v_errorString = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  ovrResult __pyx_t_1;
  char *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("getLastErrorInfo", 0);

  /* "psychxr/libovr/_libovr.pyx":4287
 *     """
 *     cdef libovr_capi.ovrErrorInfo lastErrorInfo  # store our last error here
 *     libovr_capi.ovr_GetLastErrorInfo(&lastErrorInfo)             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrResult result = lastErrorInfo.Result
 */
  ovr_GetLastErrorInfo((&__pyx_v_lastErrorInfo));

  /* "psychxr/libovr/_libovr.pyx":4289
 *     libovr_capi.ovr_GetLastErrorInfo(&lastErrorInfo)
 * 
 *     cdef libovr_capi.ovrResult result = lastErrorInfo.Result             # <<<<<<<<<<<<<<
 *     cdef str errorString = lastErrorInfo.ErrorString.decode("utf-8")
 * 
 */
  __pyx_t_1 = __pyx_v_lastErrorInfo.Result;
  __pyx_v_result = __pyx_t_1;

  /* "psychxr/libovr/_libovr.pyx":4290
 * 
 *     cdef libovr_capi.ovrResult result = lastErrorInfo.Result
 *     cdef str errorString = lastErrorInfo.ErrorString.decode("utf-8")             # <<<<<<<<<<<<<<
 * 
 *     return <int>result, errorString
 */
  __pyx_t_2 = __pyx_v_lastErrorInfo.ErrorString;
  __pyx_t_3 = __Pyx_decode_c_string(__pyx_t_2, 0, strlen(__pyx_t_2), NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyString_CheckExact(__pyx_t_3))||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "str", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(0, 4290, __pyx_L1_error)
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_errorString = ((PyObject*)__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":4292
 *     cdef str errorString = lastErrorInfo.ErrorString.decode("utf-8")
 * 
 *     return <int>result, errorString             # <<<<<<<<<<<<<<
 * 
 * def setBoundaryColor(float red, float green, float blue):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int(((int)__pyx_v_result)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_INCREF(__pyx_v_errorString);
  __Pyx_GIVEREF(__pyx_v_errorString);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_errorString);
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4275
 *     return stat
 * 
 * def getLastErrorInfo():             # <<<<<<<<<<<<<<
 *     """Get the last error code and information string reported by the API.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getLastErrorInfo", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_errorString);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4294
 *     return <int>result, errorString
 * 
 * def setBoundaryColor(float red, float green, float blue):             # <<<<<<<<<<<<<<
 *     """Set the boundary color.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_151setBoundaryColor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_150setBoundaryColor[] = "setBoundaryColor(float red, float green, float blue)\nSet the boundary color.\n\n    The boundary is drawn by the compositor which overlays the extents of\n    the physical space where the user can safely move.\n\n    Parameters\n    ----------\n    red : float\n        Red component of the color from 0.0 to 1.0.\n    green : float\n        Green component of the color from 0.0 to 1.0.\n    blue : float\n        Blue component of the color from 0.0 to 1.0.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_151setBoundaryColor = {"setBoundaryColor", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_151setBoundaryColor, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_150setBoundaryColor};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_151setBoundaryColor(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  float __pyx_v_red;
  float __pyx_v_green;
  float __pyx_v_blue;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setBoundaryColor (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_red,&__pyx_n_s_green,&__pyx_n_s_blue,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_red)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_green)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setBoundaryColor", 1, 3, 3, 1); __PYX_ERR(0, 4294, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_blue)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setBoundaryColor", 1, 3, 3, 2); __PYX_ERR(0, 4294, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setBoundaryColor") < 0)) __PYX_ERR(0, 4294, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_red = __pyx_PyFloat_AsFloat(values[0]); if (unlikely((__pyx_v_red == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4294, __pyx_L3_error)
    __pyx_v_green = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_green == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4294, __pyx_L3_error)
    __pyx_v_blue = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_blue == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4294, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setBoundaryColor", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4294, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.setBoundaryColor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_150setBoundaryColor(__pyx_self, __pyx_v_red, __pyx_v_green, __pyx_v_blue);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_150setBoundaryColor(CYTHON_UNUSED PyObject *__pyx_self, float __pyx_v_red, float __pyx_v_green, float __pyx_v_blue) {
  ovrColorf __pyx_v_color;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("setBoundaryColor", 0);

  /* "psychxr/libovr/_libovr.pyx":4314
 * 
 *     cdef libovr_capi.ovrColorf color
 *     color.r = <float>red             # <<<<<<<<<<<<<<
 *     color.g = <float>green
 *     color.b = <float>blue
 */
  __pyx_v_color.r = ((float)__pyx_v_red);

  /* "psychxr/libovr/_libovr.pyx":4315
 *     cdef libovr_capi.ovrColorf color
 *     color.r = <float>red
 *     color.g = <float>green             # <<<<<<<<<<<<<<
 *     color.b = <float>blue
 * 
 */
  __pyx_v_color.g = ((float)__pyx_v_green);

  /* "psychxr/libovr/_libovr.pyx":4316
 *     color.r = <float>red
 *     color.g = <float>green
 *     color.b = <float>blue             # <<<<<<<<<<<<<<
 * 
 *     _boundryStyle.Color = color
 */
  __pyx_v_color.b = ((float)__pyx_v_blue);

  /* "psychxr/libovr/_libovr.pyx":4318
 *     color.b = <float>blue
 * 
 *     _boundryStyle.Color = color             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_SetBoundaryLookAndFeel(
 */
  __pyx_v_7psychxr_6libovr_7_libovr__boundryStyle.Color = __pyx_v_color;

  /* "psychxr/libovr/_libovr.pyx":4320
 *     _boundryStyle.Color = color
 * 
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_SetBoundaryLookAndFeel(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         &_boundryStyle)
 */
  __pyx_v_result = ovr_SetBoundaryLookAndFeel(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (&__pyx_v_7psychxr_6libovr_7_libovr__boundryStyle));

  /* "psychxr/libovr/_libovr.pyx":4324
 *         &_boundryStyle)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def resetBoundaryColor():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4294
 *     return <int>result, errorString
 * 
 * def setBoundaryColor(float red, float green, float blue):             # <<<<<<<<<<<<<<
 *     """Set the boundary color.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.setBoundaryColor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4326
 *     return result
 * 
 * def resetBoundaryColor():             # <<<<<<<<<<<<<<
 *     """Reset the boundary color to system default.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_153resetBoundaryColor(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_152resetBoundaryColor[] = "resetBoundaryColor()\nReset the boundary color to system default.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_153resetBoundaryColor = {"resetBoundaryColor", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_153resetBoundaryColor, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_152resetBoundaryColor};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_153resetBoundaryColor(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resetBoundaryColor (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_152resetBoundaryColor(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_152resetBoundaryColor(CYTHON_UNUSED PyObject *__pyx_self) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("resetBoundaryColor", 0);

  /* "psychxr/libovr/_libovr.pyx":4331
 *     """
 *     global _ptrSession
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_ResetBoundaryLookAndFeel(             # <<<<<<<<<<<<<<
 *         _ptrSession)
 * 
 */
  __pyx_v_result = ovr_ResetBoundaryLookAndFeel(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession);

  /* "psychxr/libovr/_libovr.pyx":4334
 *         _ptrSession)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def getBoundaryVisible():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4326
 *     return result
 * 
 * def resetBoundaryColor():             # <<<<<<<<<<<<<<
 *     """Reset the boundary color to system default.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.resetBoundaryColor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4336
 *     return result
 * 
 * def getBoundaryVisible():             # <<<<<<<<<<<<<<
 *     """Check if the Guardian boundary is visible.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_155getBoundaryVisible(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_154getBoundaryVisible[] = "getBoundaryVisible()\nCheck if the Guardian boundary is visible.\n\n    The boundary is drawn by the compositor which overlays the extents of\n    the physical space where the user can safely move.\n\n    Notes\n    -----\n    Since the boundary has a fade-in effect, the boundary might be reported as\n    visible but difficult to actually see.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_155getBoundaryVisible = {"getBoundaryVisible", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_155getBoundaryVisible, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_154getBoundaryVisible};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_155getBoundaryVisible(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBoundaryVisible (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_154getBoundaryVisible(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_154getBoundaryVisible(CYTHON_UNUSED PyObject *__pyx_self) {
  ovrBool __pyx_v_is_visible;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("getBoundaryVisible", 0);

  /* "psychxr/libovr/_libovr.pyx":4350
 *     global _ptrSession
 *     cdef libovr_capi.ovrBool is_visible
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_GetBoundaryVisible(             # <<<<<<<<<<<<<<
 *         _ptrSession, &is_visible)
 * 
 */
  __pyx_v_result = ovr_GetBoundaryVisible(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, (&__pyx_v_is_visible));

  /* "psychxr/libovr/_libovr.pyx":4353
 *         _ptrSession, &is_visible)
 * 
 *     return result, is_visible             # <<<<<<<<<<<<<<
 * 
 * def showBoundary():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_ovrBool(__pyx_v_is_visible); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4336
 *     return result
 * 
 * def getBoundaryVisible():             # <<<<<<<<<<<<<<
 *     """Check if the Guardian boundary is visible.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getBoundaryVisible", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4355
 *     return result, is_visible
 * 
 * def showBoundary():             # <<<<<<<<<<<<<<
 *     """Show the boundary.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_157showBoundary(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_156showBoundary[] = "showBoundary()\nShow the boundary.\n\n    The boundary is drawn by the compositor which overlays the extents of\n    the physical space where the user can safely move.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_157showBoundary = {"showBoundary", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_157showBoundary, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_156showBoundary};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_157showBoundary(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("showBoundary (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_156showBoundary(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_156showBoundary(CYTHON_UNUSED PyObject *__pyx_self) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("showBoundary", 0);

  /* "psychxr/libovr/_libovr.pyx":4363
 *     """
 *     global _ptrSession
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_RequestBoundaryVisible(             # <<<<<<<<<<<<<<
 *         _ptrSession, libovr_capi.ovrTrue)
 * 
 */
  __pyx_v_result = ovr_RequestBoundaryVisible(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ovrTrue);

  /* "psychxr/libovr/_libovr.pyx":4366
 *         _ptrSession, libovr_capi.ovrTrue)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def hideBoundary():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4355
 *     return result, is_visible
 * 
 * def showBoundary():             # <<<<<<<<<<<<<<
 *     """Show the boundary.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.showBoundary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4368
 *     return result
 * 
 * def hideBoundary():             # <<<<<<<<<<<<<<
 *     """Hide the boundry."""
 *     global _ptrSession
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_159hideBoundary(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_158hideBoundary[] = "hideBoundary()\nHide the boundry.";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_159hideBoundary = {"hideBoundary", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_159hideBoundary, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_158hideBoundary};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_159hideBoundary(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("hideBoundary (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_158hideBoundary(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_158hideBoundary(CYTHON_UNUSED PyObject *__pyx_self) {
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("hideBoundary", 0);

  /* "psychxr/libovr/_libovr.pyx":4371
 *     """Hide the boundry."""
 *     global _ptrSession
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_RequestBoundaryVisible(             # <<<<<<<<<<<<<<
 *         _ptrSession, libovr_capi.ovrFalse)
 * 
 */
  __pyx_v_result = ovr_RequestBoundaryVisible(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ovrFalse);

  /* "psychxr/libovr/_libovr.pyx":4374
 *         _ptrSession, libovr_capi.ovrFalse)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def getBoundaryDimensions(str boundaryType='PlayArea'):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4368
 *     return result
 * 
 * def hideBoundary():             # <<<<<<<<<<<<<<
 *     """Hide the boundry."""
 *     global _ptrSession
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.hideBoundary", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4376
 *     return result
 * 
 * def getBoundaryDimensions(str boundaryType='PlayArea'):             # <<<<<<<<<<<<<<
 *     """Get the dimensions of the boundary.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_161getBoundaryDimensions(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_160getBoundaryDimensions[] = "getBoundaryDimensions(str boundaryType='PlayArea')\nGet the dimensions of the boundary.\n\n    Parameters\n    ----------\n    boundaryType : str\n        Boundary type, can be 'PlayArea' or 'Outer'.\n\n    Returns\n    -------\n    ndarray\n        Dimensions of the boundary in meters [x, y, z].\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_161getBoundaryDimensions = {"getBoundaryDimensions", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_161getBoundaryDimensions, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_160getBoundaryDimensions};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_161getBoundaryDimensions(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_boundaryType = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getBoundaryDimensions (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_boundaryType,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)__pyx_n_s_PlayArea);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_boundaryType);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getBoundaryDimensions") < 0)) __PYX_ERR(0, 4376, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_boundaryType = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getBoundaryDimensions", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4376, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getBoundaryDimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_boundaryType), (&PyString_Type), 1, "boundaryType", 1))) __PYX_ERR(0, 4376, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_160getBoundaryDimensions(__pyx_self, __pyx_v_boundaryType);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_160getBoundaryDimensions(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_boundaryType) {
  ovrBoundaryType __pyx_v_btype;
  ovrVector3f __pyx_v_vec_out;
  ovrResult __pyx_v_result;
  PyArrayObject *__pyx_v_to_return = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_to_return;
  __Pyx_Buffer __pyx_pybuffer_to_return;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("getBoundaryDimensions", 0);
  __pyx_pybuffer_to_return.pybuffer.buf = NULL;
  __pyx_pybuffer_to_return.refcount = 0;
  __pyx_pybuffernd_to_return.data = NULL;
  __pyx_pybuffernd_to_return.rcbuffer = &__pyx_pybuffer_to_return;

  /* "psychxr/libovr/_libovr.pyx":4392
 *     global _ptrSession
 *     cdef libovr_capi.ovrBoundaryType btype
 *     if boundaryType == 'PlayArea':             # <<<<<<<<<<<<<<
 *         btype = libovr_capi.ovrBoundary_PlayArea
 *     elif boundaryType == 'Outer':
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_boundaryType, __pyx_n_s_PlayArea, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 4392, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4393
 *     cdef libovr_capi.ovrBoundaryType btype
 *     if boundaryType == 'PlayArea':
 *         btype = libovr_capi.ovrBoundary_PlayArea             # <<<<<<<<<<<<<<
 *     elif boundaryType == 'Outer':
 *         btype = libovr_capi.ovrBoundary_Outer
 */
    __pyx_v_btype = ovrBoundary_PlayArea;

    /* "psychxr/libovr/_libovr.pyx":4392
 *     global _ptrSession
 *     cdef libovr_capi.ovrBoundaryType btype
 *     if boundaryType == 'PlayArea':             # <<<<<<<<<<<<<<
 *         btype = libovr_capi.ovrBoundary_PlayArea
 *     elif boundaryType == 'Outer':
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4394
 *     if boundaryType == 'PlayArea':
 *         btype = libovr_capi.ovrBoundary_PlayArea
 *     elif boundaryType == 'Outer':             # <<<<<<<<<<<<<<
 *         btype = libovr_capi.ovrBoundary_Outer
 *     else:
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_boundaryType, __pyx_n_s_Outer, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4394, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (likely(__pyx_t_1)) {

    /* "psychxr/libovr/_libovr.pyx":4395
 *         btype = libovr_capi.ovrBoundary_PlayArea
 *     elif boundaryType == 'Outer':
 *         btype = libovr_capi.ovrBoundary_Outer             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Invalid boundary type specified.")
 */
    __pyx_v_btype = ovrBoundary_Outer;

    /* "psychxr/libovr/_libovr.pyx":4394
 *     if boundaryType == 'PlayArea':
 *         btype = libovr_capi.ovrBoundary_PlayArea
 *     elif boundaryType == 'Outer':             # <<<<<<<<<<<<<<
 *         btype = libovr_capi.ovrBoundary_Outer
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4397
 *         btype = libovr_capi.ovrBoundary_Outer
 *     else:
 *         raise ValueError("Invalid boundary type specified.")             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrVector3f vec_out
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4397, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 4397, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":4400
 * 
 *     cdef libovr_capi.ovrVector3f vec_out
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_GetBoundaryDimensions(             # <<<<<<<<<<<<<<
 *             _ptrSession, btype, &vec_out)
 * 
 */
  __pyx_v_result = ovr_GetBoundaryDimensions(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, __pyx_v_btype, (&__pyx_v_vec_out));

  /* "psychxr/libovr/_libovr.pyx":4403
 *             _ptrSession, btype, &vec_out)
 * 
 *     cdef np.ndarray[np.float32_t, ndim=1] to_return = np.asarray(             # <<<<<<<<<<<<<<
 *         (vec_out.x, vec_out.y, vec_out.z), dtype=np.float32)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_asarray); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":4404
 * 
 *     cdef np.ndarray[np.float32_t, ndim=1] to_return = np.asarray(
 *         (vec_out.x, vec_out.y, vec_out.z), dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *     return result, to_return
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_vec_out.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_vec_out.y); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_vec_out.z); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;

  /* "psychxr/libovr/_libovr.pyx":4403
 *             _ptrSession, btype, &vec_out)
 * 
 *     cdef np.ndarray[np.float32_t, ndim=1] to_return = np.asarray(             # <<<<<<<<<<<<<<
 *         (vec_out.x, vec_out.y, vec_out.z), dtype=np.float32)
 * 
 */
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
  __pyx_t_7 = 0;

  /* "psychxr/libovr/_libovr.pyx":4404
 * 
 *     cdef np.ndarray[np.float32_t, ndim=1] to_return = np.asarray(
 *         (vec_out.x, vec_out.y, vec_out.z), dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *     return result, to_return
 */
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 4404, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":4403
 *             _ptrSession, btype, &vec_out)
 * 
 *     cdef np.ndarray[np.float32_t, ndim=1] to_return = np.asarray(             # <<<<<<<<<<<<<<
 *         (vec_out.x, vec_out.y, vec_out.z), dtype=np.float32)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) __PYX_ERR(0, 4403, __pyx_L1_error)
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {
      __pyx_v_to_return = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_to_return.rcbuffer->pybuffer.buf = NULL;
      __PYX_ERR(0, 4403, __pyx_L1_error)
    } else {__pyx_pybuffernd_to_return.diminfo[0].strides = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_to_return.diminfo[0].shape = __pyx_pybuffernd_to_return.rcbuffer->pybuffer.shape[0];
    }
  }
  __pyx_t_8 = 0;
  __pyx_v_to_return = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":4406
 *         (vec_out.x, vec_out.y, vec_out.z), dtype=np.float32)
 * 
 *     return result, to_return             # <<<<<<<<<<<<<<
 * 
 * #def getBoundaryPoints(str boundaryType='PlayArea'):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_to_return));
  PyTuple_SET_ITEM(__pyx_t_7, 1, ((PyObject *)__pyx_v_to_return));
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4376
 *     return result
 * 
 * def getBoundaryDimensions(str boundaryType='PlayArea'):             # <<<<<<<<<<<<<<
 *     """Get the dimensions of the boundary.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("psychxr.libovr._libovr.getBoundaryDimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_to_return.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4412
 * #    pass  # TODO: make this work.
 * 
 * def getConnectedControllerTypes():             # <<<<<<<<<<<<<<
 *     """Get connected controller types.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_163getConnectedControllerTypes(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_162getConnectedControllerTypes[] = "getConnectedControllerTypes()\nGet connected controller types.\n\n    Returns\n    -------\n    list\n        Connected controller types.\n\n    Examples\n    --------\n\n    Check if the Xbox gamepad is connected::\n\n        connected = libovr.getConnectedControllerTypes()\n        isConnected = (connected & libovr.LIBOVR_CONTROLLER_TYPE_XBOX) ==             libovr.LIBOVR_CONTROLLER_TYPE_XBOX\n\n    Notes\n    -----\n    If both touch controllers are connected, `LIBOVR_CONTROLLER_TYPE_TOUCH` will\n    be returned instead of `LIBOVR_CONTROLLER_TYPE_LTOUCH` and\n    `LIBOVR_CONTROLLER_TYPE_RTOUCH`.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_163getConnectedControllerTypes = {"getConnectedControllerTypes", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_163getConnectedControllerTypes, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_162getConnectedControllerTypes};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_163getConnectedControllerTypes(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getConnectedControllerTypes (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_162getConnectedControllerTypes(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_162getConnectedControllerTypes(CYTHON_UNUSED PyObject *__pyx_self) {
  unsigned int __pyx_v_result;
  PyObject *__pyx_v_toReturn = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("getConnectedControllerTypes", 0);

  /* "psychxr/libovr/_libovr.pyx":4437
 *     """
 *     global _ptrSession
 *     cdef unsigned int result = libovr_capi.ovr_GetConnectedControllerTypes(             # <<<<<<<<<<<<<<
 *         _ptrSession)
 * 
 */
  __pyx_v_result = ovr_GetConnectedControllerTypes(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession);

  /* "psychxr/libovr/_libovr.pyx":4440
 *         _ptrSession)
 * 
 *     cdef list toReturn = list()             # <<<<<<<<<<<<<<
 *     if (libovr_capi.ovrControllerType_XBox & result) == \
 *         libovr_capi.ovrControllerType_XBox:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_toReturn = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4441
 * 
 *     cdef list toReturn = list()
 *     if (libovr_capi.ovrControllerType_XBox & result) == \             # <<<<<<<<<<<<<<
 *         libovr_capi.ovrControllerType_XBox:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_XBOX)
 */
  __pyx_t_2 = (((ovrControllerType_XBox & __pyx_v_result) == ovrControllerType_XBox) != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4443
 *     if (libovr_capi.ovrControllerType_XBox & result) == \
 *         libovr_capi.ovrControllerType_XBox:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_XBOX)             # <<<<<<<<<<<<<<
 *     if (libovr_capi.ovrControllerType_Remote & result) == \
 *         libovr_capi.ovrControllerType_Remote:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_toReturn, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 4443, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "psychxr/libovr/_libovr.pyx":4441
 * 
 *     cdef list toReturn = list()
 *     if (libovr_capi.ovrControllerType_XBox & result) == \             # <<<<<<<<<<<<<<
 *         libovr_capi.ovrControllerType_XBox:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_XBOX)
 */
  }

  /* "psychxr/libovr/_libovr.pyx":4444
 *         libovr_capi.ovrControllerType_XBox:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_XBOX)
 *     if (libovr_capi.ovrControllerType_Remote & result) == \             # <<<<<<<<<<<<<<
 *         libovr_capi.ovrControllerType_Remote:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_REMOTE)
 */
  __pyx_t_2 = (((ovrControllerType_Remote & __pyx_v_result) == ovrControllerType_Remote) != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4446
 *     if (libovr_capi.ovrControllerType_Remote & result) == \
 *         libovr_capi.ovrControllerType_Remote:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_REMOTE)             # <<<<<<<<<<<<<<
 *     if (libovr_capi.ovrControllerType_Touch & result) == \
 *         libovr_capi.ovrControllerType_Touch:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4446, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_toReturn, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 4446, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "psychxr/libovr/_libovr.pyx":4444
 *         libovr_capi.ovrControllerType_XBox:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_XBOX)
 *     if (libovr_capi.ovrControllerType_Remote & result) == \             # <<<<<<<<<<<<<<
 *         libovr_capi.ovrControllerType_Remote:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_REMOTE)
 */
  }

  /* "psychxr/libovr/_libovr.pyx":4447
 *         libovr_capi.ovrControllerType_Remote:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_REMOTE)
 *     if (libovr_capi.ovrControllerType_Touch & result) == \             # <<<<<<<<<<<<<<
 *         libovr_capi.ovrControllerType_Touch:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_TOUCH)
 */
  __pyx_t_2 = (((ovrControllerType_Touch & __pyx_v_result) == ovrControllerType_Touch) != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4449
 *     if (libovr_capi.ovrControllerType_Touch & result) == \
 *         libovr_capi.ovrControllerType_Touch:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_TOUCH)             # <<<<<<<<<<<<<<
 *         # if we have the touch controller, don't poll single controllers
 *         return toReturn
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4449, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_toReturn, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 4449, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "psychxr/libovr/_libovr.pyx":4451
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_TOUCH)
 *         # if we have the touch controller, don't poll single controllers
 *         return toReturn             # <<<<<<<<<<<<<<
 * 
 *     if (libovr_capi.ovrControllerType_LTouch & result) == \
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_toReturn);
    __pyx_r = __pyx_v_toReturn;
    goto __pyx_L0;

    /* "psychxr/libovr/_libovr.pyx":4447
 *         libovr_capi.ovrControllerType_Remote:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_REMOTE)
 *     if (libovr_capi.ovrControllerType_Touch & result) == \             # <<<<<<<<<<<<<<
 *         libovr_capi.ovrControllerType_Touch:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_TOUCH)
 */
  }

  /* "psychxr/libovr/_libovr.pyx":4453
 *         return toReturn
 * 
 *     if (libovr_capi.ovrControllerType_LTouch & result) == \             # <<<<<<<<<<<<<<
 *         libovr_capi.ovrControllerType_LTouch:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_LTOUCH)
 */
  __pyx_t_2 = (((ovrControllerType_LTouch & __pyx_v_result) == ovrControllerType_LTouch) != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4455
 *     if (libovr_capi.ovrControllerType_LTouch & result) == \
 *         libovr_capi.ovrControllerType_LTouch:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_LTOUCH)             # <<<<<<<<<<<<<<
 *     if (libovr_capi.ovrControllerType_RTouch & result) == \
 *         libovr_capi.ovrControllerType_RTouch:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4455, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_toReturn, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 4455, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "psychxr/libovr/_libovr.pyx":4453
 *         return toReturn
 * 
 *     if (libovr_capi.ovrControllerType_LTouch & result) == \             # <<<<<<<<<<<<<<
 *         libovr_capi.ovrControllerType_LTouch:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_LTOUCH)
 */
  }

  /* "psychxr/libovr/_libovr.pyx":4456
 *         libovr_capi.ovrControllerType_LTouch:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_LTOUCH)
 *     if (libovr_capi.ovrControllerType_RTouch & result) == \             # <<<<<<<<<<<<<<
 *         libovr_capi.ovrControllerType_RTouch:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_RTOUCH)
 */
  __pyx_t_2 = (((ovrControllerType_RTouch & __pyx_v_result) == ovrControllerType_RTouch) != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4458
 *     if (libovr_capi.ovrControllerType_RTouch & result) == \
 *         libovr_capi.ovrControllerType_RTouch:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_RTOUCH)             # <<<<<<<<<<<<<<
 * 
 *     return toReturn
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyList_Append(__pyx_v_toReturn, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 4458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "psychxr/libovr/_libovr.pyx":4456
 *         libovr_capi.ovrControllerType_LTouch:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_LTOUCH)
 *     if (libovr_capi.ovrControllerType_RTouch & result) == \             # <<<<<<<<<<<<<<
 *         libovr_capi.ovrControllerType_RTouch:
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_RTOUCH)
 */
  }

  /* "psychxr/libovr/_libovr.pyx":4460
 *         toReturn.append(LIBOVR_CONTROLLER_TYPE_RTOUCH)
 * 
 *     return toReturn             # <<<<<<<<<<<<<<
 * 
 * def updateInputState(int controller):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_toReturn);
  __pyx_r = __pyx_v_toReturn;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4412
 * #    pass  # TODO: make this work.
 * 
 * def getConnectedControllerTypes():             # <<<<<<<<<<<<<<
 *     """Get connected controller types.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getConnectedControllerTypes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_toReturn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4462
 *     return toReturn
 * 
 * def updateInputState(int controller):             # <<<<<<<<<<<<<<
 *     """Refresh the input state of a controller.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_165updateInputState(PyObject *__pyx_self, PyObject *__pyx_arg_controller); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_164updateInputState[] = "updateInputState(int controller)\nRefresh the input state of a controller.\n\n    Parameters\n    ----------\n    controller : int\n        Controller name. Valid values are:\n            - :data:`LIBOVR_CONTROLLER_TYPE_XBOX` : XBox gamepad.\n            - :data:`LIBOVR_CONTROLLER_TYPE_REMOTE` : Oculus Remote.\n            - :data:`LIBOVR_CONTROLLER_TYPE_TOUCH` : Combined Touch controllers.\n            - :data:`LIBOVR_CONTROLLER_TYPE_LTOUCH` : Left Touch controller.\n            - :data:`LIBOVR_CONTROLLER_TYPE_RTOUCH` : Right Touch controller.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_165updateInputState = {"updateInputState", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_165updateInputState, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_164updateInputState};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_165updateInputState(PyObject *__pyx_self, PyObject *__pyx_arg_controller) {
  int __pyx_v_controller;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("updateInputState (wrapper)", 0);
  assert(__pyx_arg_controller); {
    __pyx_v_controller = __Pyx_PyInt_As_int(__pyx_arg_controller); if (unlikely((__pyx_v_controller == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4462, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.updateInputState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_164updateInputState(__pyx_self, ((int)__pyx_v_controller));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_164updateInputState(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_controller) {
  int __pyx_v_idx;
  ovrInputState *__pyx_v_previousInputState;
  ovrInputState *__pyx_v_currentInputState;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("updateInputState", 0);

  /* "psychxr/libovr/_libovr.pyx":4482
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4483
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 */
    __pyx_v_idx = 0;

    /* "psychxr/libovr/_libovr.pyx":4482
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4484
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4484, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4485
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 */
    __pyx_v_idx = 1;

    /* "psychxr/libovr/_libovr.pyx":4484
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4486
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4486, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4486, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4487
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 */
    __pyx_v_idx = 2;

    /* "psychxr/libovr/_libovr.pyx":4486
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4488
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4489
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4
 */
    __pyx_v_idx = 3;

    /* "psychxr/libovr/_libovr.pyx":4488
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4490
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(__pyx_t_4)) {

    /* "psychxr/libovr/_libovr.pyx":4491
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Invalid controller type specified.")
 */
    __pyx_v_idx = 4;

    /* "psychxr/libovr/_libovr.pyx":4490
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4493
 *         idx = 4
 *     else:
 *         raise ValueError("Invalid controller type specified.")             # <<<<<<<<<<<<<<
 * 
 *     # pointer to the current and previous input state
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 4493, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":4497
 *     # pointer to the current and previous input state
 *     cdef libovr_capi.ovrInputState* previousInputState = \
 *         &_prevInputState[idx]             # <<<<<<<<<<<<<<
 *     cdef libovr_capi.ovrInputState* currentInputState = \
 *         &_inputStates[idx]
 */
  __pyx_v_previousInputState = (&(__pyx_v_7psychxr_6libovr_7_libovr__prevInputState[__pyx_v_idx]));

  /* "psychxr/libovr/_libovr.pyx":4499
 *         &_prevInputState[idx]
 *     cdef libovr_capi.ovrInputState* currentInputState = \
 *         &_inputStates[idx]             # <<<<<<<<<<<<<<
 * 
 *     # copy the current input state into the previous before updating
 */
  __pyx_v_currentInputState = (&(__pyx_v_7psychxr_6libovr_7_libovr__inputStates[__pyx_v_idx]));

  /* "psychxr/libovr/_libovr.pyx":4502
 * 
 *     # copy the current input state into the previous before updating
 *     previousInputState[0] = currentInputState[0]             # <<<<<<<<<<<<<<
 * 
 *     # get the current input state
 */
  (__pyx_v_previousInputState[0]) = (__pyx_v_currentInputState[0]);

  /* "psychxr/libovr/_libovr.pyx":4505
 * 
 *     # get the current input state
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_GetInputState(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         <libovr_capi.ovrControllerType>controller,
 */
  __pyx_v_result = ovr_GetInputState(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((ovrControllerType)__pyx_v_controller), __pyx_v_currentInputState);

  /* "psychxr/libovr/_libovr.pyx":4510
 *         currentInputState)
 * 
 *     return result, currentInputState.TimeInSeconds             # <<<<<<<<<<<<<<
 * 
 * def getButton(int controller, int button, str testState='continuous'):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_currentInputState->TimeInSeconds); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4462
 *     return toReturn
 * 
 * def updateInputState(int controller):             # <<<<<<<<<<<<<<
 *     """Refresh the input state of a controller.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.updateInputState", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4512
 *     return result, currentInputState.TimeInSeconds
 * 
 * def getButton(int controller, int button, str testState='continuous'):             # <<<<<<<<<<<<<<
 *     """Get the state of a specified button for a given controller.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_167getButton(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_166getButton[] = "getButton(int controller, int button, str testState='continuous')\nGet the state of a specified button for a given controller.\n\n    Buttons to test are specified using their string names. Argument\n    'buttonNames' accepts a single string or a list. If a list is specified,\n    the returned value will reflect whether all buttons were triggered at\n    the time the controller was polled last.\n\n    An optional trigger mode may be specified which defines the button's\n    activation criteria. By default, testState='continuous' will return the\n    immediate state of the button. Using 'rising' (and 'pressed') will\n    return True once when the button transitions to being pressed, whereas\n    'falling' (and 'released') will return True once the button is released.\n\n    Parameters\n    ----------\n    controller : int\n        Controller name. Valid values are:\n\n        - :data:`LIBOVR_CONTROLLER_TYPE_XBOX` : XBox gamepad.\n        - :data:`LIBOVR_CONTROLLER_TYPE_REMOTE` : Oculus Remote.\n        - :data:`LIBOVR_CONTROLLER_TYPE_TOUCH` : Combined Touch controllers.\n        - :data:`LIBOVR_CONTROLLER_TYPE_LTOUCH` : Left Touch controller.\n        - :data:`LIBOVR_CONTROLLER_TYPE_RTOUCH` : Right Touch controller.\n\n    button : int\n        Button to check. Values can be ORed together to test for multiple button\n        presses. If a given controller does not have a particular button, False\n        will always be returned. Valid button values are:\n\n        - :data:`LIBOVR_BUTTON_A`\n        - :data:`LIBOVR_BUTTON_B`\n        - :data:`LIBOVR_BUTTON_RTHUMB`\n        - :data:`LIBOVR_BUTTON_RSHOULDER`\n        - :data:`LIBOVR_BUTTON_X`\n        - :data:`LIBOVR_BUTTON_Y`\n        - :data:`LIBOVR_BUTTON_LTHUMB`\n        - :data:`LIBOVR_BUTTON_LSHOULDER`\n        - :data:`LIBOVR_BUTTON_UP`\n        - :data:`LIBOVR_BUTTON_DOWN`\n        - :data:`LIBOVR_BUTTON_LEFT`\n        - :data:`LIBOVR_BUTTON_RIGHT`\n        - :data:`LIBOVR_BUTTON_ENTER`\n        - :data:`LIBOVR_""BUTTON_BACK`\n        - :data:`LIBOVR_BUTTON_VOLUP`\n        - :data:`LIBOVR_BUTTON_VOLDOWN`\n        - :data:`LIBOVR_BUTTON_HOME`\n        - :data:`LIBOVR_BUTTON_PRIVATE`\n        - :data:`LIBOVR_BUTTON_RMASK`\n        - :data:`LIBOVR_BUTTON_LMASK`\n\n    testState : str\n        State to test buttons for. Valid states are 'rising', 'falling',\n        'continuous', 'pressed', and 'released'.\n\n    Returns\n    -------\n    tuple of bool and float\n        Result of the button press and the time in seconds it was polled.\n\n    Examples\n    --------\n    Check if the 'X' button on the touch controllers was pressed::\n\n        isPressed = libovr.getButtons(libovr.LIBOVR_CONTROLLER_TYPE_TOUCH,\n            libovr.LIBOVR_BUTTON_X, 'pressed')\n\n    Test for multiple buttons ('X' and 'Y') released::\n\n        buttons = libovr.LIBOVR_BUTTON_X | libovr.LIBOVR_BUTTON_Y\n        controller = libovr.LIBOVR_CONTROLLER_TYPE_TOUCH\n        isReleased = libovr.getButtons(controller, buttons, 'released')\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_167getButton = {"getButton", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_167getButton, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_166getButton};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_167getButton(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_controller;
  int __pyx_v_button;
  PyObject *__pyx_v_testState = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getButton (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_controller,&__pyx_n_s_button,&__pyx_n_s_testState,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject*)__pyx_n_s_continuous);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_controller)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_button)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getButton", 0, 2, 3, 1); __PYX_ERR(0, 4512, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_testState);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getButton") < 0)) __PYX_ERR(0, 4512, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_controller = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_controller == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4512, __pyx_L3_error)
    __pyx_v_button = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_button == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4512, __pyx_L3_error)
    __pyx_v_testState = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getButton", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4512, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getButton", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_testState), (&PyString_Type), 1, "testState", 1))) __PYX_ERR(0, 4512, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_166getButton(__pyx_self, __pyx_v_controller, __pyx_v_button, __pyx_v_testState);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_166getButton(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_controller, int __pyx_v_button, PyObject *__pyx_v_testState) {
  int __pyx_v_idx;
  double __pyx_v_t_sec;
  unsigned int __pyx_v_curButtons;
  unsigned int __pyx_v_prvButtons;
  int __pyx_v_stateResult;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  double __pyx_t_5;
  unsigned int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("getButton", 0);

  /* "psychxr/libovr/_libovr.pyx":4591
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4592
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 */
    __pyx_v_idx = 0;

    /* "psychxr/libovr/_libovr.pyx":4591
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4593
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4594
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 */
    __pyx_v_idx = 1;

    /* "psychxr/libovr/_libovr.pyx":4593
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4595
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4596
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 */
    __pyx_v_idx = 2;

    /* "psychxr/libovr/_libovr.pyx":4595
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4597
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4598
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4
 */
    __pyx_v_idx = 3;

    /* "psychxr/libovr/_libovr.pyx":4597
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4599
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4599, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(__pyx_t_4)) {

    /* "psychxr/libovr/_libovr.pyx":4600
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Invalid controller type specified.")
 */
    __pyx_v_idx = 4;

    /* "psychxr/libovr/_libovr.pyx":4599
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4602
 *         idx = 4
 *     else:
 *         raise ValueError("Invalid controller type specified.")             # <<<<<<<<<<<<<<
 * 
 *     # get the time the controller was polled
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 4602, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":4605
 * 
 *     # get the time the controller was polled
 *     cdef double t_sec = _inputStates[idx].TimeInSeconds             # <<<<<<<<<<<<<<
 * 
 *     # pointer to the current and previous input state
 */
  __pyx_t_5 = (__pyx_v_7psychxr_6libovr_7_libovr__inputStates[__pyx_v_idx]).TimeInSeconds;
  __pyx_v_t_sec = __pyx_t_5;

  /* "psychxr/libovr/_libovr.pyx":4608
 * 
 *     # pointer to the current and previous input state
 *     cdef unsigned int curButtons = _inputStates[idx].Buttons             # <<<<<<<<<<<<<<
 *     cdef unsigned int prvButtons = _prevInputState[idx].Buttons
 * 
 */
  __pyx_t_6 = (__pyx_v_7psychxr_6libovr_7_libovr__inputStates[__pyx_v_idx]).Buttons;
  __pyx_v_curButtons = __pyx_t_6;

  /* "psychxr/libovr/_libovr.pyx":4609
 *     # pointer to the current and previous input state
 *     cdef unsigned int curButtons = _inputStates[idx].Buttons
 *     cdef unsigned int prvButtons = _prevInputState[idx].Buttons             # <<<<<<<<<<<<<<
 * 
 *     # test if the button was pressed
 */
  __pyx_t_6 = (__pyx_v_7psychxr_6libovr_7_libovr__prevInputState[__pyx_v_idx]).Buttons;
  __pyx_v_prvButtons = __pyx_t_6;

  /* "psychxr/libovr/_libovr.pyx":4612
 * 
 *     # test if the button was pressed
 *     cdef bint stateResult = False             # <<<<<<<<<<<<<<
 *     if testState == 'continuous':
 *         stateResult = (curButtons & button) == button
 */
  __pyx_v_stateResult = 0;

  /* "psychxr/libovr/_libovr.pyx":4613
 *     # test if the button was pressed
 *     cdef bint stateResult = False
 *     if testState == 'continuous':             # <<<<<<<<<<<<<<
 *         stateResult = (curButtons & button) == button
 *     elif testState == 'rising' or testState == 'pressed':
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_testState, __pyx_n_s_continuous, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4613, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_4 != 0);
  if (__pyx_t_7) {

    /* "psychxr/libovr/_libovr.pyx":4614
 *     cdef bint stateResult = False
 *     if testState == 'continuous':
 *         stateResult = (curButtons & button) == button             # <<<<<<<<<<<<<<
 *     elif testState == 'rising' or testState == 'pressed':
 *         # rising edge, will trigger once when pressed
 */
    __pyx_v_stateResult = ((__pyx_v_curButtons & __pyx_v_button) == __pyx_v_button);

    /* "psychxr/libovr/_libovr.pyx":4613
 *     # test if the button was pressed
 *     cdef bint stateResult = False
 *     if testState == 'continuous':             # <<<<<<<<<<<<<<
 *         stateResult = (curButtons & button) == button
 *     elif testState == 'rising' or testState == 'pressed':
 */
    goto __pyx_L4;
  }

  /* "psychxr/libovr/_libovr.pyx":4615
 *     if testState == 'continuous':
 *         stateResult = (curButtons & button) == button
 *     elif testState == 'rising' or testState == 'pressed':             # <<<<<<<<<<<<<<
 *         # rising edge, will trigger once when pressed
 *         stateResult = (curButtons & button) == button and \
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_testState, __pyx_n_s_rising, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4615, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_4 != 0);
  if (!__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_testState, __pyx_n_s_pressed, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 4615, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_8 != 0);
  __pyx_t_7 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_7) {

    /* "psychxr/libovr/_libovr.pyx":4617
 *     elif testState == 'rising' or testState == 'pressed':
 *         # rising edge, will trigger once when pressed
 *         stateResult = (curButtons & button) == button and \             # <<<<<<<<<<<<<<
 *                       (prvButtons & button) != button
 *     elif testState == 'falling' or testState == 'released':
 */
    __pyx_t_4 = (((__pyx_v_curButtons & __pyx_v_button) == __pyx_v_button) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_7 = __pyx_t_4;
      goto __pyx_L7_bool_binop_done;
    }

    /* "psychxr/libovr/_libovr.pyx":4618
 *         # rising edge, will trigger once when pressed
 *         stateResult = (curButtons & button) == button and \
 *                       (prvButtons & button) != button             # <<<<<<<<<<<<<<
 *     elif testState == 'falling' or testState == 'released':
 *         # falling edge, will trigger once when released
 */
    __pyx_t_4 = (((__pyx_v_prvButtons & __pyx_v_button) != __pyx_v_button) != 0);
    __pyx_t_7 = __pyx_t_4;
    __pyx_L7_bool_binop_done:;
    __pyx_v_stateResult = __pyx_t_7;

    /* "psychxr/libovr/_libovr.pyx":4615
 *     if testState == 'continuous':
 *         stateResult = (curButtons & button) == button
 *     elif testState == 'rising' or testState == 'pressed':             # <<<<<<<<<<<<<<
 *         # rising edge, will trigger once when pressed
 *         stateResult = (curButtons & button) == button and \
 */
    goto __pyx_L4;
  }

  /* "psychxr/libovr/_libovr.pyx":4619
 *         stateResult = (curButtons & button) == button and \
 *                       (prvButtons & button) != button
 *     elif testState == 'falling' or testState == 'released':             # <<<<<<<<<<<<<<
 *         # falling edge, will trigger once when released
 *         stateResult = (curButtons & button) != button and \
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_testState, __pyx_n_s_falling, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4619, __pyx_L1_error)
  __pyx_t_8 = (__pyx_t_4 != 0);
  if (!__pyx_t_8) {
  } else {
    __pyx_t_7 = __pyx_t_8;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_8 = (__Pyx_PyString_Equals(__pyx_v_testState, __pyx_n_s_released, Py_EQ)); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 4619, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_8 != 0);
  __pyx_t_7 = __pyx_t_4;
  __pyx_L9_bool_binop_done:;
  if (likely(__pyx_t_7)) {

    /* "psychxr/libovr/_libovr.pyx":4621
 *     elif testState == 'falling' or testState == 'released':
 *         # falling edge, will trigger once when released
 *         stateResult = (curButtons & button) != button and \             # <<<<<<<<<<<<<<
 *                       (prvButtons & button) == button
 *     else:
 */
    __pyx_t_4 = (((__pyx_v_curButtons & __pyx_v_button) != __pyx_v_button) != 0);
    if (__pyx_t_4) {
    } else {
      __pyx_t_7 = __pyx_t_4;
      goto __pyx_L11_bool_binop_done;
    }

    /* "psychxr/libovr/_libovr.pyx":4622
 *         # falling edge, will trigger once when released
 *         stateResult = (curButtons & button) != button and \
 *                       (prvButtons & button) == button             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Invalid trigger mode specified.")
 */
    __pyx_t_4 = (((__pyx_v_prvButtons & __pyx_v_button) == __pyx_v_button) != 0);
    __pyx_t_7 = __pyx_t_4;
    __pyx_L11_bool_binop_done:;
    __pyx_v_stateResult = __pyx_t_7;

    /* "psychxr/libovr/_libovr.pyx":4619
 *         stateResult = (curButtons & button) == button and \
 *                       (prvButtons & button) != button
 *     elif testState == 'falling' or testState == 'released':             # <<<<<<<<<<<<<<
 *         # falling edge, will trigger once when released
 *         stateResult = (curButtons & button) != button and \
 */
    goto __pyx_L4;
  }

  /* "psychxr/libovr/_libovr.pyx":4624
 *                       (prvButtons & button) == button
 *     else:
 *         raise ValueError("Invalid trigger mode specified.")             # <<<<<<<<<<<<<<
 * 
 *     return stateResult, t_sec
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 4624, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "psychxr/libovr/_libovr.pyx":4626
 *         raise ValueError("Invalid trigger mode specified.")
 * 
 *     return stateResult, t_sec             # <<<<<<<<<<<<<<
 * 
 * def getTouch(str controller, object touch, str testState='continuous'):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_v_stateResult); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_t_sec); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4512
 *     return result, currentInputState.TimeInSeconds
 * 
 * def getButton(int controller, int button, str testState='continuous'):             # <<<<<<<<<<<<<<
 *     """Get the state of a specified button for a given controller.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getButton", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4628
 *     return stateResult, t_sec
 * 
 * def getTouch(str controller, object touch, str testState='continuous'):             # <<<<<<<<<<<<<<
 *     """Get touches for a specified device.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_169getTouch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_168getTouch[] = "getTouch(str controller, touch, str testState='continuous')\nGet touches for a specified device.\n\n    Touches reveal information about the user's hand pose, for instance,\n    whether a pointing or pinching gesture is being made. Oculus Touch\n    controllers are required for this functionality.\n\n    Touch points to test are specified using their string names. Argument\n    'touch_names' accepts a single string or a list. If a list is specified,\n    the returned value will reflect whether all touches were triggered at\n    the time the controller was polled last.\n\n    Parameters\n    ----------\n    controller : int\n        Controller name. Valid values are:\n\n        - :data:`LIBOVR_CONTROLLER_TYPE_XBOX` : XBox gamepad.\n        - :data:`LIBOVR_CONTROLLER_TYPE_REMOTE` : Oculus Remote.\n        - :data:`LIBOVR_CONTROLLER_TYPE_TOUCH` : Combined Touch controllers.\n        - :data:`LIBOVR_CONTROLLER_TYPE_LTOUCH` : Left Touch controller.\n        - :data:`LIBOVR_CONTROLLER_TYPE_RTOUCH` : Right Touch controller.\n\n    button : int\n        Button to check. Values can be ORed together to test for multiple\n        touches. If a given controller does not have a particular button, False\n        will always be returned. Valid button values are:\n\n        - :data:`LIBOVR_TOUCH_A`\n        - :data:`LIBOVR_TOUCH_B`\n        - :data:`LIBOVR_TOUCH_RTHUMB`\n        - :data:`LIBOVR_TOUCH_RSHOULDER`\n        - :data:`LIBOVR_TOUCH_X`\n        - :data:`LIBOVR_TOUCH_Y`\n        - :data:`LIBOVR_TOUCH_LTHUMB`\n        - :data:`LIBOVR_TOUCH_LSHOULDER`\n        - :data:`LIBOVR_TOUCH_LINDEXTRIGGER`\n        - :data:`LIBOVR_TOUCH_LINDEXTRIGGER`\n        - :data:`LIBOVR_TOUCH_RINDEXPOINTING`\n        - :data:`LIBOVR_TOUCH_RTHUMBUP`\n        - :data:`LIBOVR_TOUCH_LINDEXPOINTING`\n        - :data:`LIBOVR_TOUCH_LTHUMBUP`\n\n    testState : str\n        State to test touches for. Valid states are 'rising', 'falling',\n        'continuous', 'pressed', and 'released'.\n\n    Returns""\n    -------\n    tuple of bool and float\n        Result of the touches and the time in seconds it was polled.\n\n    Notes\n    -----\n    Not every controller type supports touch.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_169getTouch = {"getTouch", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_169getTouch, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_168getTouch};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_169getTouch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_controller = 0;
  PyObject *__pyx_v_touch = 0;
  PyObject *__pyx_v_testState = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getTouch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_controller,&__pyx_n_s_touch,&__pyx_n_s_testState,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject*)__pyx_n_s_continuous);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_controller)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_touch)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("getTouch", 0, 2, 3, 1); __PYX_ERR(0, 4628, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_testState);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getTouch") < 0)) __PYX_ERR(0, 4628, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_controller = ((PyObject*)values[0]);
    __pyx_v_touch = values[1];
    __pyx_v_testState = ((PyObject*)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getTouch", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4628, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTouch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_controller), (&PyString_Type), 1, "controller", 1))) __PYX_ERR(0, 4628, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_testState), (&PyString_Type), 1, "testState", 1))) __PYX_ERR(0, 4628, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_168getTouch(__pyx_self, __pyx_v_controller, __pyx_v_touch, __pyx_v_testState);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_168getTouch(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_controller, PyObject *__pyx_v_touch, PyObject *__pyx_v_testState) {
  int __pyx_v_idx;
  double __pyx_v_t_sec;
  unsigned int __pyx_v_curTouches;
  unsigned int __pyx_v_prvTouches;
  int __pyx_v_stateResult;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  double __pyx_t_3;
  unsigned int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("getTouch", 0);

  /* "psychxr/libovr/_libovr.pyx":4690
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_controller, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4690, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4691
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 */
    __pyx_v_idx = 0;

    /* "psychxr/libovr/_libovr.pyx":4690
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4692
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_controller, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4692, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4693
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 */
    __pyx_v_idx = 1;

    /* "psychxr/libovr/_libovr.pyx":4692
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4694
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_controller, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4694, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4695
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 */
    __pyx_v_idx = 2;

    /* "psychxr/libovr/_libovr.pyx":4694
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4696
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_controller, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4696, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4697
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4
 */
    __pyx_v_idx = 3;

    /* "psychxr/libovr/_libovr.pyx":4696
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4698
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_controller, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "psychxr/libovr/_libovr.pyx":4699
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Invalid controller type specified.")
 */
    __pyx_v_idx = 4;

    /* "psychxr/libovr/_libovr.pyx":4698
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4701
 *         idx = 4
 *     else:
 *         raise ValueError("Invalid controller type specified.")             # <<<<<<<<<<<<<<
 * 
 *     # get the time the controller was polled
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4701, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 4701, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":4704
 * 
 *     # get the time the controller was polled
 *     cdef double t_sec = _inputStates[idx].TimeInSeconds             # <<<<<<<<<<<<<<
 * 
 *     # pointer to the current and previous input state
 */
  __pyx_t_3 = (__pyx_v_7psychxr_6libovr_7_libovr__inputStates[__pyx_v_idx]).TimeInSeconds;
  __pyx_v_t_sec = __pyx_t_3;

  /* "psychxr/libovr/_libovr.pyx":4707
 * 
 *     # pointer to the current and previous input state
 *     cdef unsigned int curTouches = _inputStates[idx].Touches             # <<<<<<<<<<<<<<
 *     cdef unsigned int prvTouches = _prevInputState[idx].Touches
 * 
 */
  __pyx_t_4 = (__pyx_v_7psychxr_6libovr_7_libovr__inputStates[__pyx_v_idx]).Touches;
  __pyx_v_curTouches = __pyx_t_4;

  /* "psychxr/libovr/_libovr.pyx":4708
 *     # pointer to the current and previous input state
 *     cdef unsigned int curTouches = _inputStates[idx].Touches
 *     cdef unsigned int prvTouches = _prevInputState[idx].Touches             # <<<<<<<<<<<<<<
 * 
 *     # test if the button was pressed
 */
  __pyx_t_4 = (__pyx_v_7psychxr_6libovr_7_libovr__prevInputState[__pyx_v_idx]).Touches;
  __pyx_v_prvTouches = __pyx_t_4;

  /* "psychxr/libovr/_libovr.pyx":4711
 * 
 *     # test if the button was pressed
 *     cdef bint stateResult = False             # <<<<<<<<<<<<<<
 *     if testState == 'continuous':
 *         stateResult = (curTouches & touch) == touch
 */
  __pyx_v_stateResult = 0;

  /* "psychxr/libovr/_libovr.pyx":4712
 *     # test if the button was pressed
 *     cdef bint stateResult = False
 *     if testState == 'continuous':             # <<<<<<<<<<<<<<
 *         stateResult = (curTouches & touch) == touch
 *     elif testState == 'rising' or testState == 'pressed':
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_testState, __pyx_n_s_continuous, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4712, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_2 != 0);
  if (__pyx_t_5) {

    /* "psychxr/libovr/_libovr.pyx":4713
 *     cdef bint stateResult = False
 *     if testState == 'continuous':
 *         stateResult = (curTouches & touch) == touch             # <<<<<<<<<<<<<<
 *     elif testState == 'rising' or testState == 'pressed':
 *         # rising edge, will trigger once when pressed
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_curTouches); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyNumber_And(__pyx_t_1, __pyx_v_touch); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4713, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_v_touch, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4713, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4713, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_stateResult = __pyx_t_5;

    /* "psychxr/libovr/_libovr.pyx":4712
 *     # test if the button was pressed
 *     cdef bint stateResult = False
 *     if testState == 'continuous':             # <<<<<<<<<<<<<<
 *         stateResult = (curTouches & touch) == touch
 *     elif testState == 'rising' or testState == 'pressed':
 */
    goto __pyx_L4;
  }

  /* "psychxr/libovr/_libovr.pyx":4714
 *     if testState == 'continuous':
 *         stateResult = (curTouches & touch) == touch
 *     elif testState == 'rising' or testState == 'pressed':             # <<<<<<<<<<<<<<
 *         # rising edge, will trigger once when pressed
 *         stateResult = (curTouches & touch) == touch and \
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_testState, __pyx_n_s_rising, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4714, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_testState, __pyx_n_s_pressed, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 4714, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_5) {

    /* "psychxr/libovr/_libovr.pyx":4716
 *     elif testState == 'rising' or testState == 'pressed':
 *         # rising edge, will trigger once when pressed
 *         stateResult = (curTouches & touch) == touch and \             # <<<<<<<<<<<<<<
 *                       (prvTouches & touch) != touch
 *     elif testState == 'falling' or testState == 'released':
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_curTouches); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyNumber_And(__pyx_t_1, __pyx_v_touch); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_v_touch, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4716, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4716, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {
    } else {
      __pyx_t_5 = __pyx_t_2;
      goto __pyx_L7_bool_binop_done;
    }

    /* "psychxr/libovr/_libovr.pyx":4717
 *         # rising edge, will trigger once when pressed
 *         stateResult = (curTouches & touch) == touch and \
 *                       (prvTouches & touch) != touch             # <<<<<<<<<<<<<<
 *     elif testState == 'falling' or testState == 'released':
 *         # falling edge, will trigger once when released
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_prvTouches); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyNumber_And(__pyx_t_1, __pyx_v_touch); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4717, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_v_touch, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4717, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4717, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __pyx_t_2;
    __pyx_L7_bool_binop_done:;
    __pyx_v_stateResult = __pyx_t_5;

    /* "psychxr/libovr/_libovr.pyx":4714
 *     if testState == 'continuous':
 *         stateResult = (curTouches & touch) == touch
 *     elif testState == 'rising' or testState == 'pressed':             # <<<<<<<<<<<<<<
 *         # rising edge, will trigger once when pressed
 *         stateResult = (curTouches & touch) == touch and \
 */
    goto __pyx_L4;
  }

  /* "psychxr/libovr/_libovr.pyx":4718
 *         stateResult = (curTouches & touch) == touch and \
 *                       (prvTouches & touch) != touch
 *     elif testState == 'falling' or testState == 'released':             # <<<<<<<<<<<<<<
 *         # falling edge, will trigger once when released
 *         stateResult = (curTouches & touch) != touch and \
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_testState, __pyx_n_s_falling, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4718, __pyx_L1_error)
  __pyx_t_7 = (__pyx_t_2 != 0);
  if (!__pyx_t_7) {
  } else {
    __pyx_t_5 = __pyx_t_7;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_7 = (__Pyx_PyString_Equals(__pyx_v_testState, __pyx_n_s_released, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 4718, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_7 != 0);
  __pyx_t_5 = __pyx_t_2;
  __pyx_L9_bool_binop_done:;
  if (likely(__pyx_t_5)) {

    /* "psychxr/libovr/_libovr.pyx":4720
 *     elif testState == 'falling' or testState == 'released':
 *         # falling edge, will trigger once when released
 *         stateResult = (curTouches & touch) != touch and \             # <<<<<<<<<<<<<<
 *                       (prvTouches & touch) == touch
 *     else:
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_curTouches); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyNumber_And(__pyx_t_1, __pyx_v_touch); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4720, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_v_touch, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4720, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4720, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {
    } else {
      __pyx_t_5 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }

    /* "psychxr/libovr/_libovr.pyx":4721
 *         # falling edge, will trigger once when released
 *         stateResult = (curTouches & touch) != touch and \
 *                       (prvTouches & touch) == touch             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Invalid trigger mode specified.")
 */
    __pyx_t_1 = __Pyx_PyInt_From_unsigned_int(__pyx_v_prvTouches); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4721, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyNumber_And(__pyx_t_1, __pyx_v_touch); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4721, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_v_touch, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4721, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4721, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_stateResult = __pyx_t_5;

    /* "psychxr/libovr/_libovr.pyx":4718
 *         stateResult = (curTouches & touch) == touch and \
 *                       (prvTouches & touch) != touch
 *     elif testState == 'falling' or testState == 'released':             # <<<<<<<<<<<<<<
 *         # falling edge, will trigger once when released
 *         stateResult = (curTouches & touch) != touch and \
 */
    goto __pyx_L4;
  }

  /* "psychxr/libovr/_libovr.pyx":4723
 *                       (prvTouches & touch) == touch
 *     else:
 *         raise ValueError("Invalid trigger mode specified.")             # <<<<<<<<<<<<<<
 * 
 *     return stateResult, t_sec
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 4723, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "psychxr/libovr/_libovr.pyx":4725
 *         raise ValueError("Invalid trigger mode specified.")
 * 
 *     return stateResult, t_sec             # <<<<<<<<<<<<<<
 * 
 * def getThumbstickValues(int controller, bint deadzone=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_stateResult); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_t_sec); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4628
 *     return stateResult, t_sec
 * 
 * def getTouch(str controller, object touch, str testState='continuous'):             # <<<<<<<<<<<<<<
 *     """Get touches for a specified device.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getTouch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4727
 *     return stateResult, t_sec
 * 
 * def getThumbstickValues(int controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get analog thumbstick values.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_171getThumbstickValues(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_170getThumbstickValues[] = "getThumbstickValues(int controller, bool deadzone=False)\nGet analog thumbstick values.\n\n    Get the values indicating the displacement of the controller's analog\n    thumbsticks. Returns two tuples for the up-down and left-right of each\n    stick. Values range from -1 to 1.\n\n    Parameters\n    ----------\n    controller : int\n        Controller name. Valid values are:\n\n        - :data:`LIBOVR_CONTROLLER_TYPE_XBOX` : XBox gamepad.\n        - :data:`LIBOVR_CONTROLLER_TYPE_REMOTE` : Oculus Remote.\n        - :data:`LIBOVR_CONTROLLER_TYPE_TOUCH` : Combined Touch controllers.\n        - :data:`LIBOVR_CONTROLLER_TYPE_LTOUCH` : Left Touch controller.\n        - :data:`LIBOVR_CONTROLLER_TYPE_RTOUCH` : Right Touch controller.\n\n    deadzone : bool\n        Apply a deadzone if True.\n\n    Returns\n    -------\n    tuple\n        Thumbstick values.\n\n    Examples\n    --------\n    Get the thumbstick values with deadzone for the touch controllers::\n\n        ovr.updateInputState()  # get most recent input state\n        leftThumbStick, rightThumbStick = ovr.getThumbstickValues(\n            ovr.LIBOVR_CONTROLLER_TYPE_TOUCH, deadzone=True)\n        x, y = rightThumbStick  # left-right, up-down values for right stick\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_171getThumbstickValues = {"getThumbstickValues", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_171getThumbstickValues, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_170getThumbstickValues};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_171getThumbstickValues(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_controller;
  int __pyx_v_deadzone;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getThumbstickValues (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_controller,&__pyx_n_s_deadzone,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_controller)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_deadzone);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getThumbstickValues") < 0)) __PYX_ERR(0, 4727, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_controller = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_controller == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4727, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_deadzone = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_deadzone == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4727, __pyx_L3_error)
    } else {
      __pyx_v_deadzone = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getThumbstickValues", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4727, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getThumbstickValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_170getThumbstickValues(__pyx_self, __pyx_v_controller, __pyx_v_deadzone);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_170getThumbstickValues(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_controller, int __pyx_v_deadzone) {
  int __pyx_v_idx;
  ovrInputState *__pyx_v_currentInputState;
  float __pyx_v_thumbstick_x0;
  float __pyx_v_thumbstick_y0;
  float __pyx_v_thumbstick_x1;
  float __pyx_v_thumbstick_y1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  float __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("getThumbstickValues", 0);

  /* "psychxr/libovr/_libovr.pyx":4767
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4768
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 */
    __pyx_v_idx = 0;

    /* "psychxr/libovr/_libovr.pyx":4767
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4769
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4769, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4769, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4770
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 */
    __pyx_v_idx = 1;

    /* "psychxr/libovr/_libovr.pyx":4769
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4771
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4771, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4771, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4772
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 */
    __pyx_v_idx = 2;

    /* "psychxr/libovr/_libovr.pyx":4771
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4773
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4774
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4
 */
    __pyx_v_idx = 3;

    /* "psychxr/libovr/_libovr.pyx":4773
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4775
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4775, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4775, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(__pyx_t_4)) {

    /* "psychxr/libovr/_libovr.pyx":4776
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Invalid controller type specified.")
 */
    __pyx_v_idx = 4;

    /* "psychxr/libovr/_libovr.pyx":4775
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4778
 *         idx = 4
 *     else:
 *         raise ValueError("Invalid controller type specified.")             # <<<<<<<<<<<<<<
 * 
 *     # pointer to the current and previous input state
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 4778, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":4781
 * 
 *     # pointer to the current and previous input state
 *     cdef libovr_capi.ovrInputState* currentInputState = &_inputStates[idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef float thumbstick_x0 = 0.0
 */
  __pyx_v_currentInputState = (&(__pyx_v_7psychxr_6libovr_7_libovr__inputStates[__pyx_v_idx]));

  /* "psychxr/libovr/_libovr.pyx":4783
 *     cdef libovr_capi.ovrInputState* currentInputState = &_inputStates[idx]
 * 
 *     cdef float thumbstick_x0 = 0.0             # <<<<<<<<<<<<<<
 *     cdef float thumbstick_y0 = 0.0
 *     cdef float thumbstick_x1 = 0.0
 */
  __pyx_v_thumbstick_x0 = 0.0;

  /* "psychxr/libovr/_libovr.pyx":4784
 * 
 *     cdef float thumbstick_x0 = 0.0
 *     cdef float thumbstick_y0 = 0.0             # <<<<<<<<<<<<<<
 *     cdef float thumbstick_x1 = 0.0
 *     cdef float thumbstick_y1 = 0.0
 */
  __pyx_v_thumbstick_y0 = 0.0;

  /* "psychxr/libovr/_libovr.pyx":4785
 *     cdef float thumbstick_x0 = 0.0
 *     cdef float thumbstick_y0 = 0.0
 *     cdef float thumbstick_x1 = 0.0             # <<<<<<<<<<<<<<
 *     cdef float thumbstick_y1 = 0.0
 * 
 */
  __pyx_v_thumbstick_x1 = 0.0;

  /* "psychxr/libovr/_libovr.pyx":4786
 *     cdef float thumbstick_y0 = 0.0
 *     cdef float thumbstick_x1 = 0.0
 *     cdef float thumbstick_y1 = 0.0             # <<<<<<<<<<<<<<
 * 
 *     if deadzone:
 */
  __pyx_v_thumbstick_y1 = 0.0;

  /* "psychxr/libovr/_libovr.pyx":4788
 *     cdef float thumbstick_y1 = 0.0
 * 
 *     if deadzone:             # <<<<<<<<<<<<<<
 *         thumbstick_x0 = currentInputState[0].Thumbstick[0].x
 *         thumbstick_y0 = currentInputState[0].Thumbstick[0].y
 */
  __pyx_t_4 = (__pyx_v_deadzone != 0);
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4789
 * 
 *     if deadzone:
 *         thumbstick_x0 = currentInputState[0].Thumbstick[0].x             # <<<<<<<<<<<<<<
 *         thumbstick_y0 = currentInputState[0].Thumbstick[0].y
 *         thumbstick_x1 = currentInputState[0].Thumbstick[1].x
 */
    __pyx_t_5 = ((__pyx_v_currentInputState[0]).Thumbstick[0]).x;
    __pyx_v_thumbstick_x0 = __pyx_t_5;

    /* "psychxr/libovr/_libovr.pyx":4790
 *     if deadzone:
 *         thumbstick_x0 = currentInputState[0].Thumbstick[0].x
 *         thumbstick_y0 = currentInputState[0].Thumbstick[0].y             # <<<<<<<<<<<<<<
 *         thumbstick_x1 = currentInputState[0].Thumbstick[1].x
 *         thumbstick_y1 = currentInputState[0].Thumbstick[1].y
 */
    __pyx_t_5 = ((__pyx_v_currentInputState[0]).Thumbstick[0]).y;
    __pyx_v_thumbstick_y0 = __pyx_t_5;

    /* "psychxr/libovr/_libovr.pyx":4791
 *         thumbstick_x0 = currentInputState[0].Thumbstick[0].x
 *         thumbstick_y0 = currentInputState[0].Thumbstick[0].y
 *         thumbstick_x1 = currentInputState[0].Thumbstick[1].x             # <<<<<<<<<<<<<<
 *         thumbstick_y1 = currentInputState[0].Thumbstick[1].y
 *     else:
 */
    __pyx_t_5 = ((__pyx_v_currentInputState[0]).Thumbstick[1]).x;
    __pyx_v_thumbstick_x1 = __pyx_t_5;

    /* "psychxr/libovr/_libovr.pyx":4792
 *         thumbstick_y0 = currentInputState[0].Thumbstick[0].y
 *         thumbstick_x1 = currentInputState[0].Thumbstick[1].x
 *         thumbstick_y1 = currentInputState[0].Thumbstick[1].y             # <<<<<<<<<<<<<<
 *     else:
 *         thumbstick_x0 = currentInputState[0].ThumbstickNoDeadzone[0].x
 */
    __pyx_t_5 = ((__pyx_v_currentInputState[0]).Thumbstick[1]).y;
    __pyx_v_thumbstick_y1 = __pyx_t_5;

    /* "psychxr/libovr/_libovr.pyx":4788
 *     cdef float thumbstick_y1 = 0.0
 * 
 *     if deadzone:             # <<<<<<<<<<<<<<
 *         thumbstick_x0 = currentInputState[0].Thumbstick[0].x
 *         thumbstick_y0 = currentInputState[0].Thumbstick[0].y
 */
    goto __pyx_L4;
  }

  /* "psychxr/libovr/_libovr.pyx":4794
 *         thumbstick_y1 = currentInputState[0].Thumbstick[1].y
 *     else:
 *         thumbstick_x0 = currentInputState[0].ThumbstickNoDeadzone[0].x             # <<<<<<<<<<<<<<
 *         thumbstick_y0 = currentInputState[0].ThumbstickNoDeadzone[0].y
 *         thumbstick_x1 = currentInputState[0].ThumbstickNoDeadzone[1].x
 */
  /*else*/ {
    __pyx_t_5 = ((__pyx_v_currentInputState[0]).ThumbstickNoDeadzone[0]).x;
    __pyx_v_thumbstick_x0 = __pyx_t_5;

    /* "psychxr/libovr/_libovr.pyx":4795
 *     else:
 *         thumbstick_x0 = currentInputState[0].ThumbstickNoDeadzone[0].x
 *         thumbstick_y0 = currentInputState[0].ThumbstickNoDeadzone[0].y             # <<<<<<<<<<<<<<
 *         thumbstick_x1 = currentInputState[0].ThumbstickNoDeadzone[1].x
 *         thumbstick_y1 = currentInputState[0].ThumbstickNoDeadzone[1].y
 */
    __pyx_t_5 = ((__pyx_v_currentInputState[0]).ThumbstickNoDeadzone[0]).y;
    __pyx_v_thumbstick_y0 = __pyx_t_5;

    /* "psychxr/libovr/_libovr.pyx":4796
 *         thumbstick_x0 = currentInputState[0].ThumbstickNoDeadzone[0].x
 *         thumbstick_y0 = currentInputState[0].ThumbstickNoDeadzone[0].y
 *         thumbstick_x1 = currentInputState[0].ThumbstickNoDeadzone[1].x             # <<<<<<<<<<<<<<
 *         thumbstick_y1 = currentInputState[0].ThumbstickNoDeadzone[1].y
 * 
 */
    __pyx_t_5 = ((__pyx_v_currentInputState[0]).ThumbstickNoDeadzone[1]).x;
    __pyx_v_thumbstick_x1 = __pyx_t_5;

    /* "psychxr/libovr/_libovr.pyx":4797
 *         thumbstick_y0 = currentInputState[0].ThumbstickNoDeadzone[0].y
 *         thumbstick_x1 = currentInputState[0].ThumbstickNoDeadzone[1].x
 *         thumbstick_y1 = currentInputState[0].ThumbstickNoDeadzone[1].y             # <<<<<<<<<<<<<<
 * 
 *     return np.array((thumbstick_x0, thumbstick_y0), dtype=np.float32), \
 */
    __pyx_t_5 = ((__pyx_v_currentInputState[0]).ThumbstickNoDeadzone[1]).y;
    __pyx_v_thumbstick_y1 = __pyx_t_5;
  }
  __pyx_L4:;

  /* "psychxr/libovr/_libovr.pyx":4799
 *         thumbstick_y1 = currentInputState[0].ThumbstickNoDeadzone[1].y
 * 
 *     return np.array((thumbstick_x0, thumbstick_y0), dtype=np.float32), \             # <<<<<<<<<<<<<<
 *            np.array((thumbstick_x1, thumbstick_y1), dtype=np.float32)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_thumbstick_x0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_thumbstick_y0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "psychxr/libovr/_libovr.pyx":4800
 * 
 *     return np.array((thumbstick_x0, thumbstick_y0), dtype=np.float32), \
 *            np.array((thumbstick_x1, thumbstick_y1), dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 * def getIndexTriggerValues(int controller, bint deadzone=False):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_thumbstick_x1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_thumbstick_y1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_6 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_np); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_float32); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_8) < 0) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 4800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":4799
 *         thumbstick_y1 = currentInputState[0].ThumbstickNoDeadzone[1].y
 * 
 *     return np.array((thumbstick_x0, thumbstick_y0), dtype=np.float32), \             # <<<<<<<<<<<<<<
 *            np.array((thumbstick_x1, thumbstick_y1), dtype=np.float32)
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_8);
  __pyx_t_7 = 0;
  __pyx_t_8 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4727
 *     return stateResult, t_sec
 * 
 * def getThumbstickValues(int controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get analog thumbstick values.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getThumbstickValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4802
 *            np.array((thumbstick_x1, thumbstick_y1), dtype=np.float32)
 * 
 * def getIndexTriggerValues(int controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get analog index trigger values.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_173getIndexTriggerValues(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_172getIndexTriggerValues[] = "getIndexTriggerValues(int controller, bool deadzone=False)\nGet analog index trigger values.\n\n    Get the values indicating the displacement of the controller's analog\n    thumbsticks. Returns two tuples for the up-down and left-right of each\n    stick. Values range from -1 to 1.\n\n    Parameters\n    ----------\n    controller : int\n        Controller name. Valid values are:\n\n        - :data:`LIBOVR_CONTROLLER_TYPE_XBOX` : XBox gamepad.\n        - :data:`LIBOVR_CONTROLLER_TYPE_REMOTE` : Oculus Remote.\n        - :data:`LIBOVR_CONTROLLER_TYPE_TOUCH` : Combined Touch controllers.\n        - :data:`LIBOVR_CONTROLLER_TYPE_LTOUCH` : Left Touch controller.\n        - :data:`LIBOVR_CONTROLLER_TYPE_RTOUCH` : Right Touch controller.\n\n    Returns\n    -------\n    tuple\n        Trigger values.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_173getIndexTriggerValues = {"getIndexTriggerValues", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_173getIndexTriggerValues, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_172getIndexTriggerValues};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_173getIndexTriggerValues(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_controller;
  int __pyx_v_deadzone;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getIndexTriggerValues (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_controller,&__pyx_n_s_deadzone,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_controller)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_deadzone);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getIndexTriggerValues") < 0)) __PYX_ERR(0, 4802, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_controller = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_controller == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4802, __pyx_L3_error)
    if (values[1]) {
      __pyx_v_deadzone = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_deadzone == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4802, __pyx_L3_error)
    } else {
      __pyx_v_deadzone = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getIndexTriggerValues", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4802, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getIndexTriggerValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_172getIndexTriggerValues(__pyx_self, __pyx_v_controller, __pyx_v_deadzone);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_172getIndexTriggerValues(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_controller, int __pyx_v_deadzone) {
  int __pyx_v_idx;
  ovrInputState *__pyx_v_currentInputState;
  float __pyx_v_triggerLeft;
  float __pyx_v_triggerRight;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("getIndexTriggerValues", 0);

  /* "psychxr/libovr/_libovr.pyx":4831
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4831, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4831, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4832
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 */
    __pyx_v_idx = 0;

    /* "psychxr/libovr/_libovr.pyx":4831
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4833
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4833, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4833, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4834
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 */
    __pyx_v_idx = 1;

    /* "psychxr/libovr/_libovr.pyx":4833
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4835
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4835, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4835, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4836
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 */
    __pyx_v_idx = 2;

    /* "psychxr/libovr/_libovr.pyx":4835
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4837
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4837, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4837, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4838
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4
 */
    __pyx_v_idx = 3;

    /* "psychxr/libovr/_libovr.pyx":4837
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4839
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_controller); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(0, 4839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(__pyx_t_4)) {

    /* "psychxr/libovr/_libovr.pyx":4840
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Invalid controller type specified.")
 */
    __pyx_v_idx = 4;

    /* "psychxr/libovr/_libovr.pyx":4839
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4842
 *         idx = 4
 *     else:
 *         raise ValueError("Invalid controller type specified.")             # <<<<<<<<<<<<<<
 * 
 *     # pointer to the current and previous input state
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4842, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 4842, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":4845
 * 
 *     # pointer to the current and previous input state
 *     cdef libovr_capi.ovrInputState* currentInputState = &_inputStates[idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef float triggerLeft = 0.0
 */
  __pyx_v_currentInputState = (&(__pyx_v_7psychxr_6libovr_7_libovr__inputStates[__pyx_v_idx]));

  /* "psychxr/libovr/_libovr.pyx":4847
 *     cdef libovr_capi.ovrInputState* currentInputState = &_inputStates[idx]
 * 
 *     cdef float triggerLeft = 0.0             # <<<<<<<<<<<<<<
 *     cdef float triggerRight = 0.0
 * 
 */
  __pyx_v_triggerLeft = 0.0;

  /* "psychxr/libovr/_libovr.pyx":4848
 * 
 *     cdef float triggerLeft = 0.0
 *     cdef float triggerRight = 0.0             # <<<<<<<<<<<<<<
 * 
 *     if deadzone:
 */
  __pyx_v_triggerRight = 0.0;

  /* "psychxr/libovr/_libovr.pyx":4850
 *     cdef float triggerRight = 0.0
 * 
 *     if deadzone:             # <<<<<<<<<<<<<<
 *         triggerLeft = currentInputState[0].IndexTrigger[0]
 *         triggerRight = currentInputState[0].IndexTrigger[1]
 */
  __pyx_t_4 = (__pyx_v_deadzone != 0);
  if (__pyx_t_4) {

    /* "psychxr/libovr/_libovr.pyx":4851
 * 
 *     if deadzone:
 *         triggerLeft = currentInputState[0].IndexTrigger[0]             # <<<<<<<<<<<<<<
 *         triggerRight = currentInputState[0].IndexTrigger[1]
 *     else:
 */
    __pyx_v_triggerLeft = ((__pyx_v_currentInputState[0]).IndexTrigger[0]);

    /* "psychxr/libovr/_libovr.pyx":4852
 *     if deadzone:
 *         triggerLeft = currentInputState[0].IndexTrigger[0]
 *         triggerRight = currentInputState[0].IndexTrigger[1]             # <<<<<<<<<<<<<<
 *     else:
 *         triggerLeft = currentInputState[0].IndexTriggerNoDeadzone[0]
 */
    __pyx_v_triggerRight = ((__pyx_v_currentInputState[0]).IndexTrigger[1]);

    /* "psychxr/libovr/_libovr.pyx":4850
 *     cdef float triggerRight = 0.0
 * 
 *     if deadzone:             # <<<<<<<<<<<<<<
 *         triggerLeft = currentInputState[0].IndexTrigger[0]
 *         triggerRight = currentInputState[0].IndexTrigger[1]
 */
    goto __pyx_L4;
  }

  /* "psychxr/libovr/_libovr.pyx":4854
 *         triggerRight = currentInputState[0].IndexTrigger[1]
 *     else:
 *         triggerLeft = currentInputState[0].IndexTriggerNoDeadzone[0]             # <<<<<<<<<<<<<<
 *         triggerRight = currentInputState[0].IndexTriggerNoDeadzone[1]
 * 
 */
  /*else*/ {
    __pyx_v_triggerLeft = ((__pyx_v_currentInputState[0]).IndexTriggerNoDeadzone[0]);

    /* "psychxr/libovr/_libovr.pyx":4855
 *     else:
 *         triggerLeft = currentInputState[0].IndexTriggerNoDeadzone[0]
 *         triggerRight = currentInputState[0].IndexTriggerNoDeadzone[1]             # <<<<<<<<<<<<<<
 * 
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)
 */
    __pyx_v_triggerRight = ((__pyx_v_currentInputState[0]).IndexTriggerNoDeadzone[1]);
  }
  __pyx_L4:;

  /* "psychxr/libovr/_libovr.pyx":4857
 *         triggerRight = currentInputState[0].IndexTriggerNoDeadzone[1]
 * 
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 * def getHandTriggerValues(str controller, bint deadzone=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_triggerLeft); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_triggerRight); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 4857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4802
 *            np.array((thumbstick_x1, thumbstick_y1), dtype=np.float32)
 * 
 * def getIndexTriggerValues(int controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get analog index trigger values.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getIndexTriggerValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4859
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)
 * 
 * def getHandTriggerValues(str controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get hand trigger values."""
 *     global _inputStates
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_175getHandTriggerValues(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_174getHandTriggerValues[] = "getHandTriggerValues(str controller, bool deadzone=False)\nGet hand trigger values.";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_175getHandTriggerValues = {"getHandTriggerValues", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_175getHandTriggerValues, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_174getHandTriggerValues};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_175getHandTriggerValues(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_controller = 0;
  int __pyx_v_deadzone;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getHandTriggerValues (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_controller,&__pyx_n_s_deadzone,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_controller)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_deadzone);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "getHandTriggerValues") < 0)) __PYX_ERR(0, 4859, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_controller = ((PyObject*)values[0]);
    if (values[1]) {
      __pyx_v_deadzone = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_deadzone == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4859, __pyx_L3_error)
    } else {
      __pyx_v_deadzone = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("getHandTriggerValues", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4859, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.getHandTriggerValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_controller), (&PyString_Type), 1, "controller", 1))) __PYX_ERR(0, 4859, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_174getHandTriggerValues(__pyx_self, __pyx_v_controller, __pyx_v_deadzone);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_174getHandTriggerValues(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_controller, int __pyx_v_deadzone) {
  int __pyx_v_idx;
  ovrInputState *__pyx_v_currentInputState;
  float __pyx_v_triggerLeft;
  float __pyx_v_triggerRight;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("getHandTriggerValues", 0);

  /* "psychxr/libovr/_libovr.pyx":4865
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_controller, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4865, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4866
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 */
    __pyx_v_idx = 0;

    /* "psychxr/libovr/_libovr.pyx":4865
 *     # get the controller index in the states array
 *     cdef int idx
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:             # <<<<<<<<<<<<<<
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4867
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_controller, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4867, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4868
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 */
    __pyx_v_idx = 1;

    /* "psychxr/libovr/_libovr.pyx":4867
 *     if controller == LIBOVR_CONTROLLER_TYPE_XBOX:
 *         idx = 0
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:             # <<<<<<<<<<<<<<
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4869
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_controller, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4870
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 */
    __pyx_v_idx = 2;

    /* "psychxr/libovr/_libovr.pyx":4869
 *     elif controller == LIBOVR_CONTROLLER_TYPE_REMOTE:
 *         idx = 1
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:             # <<<<<<<<<<<<<<
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4871
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_controller, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4871, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4872
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3             # <<<<<<<<<<<<<<
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4
 */
    __pyx_v_idx = 3;

    /* "psychxr/libovr/_libovr.pyx":4871
 *     elif controller == LIBOVR_CONTROLLER_TYPE_TOUCH:
 *         idx = 2
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4873
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_controller, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4873, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_2)) {

    /* "psychxr/libovr/_libovr.pyx":4874
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:
 *         idx = 4             # <<<<<<<<<<<<<<
 *     else:
 *         raise ValueError("Invalid controller type specified.")
 */
    __pyx_v_idx = 4;

    /* "psychxr/libovr/_libovr.pyx":4873
 *     elif controller == LIBOVR_CONTROLLER_TYPE_LTOUCH:
 *         idx = 3
 *     elif controller == LIBOVR_CONTROLLER_TYPE_RTOUCH:             # <<<<<<<<<<<<<<
 *         idx = 4
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4876
 *         idx = 4
 *     else:
 *         raise ValueError("Invalid controller type specified.")             # <<<<<<<<<<<<<<
 * 
 *     # pointer to the current and previous input state
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4876, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 4876, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":4879
 * 
 *     # pointer to the current and previous input state
 *     cdef libovr_capi.ovrInputState* currentInputState = &_inputStates[idx]             # <<<<<<<<<<<<<<
 * 
 *     cdef float triggerLeft = 0.0
 */
  __pyx_v_currentInputState = (&(__pyx_v_7psychxr_6libovr_7_libovr__inputStates[__pyx_v_idx]));

  /* "psychxr/libovr/_libovr.pyx":4881
 *     cdef libovr_capi.ovrInputState* currentInputState = &_inputStates[idx]
 * 
 *     cdef float triggerLeft = 0.0             # <<<<<<<<<<<<<<
 *     cdef float triggerRight = 0.0
 * 
 */
  __pyx_v_triggerLeft = 0.0;

  /* "psychxr/libovr/_libovr.pyx":4882
 * 
 *     cdef float triggerLeft = 0.0
 *     cdef float triggerRight = 0.0             # <<<<<<<<<<<<<<
 * 
 *     if deadzone:
 */
  __pyx_v_triggerRight = 0.0;

  /* "psychxr/libovr/_libovr.pyx":4884
 *     cdef float triggerRight = 0.0
 * 
 *     if deadzone:             # <<<<<<<<<<<<<<
 *         triggerLeft = currentInputState[0].HandTrigger[0]
 *         triggerRight = currentInputState[0].HandTrigger[1]
 */
  __pyx_t_2 = (__pyx_v_deadzone != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4885
 * 
 *     if deadzone:
 *         triggerLeft = currentInputState[0].HandTrigger[0]             # <<<<<<<<<<<<<<
 *         triggerRight = currentInputState[0].HandTrigger[1]
 *     else:
 */
    __pyx_v_triggerLeft = ((__pyx_v_currentInputState[0]).HandTrigger[0]);

    /* "psychxr/libovr/_libovr.pyx":4886
 *     if deadzone:
 *         triggerLeft = currentInputState[0].HandTrigger[0]
 *         triggerRight = currentInputState[0].HandTrigger[1]             # <<<<<<<<<<<<<<
 *     else:
 *         triggerLeft = currentInputState[0].HandTriggerNoDeadzone[0]
 */
    __pyx_v_triggerRight = ((__pyx_v_currentInputState[0]).HandTrigger[1]);

    /* "psychxr/libovr/_libovr.pyx":4884
 *     cdef float triggerRight = 0.0
 * 
 *     if deadzone:             # <<<<<<<<<<<<<<
 *         triggerLeft = currentInputState[0].HandTrigger[0]
 *         triggerRight = currentInputState[0].HandTrigger[1]
 */
    goto __pyx_L4;
  }

  /* "psychxr/libovr/_libovr.pyx":4888
 *         triggerRight = currentInputState[0].HandTrigger[1]
 *     else:
 *         triggerLeft = currentInputState[0].HandTriggerNoDeadzone[0]             # <<<<<<<<<<<<<<
 *         triggerRight = currentInputState[0].HandTriggerNoDeadzone[1]
 * 
 */
  /*else*/ {
    __pyx_v_triggerLeft = ((__pyx_v_currentInputState[0]).HandTriggerNoDeadzone[0]);

    /* "psychxr/libovr/_libovr.pyx":4889
 *     else:
 *         triggerLeft = currentInputState[0].HandTriggerNoDeadzone[0]
 *         triggerRight = currentInputState[0].HandTriggerNoDeadzone[1]             # <<<<<<<<<<<<<<
 * 
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)
 */
    __pyx_v_triggerRight = ((__pyx_v_currentInputState[0]).HandTriggerNoDeadzone[1]);
  }
  __pyx_L4:;

  /* "psychxr/libovr/_libovr.pyx":4891
 *         triggerRight = currentInputState[0].HandTriggerNoDeadzone[1]
 * 
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 * def setControllerVibration(int controller, str frequency, float amplitude):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_triggerLeft); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_triggerRight); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 4891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4859
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)
 * 
 * def getHandTriggerValues(str controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get hand trigger values."""
 *     global _inputStates
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getHandTriggerValues", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4893
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)
 * 
 * def setControllerVibration(int controller, str frequency, float amplitude):             # <<<<<<<<<<<<<<
 *     """Vibrate a controller.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_177setControllerVibration(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_176setControllerVibration[] = "setControllerVibration(int controller, str frequency, float amplitude)\nVibrate a controller.\n\n    Vibration is constant at fixed frequency and amplitude. Vibration lasts\n    2.5 seconds, so this function needs to be called more often than that\n    for sustained vibration. Only controllers which support vibration can be\n    used here.\n\n    There are only two frequencies permitted 'high' and 'low', however,\n    amplitude can vary from 0.0 to 1.0. Specifying frequency='off' stops\n    vibration.\n\n    Parameters\n    ----------\n    controller : int\n        Controller name. Valid values are:\n        - :data:`LIBOVR_CONTROLLER_TYPE_XBOX` : XBox gamepad.\n        - :data:`LIBOVR_CONTROLLER_TYPE_REMOTE` : Oculus Remote.\n        - :data:`LIBOVR_CONTROLLER_TYPE_TOUCH` : Combined Touch controllers.\n        - :data:`LIBOVR_CONTROLLER_TYPE_LTOUCH` : Left Touch controller.\n        - :data:`LIBOVR_CONTROLLER_TYPE_RTOUCH` : Right Touch controller.\n    frequency : str\n        Vibration frequency. Valid values are: 'off', 'low', or 'high'.\n    amplitude : float\n        Vibration amplitude in the range of [0.0 and 1.0]. Values outside\n        this range are clamped.\n\n    Returns\n    -------\n    int\n        Return value of API call 'ovr_SetControllerVibration'. Can return\n        LIBOVR_SUCCESS_DEVICE_UNAVAILABLE if no device is present.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_177setControllerVibration = {"setControllerVibration", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_177setControllerVibration, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_176setControllerVibration};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_177setControllerVibration(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_controller;
  PyObject *__pyx_v_frequency = 0;
  float __pyx_v_amplitude;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setControllerVibration (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_controller,&__pyx_n_s_frequency,&__pyx_n_s_amplitude,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_controller)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_frequency)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setControllerVibration", 1, 3, 3, 1); __PYX_ERR(0, 4893, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_amplitude)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setControllerVibration", 1, 3, 3, 2); __PYX_ERR(0, 4893, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setControllerVibration") < 0)) __PYX_ERR(0, 4893, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_controller = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_controller == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 4893, __pyx_L3_error)
    __pyx_v_frequency = ((PyObject*)values[1]);
    __pyx_v_amplitude = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_amplitude == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 4893, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setControllerVibration", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 4893, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("psychxr.libovr._libovr.setControllerVibration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_frequency), (&PyString_Type), 1, "frequency", 1))) __PYX_ERR(0, 4893, __pyx_L1_error)
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_176setControllerVibration(__pyx_self, __pyx_v_controller, __pyx_v_frequency, __pyx_v_amplitude);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_176setControllerVibration(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_controller, PyObject *__pyx_v_frequency, float __pyx_v_amplitude) {
  float __pyx_v_freq;
  ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("setControllerVibration", 0);

  /* "psychxr/libovr/_libovr.pyx":4930
 * 
 *     # get frequency associated with the string
 *     cdef float freq = 0.0             # <<<<<<<<<<<<<<
 *     if frequency == 'off':
 *         freq = amplitude = 0.0
 */
  __pyx_v_freq = 0.0;

  /* "psychxr/libovr/_libovr.pyx":4931
 *     # get frequency associated with the string
 *     cdef float freq = 0.0
 *     if frequency == 'off':             # <<<<<<<<<<<<<<
 *         freq = amplitude = 0.0
 *     elif frequency == 'low':
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_frequency, __pyx_n_s_off, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 4931, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "psychxr/libovr/_libovr.pyx":4932
 *     cdef float freq = 0.0
 *     if frequency == 'off':
 *         freq = amplitude = 0.0             # <<<<<<<<<<<<<<
 *     elif frequency == 'low':
 *         freq = 0.5
 */
    __pyx_v_freq = 0.0;
    __pyx_v_amplitude = 0.0;

    /* "psychxr/libovr/_libovr.pyx":4931
 *     # get frequency associated with the string
 *     cdef float freq = 0.0
 *     if frequency == 'off':             # <<<<<<<<<<<<<<
 *         freq = amplitude = 0.0
 *     elif frequency == 'low':
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4933
 *     if frequency == 'off':
 *         freq = amplitude = 0.0
 *     elif frequency == 'low':             # <<<<<<<<<<<<<<
 *         freq = 0.5
 *     elif frequency == 'high':
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_frequency, __pyx_n_s_low, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 4933, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "psychxr/libovr/_libovr.pyx":4934
 *         freq = amplitude = 0.0
 *     elif frequency == 'low':
 *         freq = 0.5             # <<<<<<<<<<<<<<
 *     elif frequency == 'high':
 *         freq = 1.0
 */
    __pyx_v_freq = 0.5;

    /* "psychxr/libovr/_libovr.pyx":4933
 *     if frequency == 'off':
 *         freq = amplitude = 0.0
 *     elif frequency == 'low':             # <<<<<<<<<<<<<<
 *         freq = 0.5
 *     elif frequency == 'high':
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4935
 *     elif frequency == 'low':
 *         freq = 0.5
 *     elif frequency == 'high':             # <<<<<<<<<<<<<<
 *         freq = 1.0
 *     else:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_frequency, __pyx_n_s_high, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(0, 4935, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (likely(__pyx_t_2)) {

    /* "psychxr/libovr/_libovr.pyx":4936
 *         freq = 0.5
 *     elif frequency == 'high':
 *         freq = 1.0             # <<<<<<<<<<<<<<
 *     else:
 *         raise RuntimeError("Invalid frequency specified.")
 */
    __pyx_v_freq = 1.0;

    /* "psychxr/libovr/_libovr.pyx":4935
 *     elif frequency == 'low':
 *         freq = 0.5
 *     elif frequency == 'high':             # <<<<<<<<<<<<<<
 *         freq = 1.0
 *     else:
 */
    goto __pyx_L3;
  }

  /* "psychxr/libovr/_libovr.pyx":4938
 *         freq = 1.0
 *     else:
 *         raise RuntimeError("Invalid frequency specified.")             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_SetControllerVibration(
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 4938, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "psychxr/libovr/_libovr.pyx":4940
 *         raise RuntimeError("Invalid frequency specified.")
 * 
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_SetControllerVibration(             # <<<<<<<<<<<<<<
 *         _ptrSession,
 *         <libovr_capi.ovrControllerType>controller,
 */
  __pyx_v_result = ovr_SetControllerVibration(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, ((ovrControllerType)__pyx_v_controller), __pyx_v_freq, __pyx_v_amplitude);

  /* "psychxr/libovr/_libovr.pyx":4946
 *         amplitude)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * def getSessionStatus():
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyInt_From_int32_t(__pyx_v_result); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 4946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4893
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)
 * 
 * def setControllerVibration(int controller, str frequency, float amplitude):             # <<<<<<<<<<<<<<
 *     """Vibrate a controller.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("psychxr.libovr._libovr.setControllerVibration", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "psychxr/libovr/_libovr.pyx":4948
 *     return result
 * 
 * def getSessionStatus():             # <<<<<<<<<<<<<<
 *     """Get the current session status.
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_179getSessionStatus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_7psychxr_6libovr_7_libovr_178getSessionStatus[] = "getSessionStatus()\nGet the current session status.\n\n    Returns\n    -------\n    LibOVRSessionStatus\n        Object specifying the current state of the session.\n\n    ";
static PyMethodDef __pyx_mdef_7psychxr_6libovr_7_libovr_179getSessionStatus = {"getSessionStatus", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_179getSessionStatus, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_178getSessionStatus};
static PyObject *__pyx_pw_7psychxr_6libovr_7_libovr_179getSessionStatus(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("getSessionStatus (wrapper)", 0);
  __pyx_r = __pyx_pf_7psychxr_6libovr_7_libovr_178getSessionStatus(__pyx_self);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_7psychxr_6libovr_7_libovr_178getSessionStatus(CYTHON_UNUSED PyObject *__pyx_self) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *__pyx_v_to_return = 0;
  CYTHON_UNUSED ovrResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("getSessionStatus", 0);

  /* "psychxr/libovr/_libovr.pyx":4958
 *     """
 *     global _ptrSession
 *     cdef LibOVRSessionStatus to_return = LibOVRSessionStatus()             # <<<<<<<<<<<<<<
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_GetSessionStatus(
 *         _ptrSession, to_return.c_data)
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRSessionStatus)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_to_return = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4959
 *     global _ptrSession
 *     cdef LibOVRSessionStatus to_return = LibOVRSessionStatus()
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_GetSessionStatus(             # <<<<<<<<<<<<<<
 *         _ptrSession, to_return.c_data)
 * 
 */
  __pyx_v_result = ovr_GetSessionStatus(__pyx_v_7psychxr_6libovr_7_libovr__ptrSession, __pyx_v_to_return->c_data);

  /* "psychxr/libovr/_libovr.pyx":4962
 *         _ptrSession, to_return.c_data)
 * 
 *     return to_return             # <<<<<<<<<<<<<<
 * 
 * # def testPointsInEyeFrustums(object points, object out=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_to_return));
  __pyx_r = ((PyObject *)__pyx_v_to_return);
  goto __pyx_L0;

  /* "psychxr/libovr/_libovr.pyx":4948
 *     return result
 * 
 * def getSessionStatus():             # <<<<<<<<<<<<<<
 *     """Get the current session status.
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("psychxr.libovr._libovr.getSessionStatus", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_to_return);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libovr_capi.pxd":135
 * 
 * 
 * cdef inline int OVR_SUCCESS(ovrResult result):             # <<<<<<<<<<<<<<
 *     return result >= ovrSuccessType.ovrSuccess
 * 
 */

static CYTHON_INLINE int __pyx_f_7psychxr_6libovr_11libovr_capi_OVR_SUCCESS(ovrResult __pyx_v_result) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("OVR_SUCCESS", 0);

  /* "libovr_capi.pxd":136
 * 
 * cdef inline int OVR_SUCCESS(ovrResult result):
 *     return result >= ovrSuccessType.ovrSuccess             # <<<<<<<<<<<<<<
 * 
 * cdef inline int OVR_UNQUALIFIED_SUCCESS(ovrResult result):
 */
  __pyx_r = (__pyx_v_result >= ovrSuccess);
  goto __pyx_L0;

  /* "libovr_capi.pxd":135
 * 
 * 
 * cdef inline int OVR_SUCCESS(ovrResult result):             # <<<<<<<<<<<<<<
 *     return result >= ovrSuccessType.ovrSuccess
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libovr_capi.pxd":138
 *     return result >= ovrSuccessType.ovrSuccess
 * 
 * cdef inline int OVR_UNQUALIFIED_SUCCESS(ovrResult result):             # <<<<<<<<<<<<<<
 *     return result == ovrSuccessType.ovrSuccess
 * 
 */

static CYTHON_INLINE int __pyx_f_7psychxr_6libovr_11libovr_capi_OVR_UNQUALIFIED_SUCCESS(ovrResult __pyx_v_result) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("OVR_UNQUALIFIED_SUCCESS", 0);

  /* "libovr_capi.pxd":139
 * 
 * cdef inline int OVR_UNQUALIFIED_SUCCESS(ovrResult result):
 *     return result == ovrSuccessType.ovrSuccess             # <<<<<<<<<<<<<<
 * 
 * cdef inline int OVR_FAILURE(ovrResult result):
 */
  __pyx_r = (__pyx_v_result == ovrSuccess);
  goto __pyx_L0;

  /* "libovr_capi.pxd":138
 *     return result >= ovrSuccessType.ovrSuccess
 * 
 * cdef inline int OVR_UNQUALIFIED_SUCCESS(ovrResult result):             # <<<<<<<<<<<<<<
 *     return result == ovrSuccessType.ovrSuccess
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "libovr_capi.pxd":141
 *     return result == ovrSuccessType.ovrSuccess
 * 
 * cdef inline int OVR_FAILURE(ovrResult result):             # <<<<<<<<<<<<<<
 *     return not OVR_SUCCESS(result)
 * 
 */

static CYTHON_INLINE int __pyx_f_7psychxr_6libovr_11libovr_capi_OVR_FAILURE(ovrResult __pyx_v_result) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("OVR_FAILURE", 0);

  /* "libovr_capi.pxd":142
 * 
 * cdef inline int OVR_FAILURE(ovrResult result):
 *     return not OVR_SUCCESS(result)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = (!(__pyx_f_7psychxr_6libovr_11libovr_capi_OVR_SUCCESS(__pyx_v_result) != 0));
  goto __pyx_L0;

  /* "libovr_capi.pxd":141
 *     return result == ovrSuccessType.ovrSuccess
 * 
 * cdef inline int OVR_FAILURE(ovrResult result):             # <<<<<<<<<<<<<<
 *     return not OVR_SUCCESS(result)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyArray_Descr *__pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":265
 * 
 *             cdef int i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *             cdef int i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":271
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_C_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 272, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 272, __pyx_L1_error)

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *             ndim = PyArray_NDIM(self)
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L7_bool_binop_done;
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":275
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_ARRAY_F_CONTIGUOUS) != 0)) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L7_bool_binop_done:;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  if (unlikely(__pyx_t_1)) {

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 276, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 276, __pyx_L1_error)

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":279
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * 2) * ((size_t)__pyx_v_ndim))));

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":284
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":285
 *                 info.strides = <Py_ssize_t*>PyObject_Malloc(sizeof(Py_ssize_t) * 2 * <size_t>ndim)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_4 = __pyx_v_ndim;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":287
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
    goto __pyx_L9;
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":289
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
  /*else*/ {
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L9:;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":293
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":296
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)
 *             cdef int offset
 */
  __pyx_v_f = NULL;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":297
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 *             cdef int offset
 * 
 */
  __pyx_t_7 = PyArray_DESCR(__pyx_v_self);
  __pyx_t_3 = ((PyObject *)__pyx_t_7);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":300
 *             cdef int offset
 * 
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not PyDataType_HASFIELDS(descr):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(PyDataType_HASFIELDS(__pyx_v_descr) != 0)) != 0);
  if (__pyx_t_1) {

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":303
 * 
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_4 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_4;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (!__pyx_t_2) {
      goto __pyx_L15_next_or;
    } else {
    }
    __pyx_t_2 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_L15_next_or:;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":305
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L14_bool_binop_done;
    }
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L14_bool_binop_done:;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_1)) {

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 306, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 306, __pyx_L1_error)

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":304
 *             if not PyDataType_HASFIELDS(descr):
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":307
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
    switch (__pyx_v_t) {
      case NPY_BYTE:
      __pyx_v_f = ((char *)"b");
      break;
      case NPY_UBYTE:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":308
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      __pyx_v_f = ((char *)"B");
      break;
      case NPY_SHORT:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":309
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      __pyx_v_f = ((char *)"h");
      break;
      case NPY_USHORT:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":310
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      __pyx_v_f = ((char *)"H");
      break;
      case NPY_INT:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":311
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      __pyx_v_f = ((char *)"i");
      break;
      case NPY_UINT:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":312
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      __pyx_v_f = ((char *)"I");
      break;
      case NPY_LONG:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":313
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      __pyx_v_f = ((char *)"l");
      break;
      case NPY_ULONG:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":314
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      __pyx_v_f = ((char *)"L");
      break;
      case NPY_LONGLONG:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":315
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      __pyx_v_f = ((char *)"q");
      break;
      case NPY_ULONGLONG:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":316
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      __pyx_v_f = ((char *)"Q");
      break;
      case NPY_FLOAT:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":317
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      __pyx_v_f = ((char *)"f");
      break;
      case NPY_DOUBLE:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":318
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      __pyx_v_f = ((char *)"d");
      break;
      case NPY_LONGDOUBLE:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":319
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      __pyx_v_f = ((char *)"g");
      break;
      case NPY_CFLOAT:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":320
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      __pyx_v_f = ((char *)"Zf");
      break;
      case NPY_CDOUBLE:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":321
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      __pyx_v_f = ((char *)"Zd");
      break;
      case NPY_CLONGDOUBLE:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":322
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      __pyx_v_f = ((char *)"Zg");
      break;
      case NPY_OBJECT:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":323
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_v_f = ((char *)"O");
      break;
      default:

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":325
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 325, __pyx_L1_error)
      break;
    }

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":326
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":327
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":302
 *             info.obj = self
 * 
 *             if not PyDataType_HASFIELDS(descr):             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":329
 *                 return
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
  /*else*/ {
    __pyx_v_info->format = ((char *)PyObject_Malloc(0xFF));

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":330
 *             else:
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":331
 *                 info.format = <char*>PyObject_Malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":332
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 0xFF), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 332, __pyx_L1_error)
    __pyx_v_f = __pyx_t_9;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":335
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":339
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)
 */
    PyObject_Free(__pyx_v_info->format);

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":338
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":341
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 PyObject_Free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    PyObject_Free(__pyx_v_info->strides);

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":340
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 PyObject_Free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":337
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 PyObject_Free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":822
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":825
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":824
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":828
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":831
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":834
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":838
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":837
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":847
 * 
 *     cdef dtype child
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":848
 *     cdef dtype child
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 851, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(2, 851, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":852
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    if (unlikely(__pyx_v_descr->fields == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 852, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) __PYX_ERR(2, 852, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":853
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(2, 853, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 853, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 853, __pyx_L1_error)
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) __PYX_ERR(2, 853, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 855, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (unlikely(__pyx_t_6)) {

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 856, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 856, __pyx_L1_error)

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":855
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    }

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);
    if (!__pyx_t_7) {
      goto __pyx_L8_next_or;
    } else {
    }
    __pyx_t_7 = (__pyx_v_little_endian != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_L8_next_or:;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":859
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);
    __pyx_t_6 = __pyx_t_7;
    __pyx_L7_bool_binop_done:;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    if (unlikely(__pyx_t_6)) {

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":860
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 860, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(2, 860, __pyx_L1_error)

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":858
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    }

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":870
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 870, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":871
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 0x78;

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":872
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":873
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_8 = 0;
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);
    }

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":875
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_8 = 0;
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":878
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 878, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (unlikely(__pyx_t_6)) {

        /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 880, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 880, __pyx_L1_error)

        /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":879
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":883
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_BYTE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 883, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":884
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UBYTE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 884, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":885
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_SHORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 885, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x68;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":886
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_USHORT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 886, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":887
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_INT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 887, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x69;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":888
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_UINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 888, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":889
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 889, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x6C;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":890
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 890, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":891
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 891, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x71;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":892
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 892, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":893
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_FLOAT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 893, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x66;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":894
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 894, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x64;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":895
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 895, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 0x67;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":896
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 896, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x66;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":897
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 897, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x64;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":898
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 898, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 0x67;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":899
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = __Pyx_PyInt_From_enum__NPY_TYPES(NPY_OBJECT); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(2, 899, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (likely(__pyx_t_6)) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L15;
      }

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":901
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
      /*else*/ {
        __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 901, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __PYX_ERR(2, 901, __pyx_L1_error)
      }
      __pyx_L15:;

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":902
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":877
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
      goto __pyx_L13;
    }

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":906
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
    /*else*/ {
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == ((char *)NULL))) __PYX_ERR(2, 906, __pyx_L1_error)
      __pyx_v_f = __pyx_t_9;
    }
    __pyx_L13:;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":851
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":907
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *         return ()
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1023
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1024
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1022
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1027
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1029
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1028
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1030
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1026
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1036
 * cdef inline int import_array() except -1:
 *     try:
 *         _import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1036, __pyx_L3_error)

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1037
 *     try:
 *         _import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1037, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1038, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1038, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1035
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1034
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1042
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1042, __pyx_L3_error)

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1043
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1043, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1044, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1044, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1041
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1040
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1048
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 1048, __pyx_L3_error)

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1049
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1049, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1050
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1050, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1050, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1047
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1046
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = ((PyObject *)__pyx_n_s_c);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_shape)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_itemsize)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(1, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_format)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(1, 122, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_mode);
          if (value) { values[3] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 122, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 122, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 123, __pyx_L3_error)
    } else {

      /* "View.MemoryView":123
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 122, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(1, 122, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(1, 122, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_dim;
  PyObject **__pyx_v_p;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":129
 *         cdef PyObject **p
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 129, __pyx_L1_error)
  }
  __pyx_t_1 = PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(1, 129, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":130
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_self->ndim != 0)) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 133, __pyx_L1_error)

    /* "View.MemoryView":132
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 */
  }

  /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  __pyx_t_2 = ((__pyx_v_itemsize <= 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__46, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 136, __pyx_L1_error)

    /* "View.MemoryView":135
 *             raise ValueError("Empty shape tuple for cython.array")
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 */
  }

  /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":139
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_n_s_ASCII) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_n_s_ASCII);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":138
 *             raise ValueError("itemsize <= 0 for cython.array")
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":140
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_v_format)->tp_name), 0))) __PYX_ERR(1, 140, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":141
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(1, 141, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(1, 141, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_7;

  /* "View.MemoryView":144
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":145
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  __pyx_t_4 = ((!(__pyx_v_self->_shape != 0)) != 0);
  if (unlikely(__pyx_t_4)) {

    /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 148, __pyx_L1_error)

    /* "View.MemoryView":147
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError("unable to allocate shape and strides.")
 * 
 */
  }

  /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  __pyx_t_8 = 0;
  __pyx_t_3 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
  for (;;) {
    if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(1, 151, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_9;
    __pyx_v_idx = __pyx_t_8;
    __pyx_t_8 = (__pyx_t_8 + 1);

    /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    __pyx_t_4 = ((__pyx_v_dim <= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":153
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_idx); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_6);
      __pyx_t_5 = 0;
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_t_10); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 153, __pyx_L1_error)

      /* "View.MemoryView":152
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":154
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":151
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError("Invalid shape in axis %d: %d." % (idx, dim))
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 157, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":158
 *         cdef char order
 *         if mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":159
 *         if mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         elif mode == 'c':
 *             order = b'C'
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":157
 * 
 *         cdef char order
 *         if mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) __PYX_ERR(1, 160, __pyx_L1_error)
  if (likely(__pyx_t_4)) {

    /* "View.MemoryView":161
 *             self.mode = u'fortran'
 *         elif mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         else:
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":162
 *         elif mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":160
 *             order = b'F'
 *             self.mode = u'fortran'
 *         elif mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":164
 *             self.mode = u'c'
 *         else:
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_v_mode); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_10, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __PYX_ERR(1, 164, __pyx_L1_error)
  }
  __pyx_L10:;

  /* "View.MemoryView":166
 *             raise ValueError("Invalid mode, expected 'c' or 'fortran', got %s" % mode)
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides,             # <<<<<<<<<<<<<<
 *                                              itemsize, self.ndim, order)
 * 
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":169
 *                                              itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":170
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 *         if allocate_buffer:
 * 
 */
  __pyx_t_10 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 170, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_4;

  /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = (__pyx_v_allocate_buffer != 0);
  if (__pyx_t_4) {

    /* "View.MemoryView":174
 * 
 * 
 *             self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")
 */
    __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

    /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    __pyx_t_4 = ((!(__pyx_v_self->data != 0)) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_MemoryError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 176, __pyx_L1_error)

      /* "View.MemoryView":175
 * 
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:             # <<<<<<<<<<<<<<
 *                 raise MemoryError("unable to allocate array data.")
 * 
 */
    }

    /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    __pyx_t_4 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":179
 * 
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 */
      __pyx_v_p = ((PyObject **)__pyx_v_self->data);

      /* "View.MemoryView":180
 *             if self.dtype_is_object:
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):             # <<<<<<<<<<<<<<
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)
 */
      if (unlikely(__pyx_v_itemsize == 0)) {
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        __PYX_ERR(1, 180, __pyx_L1_error)
      }
      else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        __PYX_ERR(1, 180, __pyx_L1_error)
      }
      __pyx_t_1 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_itemsize);
      __pyx_t_9 = __pyx_t_1;
      for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_9; __pyx_t_11+=1) {
        __pyx_v_i = __pyx_t_11;

        /* "View.MemoryView":181
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None             # <<<<<<<<<<<<<<
 *                     Py_INCREF(Py_None)
 * 
 */
        (__pyx_v_p[__pyx_v_i]) = Py_None;

        /* "View.MemoryView":182
 *                 for i in range(self.len / itemsize):
 *                     p[i] = Py_None
 *                     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
        Py_INCREF(Py_None);
      }

      /* "View.MemoryView":178
 *                 raise MemoryError("unable to allocate array data.")
 * 
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 p = <PyObject **> self.data
 *                 for i in range(self.len / itemsize):
 */
    }

    /* "View.MemoryView":171
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":122
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":186
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 187, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":188
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
    __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":187
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if self.mode == u"c":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 189, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":190
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 */
    __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

    /* "View.MemoryView":189
 *         if self.mode == u"c":
 *             bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  __pyx_t_1 = ((!((__pyx_v_flags & __pyx_v_bufmode) != 0)) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__49, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 192, __pyx_L1_error)

    /* "View.MemoryView":191
 *         elif self.mode == u"fortran":
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 */
  }

  /* "View.MemoryView":193
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 *         info.ndim = self.ndim
 */
  __pyx_t_4 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_4;

  /* "View.MemoryView":194
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 */
  __pyx_t_5 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_5;

  /* "View.MemoryView":195
 *         info.buf = self.data
 *         info.len = self.len
 *         info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *         info.shape = self._shape
 *         info.strides = self._strides
 */
  __pyx_t_6 = __pyx_v_self->ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":196
 *         info.len = self.len
 *         info.ndim = self.ndim
 *         info.shape = self._shape             # <<<<<<<<<<<<<<
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 */
  __pyx_t_7 = __pyx_v_self->_shape;
  __pyx_v_info->shape = __pyx_t_7;

  /* "View.MemoryView":197
 *         info.ndim = self.ndim
 *         info.shape = self._shape
 *         info.strides = self._strides             # <<<<<<<<<<<<<<
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 */
  __pyx_t_7 = __pyx_v_self->_strides;
  __pyx_v_info->strides = __pyx_t_7;

  /* "View.MemoryView":198
 *         info.shape = self._shape
 *         info.strides = self._strides
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":199
 *         info.strides = self._strides
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 * 
 */
  __pyx_t_5 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_5;

  /* "View.MemoryView":200
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":203
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":202
 *         info.readonly = 0
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.format
 *         else:
 */
    goto __pyx_L5;
  }

  /* "View.MemoryView":205
 *             info.format = self.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.obj = self
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L5:;

  /* "View.MemoryView":207
 *             info.format = NULL
 * 
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":185
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         cdef int bufmode = -1
 *         if self.mode == u"c":
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
  __pyx_t_1 = ((__pyx_v_self->callback_free_data != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":213
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":212
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  __pyx_t_1 = (__pyx_v_self->free_data != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":216
 *         elif self.free_data:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,             # <<<<<<<<<<<<<<
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":215
 *             self.callback_free_data(self.data)
 *         elif self.free_data:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 */
    }

    /* "View.MemoryView":218
 *                 refcount_objects_in_slice(self.data, self._shape,
 *                                           self._strides, self.ndim, False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":214
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape,
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":219
 *                                           self._strides, self.ndim, False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":211
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":223
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":222
 * 
 *     @property
 *     def memview(self):             # <<<<<<<<<<<<<<
 *         return self.get_memview()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_memview", 0);

  /* "View.MemoryView":227
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":228
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":226
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":231
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":230
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getattr__", 0);

  /* "View.MemoryView":234
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":233
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":237
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":236
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "View.MemoryView":240
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":239
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("array_cwrapper", 0);

  /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_buf == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":249
 * 
 *     if buf == NULL:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))             # <<<<<<<<<<<<<<
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":248
 *     cdef array result
 * 
 *     if buf == NULL:             # <<<<<<<<<<<<<<
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
  /*else*/ {
    __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_mode, 0, strlen(__pyx_v_mode), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_shape);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_3);
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_3 = 0;

    /* "View.MemoryView":252
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(1, 252, __pyx_L1_error)

    /* "View.MemoryView":251
 *         result = array(shape, itemsize, format, mode.decode('ASCII'))
 *     else:
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),             # <<<<<<<<<<<<<<
 *                        allocate_buffer=False)
 *         result.data = buf
 */
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)__pyx_array_type), __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "View.MemoryView":253
 *         result = array(shape, itemsize, format, mode.decode('ASCII'),
 *                        allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":255
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":244
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format,             # <<<<<<<<<<<<<<
 *                           char *mode, char *buf):
 *     cdef array result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_name)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 281, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 281, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "View.MemoryView":282
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":281
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":284
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":283
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict);
    __pyx_t_4 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_3;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  __pyx_t_3 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_3) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_state);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_184977713);
    __Pyx_GIVEREF(__pyx_int_184977713);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_184977713);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0xb068931, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

static void *__pyx_align_pointer(void *__pyx_v_memory, size_t __pyx_v_alignment) {
  Py_intptr_t __pyx_v_aligned_p;
  size_t __pyx_v_offset;
  void *__pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":300
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory             # <<<<<<<<<<<<<<
 *     cdef size_t offset
 * 
 */
  __pyx_v_aligned_p = ((Py_intptr_t)__pyx_v_memory);

  /* "View.MemoryView":304
 * 
 *     with cython.cdivision(True):
 *         offset = aligned_p % alignment             # <<<<<<<<<<<<<<
 * 
 *     if offset > 0:
 */
  __pyx_v_offset = (__pyx_v_aligned_p % __pyx_v_alignment);

  /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  __pyx_t_1 = ((__pyx_v_offset > 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":307
 * 
 *     if offset > 0:
 *         aligned_p += alignment - offset             # <<<<<<<<<<<<<<
 * 
 *     return <void *> aligned_p
 */
    __pyx_v_aligned_p = (__pyx_v_aligned_p + (__pyx_v_alignment - __pyx_v_offset));

    /* "View.MemoryView":306
 *         offset = aligned_p % alignment
 * 
 *     if offset > 0:             # <<<<<<<<<<<<<<
 *         aligned_p += alignment - offset
 * 
 */
  }

  /* "View.MemoryView":309
 *         aligned_p += alignment - offset
 * 
 *     return <void *> aligned_p             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((void *)__pyx_v_aligned_p);
  goto __pyx_L0;

  /* "View.MemoryView":298
 * 
 * @cname('__pyx_align_pointer')
 * cdef void *align_pointer(void *memory, size_t alignment) nogil:             # <<<<<<<<<<<<<<
 *     "Align pointer memory on a given boundary"
 *     cdef Py_intptr_t aligned_p = <Py_intptr_t> memory
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_obj)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_flags)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(1, 345, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 345, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 345, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 345, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "View.MemoryView":346
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":347
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (__pyx_v_obj != Py_None);
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":349
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_4 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 349, __pyx_L1_error)

    /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = ((((PyObject *)__pyx_v_self->view.obj) == NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":351
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":352
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         global __pyx_memoryview_thread_locks_used
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":350
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":348
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  __pyx_t_1 = ((__pyx_memoryview_thread_locks_used < 8) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":356
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 */
    __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

    /* "View.MemoryView":357
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 */
    __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

    /* "View.MemoryView":355
 * 
 *         global __pyx_memoryview_thread_locks_used
 *         if __pyx_memoryview_thread_locks_used < THREAD_LOCKS_PREALLOCATED:             # <<<<<<<<<<<<<<
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 */
  }

  /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":359
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 raise MemoryError
 */
    __pyx_v_self->lock = PyThread_allocate_lock();

    /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    __pyx_t_1 = ((__pyx_v_self->lock == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":361
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 361, __pyx_L1_error)

      /* "View.MemoryView":360
 *         if self.lock is NULL:
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 * 
 */
    }

    /* "View.MemoryView":358
 *             self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *             __pyx_memoryview_thread_locks_used += 1
 *         if self.lock is NULL:             # <<<<<<<<<<<<<<
 *             self.lock = PyThread_allocate_lock()
 *             if self.lock is NULL:
 */
  }

  /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":364
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = (((__pyx_v_self->view.format[0]) == 'O') != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L11_bool_binop_done;
    }
    __pyx_t_2 = (((__pyx_v_self->view.format[1]) == '\x00') != 0);
    __pyx_t_1 = __pyx_t_2;
    __pyx_L11_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":363
 *                 raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L10;
  }

  /* "View.MemoryView":366
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L10:;

  /* "View.MemoryView":368
 *             self.dtype_is_object = dtype_is_object
 * 
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(             # <<<<<<<<<<<<<<
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL
 */
  __pyx_v_self->acquisition_count_aligned_p = ((__pyx_atomic_int *)__pyx_align_pointer(((void *)(&(__pyx_v_self->acquisition_count[0]))), (sizeof(__pyx_atomic_int))));

  /* "View.MemoryView":370
 *         self.acquisition_count_aligned_p = <__pyx_atomic_int *> align_pointer(
 *                   <void *> &self.acquisition_count[0], sizeof(__pyx_atomic_int))
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":345
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyThread_type_lock __pyx_t_6;
  PyThread_type_lock __pyx_t_7;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":374
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":373
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 * 
 */
  }

  /* "View.MemoryView":378
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_2 = ((__pyx_v_self->lock != NULL) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":379
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_3 = __pyx_memoryview_thread_locks_used;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":380
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_2 = (((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":381
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":382
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_2 = ((__pyx_v_i != __pyx_memoryview_thread_locks_used) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":384
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_7 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":383
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_6;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_7;

          /* "View.MemoryView":382
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":385
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":380
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":387
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":378
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":372
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":389
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  __Pyx_RefNannySetupContext("get_item_pointer", 0);

  /* "View.MemoryView":391
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":393
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 393, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 393, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 393, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 393, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 393, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 393, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":394
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 394, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(1, 394, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":393
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":396
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":389
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":399
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "View.MemoryView":400
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":401
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":400
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":403
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_3 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(__pyx_t_3 != Py_None)) {
    PyObject* sequence = __pyx_t_3;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 403, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 403, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_indices = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "View.MemoryView":406
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 406, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "View.MemoryView":407
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 407, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":406
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":409
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_6 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_6 == ((char *)NULL))) __PYX_ERR(1, 409, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_6;

    /* "View.MemoryView":410
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 410, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":399
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":412
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":413
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.readonly != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":414
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__52, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 414, __pyx_L1_error)

    /* "View.MemoryView":413
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":416
 *             raise TypeError("Cannot assign to read-only memoryview")
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(1, 416, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 416, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(1, 416, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":418
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 418, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":419
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_obj = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "View.MemoryView":420
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_obj); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 420, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":421
 *             obj = self.is_slice(value)
 *             if obj:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_2 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_2, __pyx_v_obj); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 421, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "View.MemoryView":420
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":423
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_memoryview_type))))) __PYX_ERR(1, 423, __pyx_L1_error)
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_4), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":418
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":425
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":412
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":427
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":428
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":429
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":430
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 430, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":431
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 431, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":430
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 430, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 430, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":429
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":432
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(1, 432, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":433
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "View.MemoryView":429
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":428
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":435
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":427
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":437
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 0);

  /* "View.MemoryView":441
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(1, 441, __pyx_L1_error)

  /* "View.MemoryView":442
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],             # <<<<<<<<<<<<<<
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(1, 442, __pyx_L1_error)

  /* "View.MemoryView":443
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":441
 *         cdef __Pyx_memviewslice src_slice
 * 
 *         memoryview_copy_contents(get_slice_from_memview(src, &src_slice)[0],             # <<<<<<<<<<<<<<
 *                                  get_slice_from_memview(dst, &dst_slice)[0],
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 */
  __pyx_t_4 = __pyx_memoryview_copy_contents((__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice))[0]), (__pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice))[0]), __pyx_t_2, __pyx_t_3, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 441, __pyx_L1_error)

  /* "View.MemoryView":437
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":445
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  char const *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 0);

  /* "View.MemoryView":447
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":452
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_v_dst_slice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice));

  /* "View.MemoryView":454
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_1 = ((((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array))) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":455
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":456
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_1 = ((__pyx_v_tmp == NULL) != 0);
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":457
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(1, 457, __pyx_L1_error)

      /* "View.MemoryView":456
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":458
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":454
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":460
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":462
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":463
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    __pyx_t_1 = (__pyx_v_self->dtype_is_object != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":464
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":463
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":466
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 466, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":470
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_1 = ((__pyx_v_self->view.suboffsets != NULL) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":471
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_2 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 471, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "View.MemoryView":470
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":472
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":475
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0)) __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __pyx_t_3 = __pyx_lineno; __pyx_t_4 = __pyx_clineno; __pyx_t_5 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_ErrRestore(__pyx_t_6, __pyx_t_7, __pyx_t_8);
      __pyx_t_6 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0;
      __pyx_lineno = __pyx_t_3; __pyx_clineno = __pyx_t_4; __pyx_filename = __pyx_t_5;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":445
 *                                  src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":477
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("setitem_indexed", 0);

  /* "View.MemoryView":478
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(1, 478, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":479
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":477
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":481
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":484
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":487
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":488
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":489
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 489, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 489, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 489, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_5)) {
        PyObject *__pyx_temp[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_5, __pyx_temp+1-__pyx_t_8, 2+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 489, __pyx_L3_error)
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      } else
      #endif
      {
        __pyx_t_9 = PyTuple_New(2+__pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 489, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (__pyx_t_7) {
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
        }
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_6);
        __Pyx_INCREF(__pyx_v_bytesitem);
        __Pyx_GIVEREF(__pyx_v_bytesitem);
        PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_v_bytesitem);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 489, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":488
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":493
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_10 = strlen(__pyx_v_self->view.format); 
      __pyx_t_11 = ((__pyx_t_10 == 1) != 0);
      if (__pyx_t_11) {

        /* "View.MemoryView":494
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 494, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":493
 *             raise ValueError("Unable to convert item to object")
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":495
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "View.MemoryView":490
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError("Unable to convert item to object")
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 490, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_9);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_9 = 0;
    if (__pyx_t_8) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(1, 490, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_1);

      /* "View.MemoryView":491
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__53, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 491, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(1, 491, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "View.MemoryView":488
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":481
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":497
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  char *__pyx_t_12;
  char *__pyx_t_13;
  char *__pyx_t_14;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":500
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_struct, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":505
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "View.MemoryView":506
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 506, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":505
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":508
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_7 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 508, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[3] = {__pyx_t_5, __pyx_t_1, __pyx_v_value};
      __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_7, 2+__pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 508, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 508, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 508, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_4)->tp_name), 0))) __PYX_ERR(1, 508, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":510
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_9 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(1, 510, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_10 = __pyx_v_bytesvalue;
  __pyx_t_12 = PyBytes_AS_STRING(__pyx_t_10);
  __pyx_t_13 = (__pyx_t_12 + PyBytes_GET_SIZE(__pyx_t_10));
  for (__pyx_t_14 = __pyx_t_12; __pyx_t_14 < __pyx_t_13; __pyx_t_14++) {
    __pyx_t_11 = __pyx_t_14;
    __pyx_v_c = (__pyx_t_11[0]);

    /* "View.MemoryView":511
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_9;

    /* "View.MemoryView":510
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":511
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "View.MemoryView":497
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":514
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  char *__pyx_t_5;
  void *__pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  if (__pyx_v_info == NULL) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":515
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->view.readonly != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":516
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__54, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 516, __pyx_L1_error)

    /* "View.MemoryView":515
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 */
  }

  /* "View.MemoryView":518
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":519
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_4;

    /* "View.MemoryView":518
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":521
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":523
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":524
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_4;

    /* "View.MemoryView":523
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":526
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":528
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":529
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_4;

    /* "View.MemoryView":528
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":531
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":533
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":534
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_5 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_5;

    /* "View.MemoryView":533
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":536
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":538
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_6 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_6;

  /* "View.MemoryView":539
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_7 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_7;

  /* "View.MemoryView":540
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_8 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_8;

  /* "View.MemoryView":541
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_8 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_8;

  /* "View.MemoryView":542
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":543
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":514
 * 
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):             # <<<<<<<<<<<<<<
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":549
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":550
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(1, 550, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":551
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 551, __pyx_L1_error)

  /* "View.MemoryView":552
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":549
 * 
 *     @property
 *     def T(self):             # <<<<<<<<<<<<<<
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":555
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":556
 *     @property
 *     def base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":555
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":559
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":560
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
  for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_length = (__pyx_t_2[0]);
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 560, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 560, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":559
 * 
 *     @property
 *     def shape(self):             # <<<<<<<<<<<<<<
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":563
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":564
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  __pyx_t_1 = ((__pyx_v_self->view.strides == NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":566
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__55, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 566, __pyx_L1_error)

    /* "View.MemoryView":564
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError("Buffer view does not expose strides")
 */
  }

  /* "View.MemoryView":568
 *             raise ValueError("Buffer view does not expose strides")
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
  for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
    __pyx_t_3 = __pyx_t_5;
    __pyx_v_stride = (__pyx_t_3[0]);
    __pyx_t_6 = PyInt_FromSsize_t(__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 568, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 568, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":563
 * 
 *     @property
 *     def strides(self):             # <<<<<<<<<<<<<<
 *         if self.view.strides == NULL:
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":571
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":572
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.suboffsets == NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":573
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_Multiply(__pyx_tuple__56, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":572
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":575
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
  for (__pyx_t_6 = __pyx_v_self->view.suboffsets; __pyx_t_6 < __pyx_t_5; __pyx_t_6++) {
    __pyx_t_4 = __pyx_t_6;
    __pyx_v_suboffset = (__pyx_t_4[0]);
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_suboffset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 575, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(1, 575, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = PyList_AsTuple(((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":571
 * 
 *     @property
 *     def suboffsets(self):             # <<<<<<<<<<<<<<
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":578
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":579
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":578
 * 
 *     @property
 *     def ndim(self):             # <<<<<<<<<<<<<<
 *         return self.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":582
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":583
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":582
 * 
 *     @property
 *     def itemsize(self):             # <<<<<<<<<<<<<<
 *         return self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":587
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 * 
 *     @property
 *     def nbytes(self):             # <<<<<<<<<<<<<<
 *         return self.size * self.view.itemsize
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":591
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":592
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":594
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_4 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.shape; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_t_6 = PyInt_FromSsize_t((__pyx_t_3[0])); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 594, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "View.MemoryView":595
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_6 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 595, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_6);
      __pyx_t_6 = 0;
    }

    /* "View.MemoryView":597
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":591
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":599
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":590
 * 
 *     @property
 *     def size(self):             # <<<<<<<<<<<<<<
 *         if self._size is None:
 *             result = 1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":601
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "View.MemoryView":602
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->view.ndim >= 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":603
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":602
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":605
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":601
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":607
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "View.MemoryView":608
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":609
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":608
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":607
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":611
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "View.MemoryView":612
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":611
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":615
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_c_contig", 0);

  /* "View.MemoryView":618
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":619
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":615
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":621
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("is_f_contig", 0);

  /* "View.MemoryView":624
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_v_mslice = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp));

  /* "View.MemoryView":625
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":621
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "View.MemoryView":629
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":631
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":632
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 632, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":637
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":627
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":639
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("copy_fortran", 0);

  /* "View.MemoryView":641
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":643
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":644
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 644, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":649
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":639
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__57, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__58, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":653
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 0);

  /* "View.MemoryView":654
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":655
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":656
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":653
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("memoryview_check", 0);

  /* "View.MemoryView":660
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":659
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o):             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":662
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  CYTHON_UNUSED PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  __Pyx_RefNannySetupContext("_unellipsify", 0);

  /* "View.MemoryView":667
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
  __pyx_t_1 = PyTuple_Check(__pyx_v_index); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":668
 *     """
 *     if not isinstance(index, tuple):
 *         tup = (index,)             # <<<<<<<<<<<<<<
 *     else:
 *         tup = index
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_v_tup = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "View.MemoryView":667
 *     full slices.
 *     """
 *     if not isinstance(index, tuple):             # <<<<<<<<<<<<<<
 *         tup = (index,)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":670
 *         tup = (index,)
 *     else:
 *         tup = index             # <<<<<<<<<<<<<<
 * 
 *     result = []
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_index);
    __pyx_v_tup = __pyx_v_index;
  }
  __pyx_L3:;

  /* "View.MemoryView":672
 *         tup = index
 * 
 *     result = []             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_result = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":673
 * 
 *     result = []
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":674
 *     result = []
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":675
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_3 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_tup)) || PyTuple_CheckExact(__pyx_v_tup)) {
    __pyx_t_4 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_tup); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 675, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 675, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 675, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      } else {
        if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(1, 675, __pyx_L1_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 675, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
      }
    } else {
      __pyx_t_7 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_7)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 675, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_3);
    __pyx_t_7 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 675, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3);
    __pyx_t_3 = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "View.MemoryView":676
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":677
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
      __pyx_t_1 = ((!(__pyx_v_seen_ellipsis != 0)) != 0);
      if (__pyx_t_1) {

        /* "View.MemoryView":678
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             else:
 */
        __pyx_t_8 = PyObject_Length(__pyx_v_tup); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(1, 678, __pyx_L1_error)
        __pyx_t_7 = PyList_New(1 * ((((__pyx_v_ndim - __pyx_t_8) + 1)<0) ? 0:((__pyx_v_ndim - __pyx_t_8) + 1))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 678, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        { Py_ssize_t __pyx_temp;
          for (__pyx_temp=0; __pyx_temp < ((__pyx_v_ndim - __pyx_t_8) + 1); __pyx_temp++) {
            __Pyx_INCREF(__pyx_slice__4);
            __Pyx_GIVEREF(__pyx_slice__4);
            PyList_SET_ITEM(__pyx_t_7, __pyx_temp, __pyx_slice__4);
          }
        }
        __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 678, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":679
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             else:
 *                 result.append(slice(None))
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":677
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 *                 seen_ellipsis = True
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":681
 *                 seen_ellipsis = True
 *             else:
 *                 result.append(slice(None))             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
      /*else*/ {
        __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_slice__4); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 681, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":682
 *             else:
 *                 result.append(slice(None))
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":676
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 result.extend([slice(None)] * (ndim - len(tup) + 1))
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":684
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      __pyx_t_10 = ((!(__pyx_t_2 != 0)) != 0);
      if (__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = ((!(PyIndex_Check(__pyx_v_item) != 0)) != 0);
      __pyx_t_1 = __pyx_t_10;
      __pyx_L9_bool_binop_done:;
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":685
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):
 *                 raise TypeError("Cannot index with type '%s'" % type(item))             # <<<<<<<<<<<<<<
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 */
        __pyx_t_7 = __Pyx_PyString_FormatSafe(__pyx_kp_s_Cannot_index_with_type_s, ((PyObject *)Py_TYPE(__pyx_v_item))); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 685, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 685, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_Raise(__pyx_t_11, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __PYX_ERR(1, 685, __pyx_L1_error)

        /* "View.MemoryView":684
 *             have_slices = True
 *         else:
 *             if not isinstance(item, slice) and not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 */
      }

      /* "View.MemoryView":687
 *                 raise TypeError("Cannot index with type '%s'" % type(item))
 * 
 *             have_slices = have_slices or isinstance(item, slice)             # <<<<<<<<<<<<<<
 *             result.append(item)
 * 
 */
      __pyx_t_10 = (__pyx_v_have_slices != 0);
      if (!__pyx_t_10) {
      } else {
        __pyx_t_1 = __pyx_t_10;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = PySlice_Check(__pyx_v_item); 
      __pyx_t_2 = (__pyx_t_10 != 0);
      __pyx_t_1 = __pyx_t_2;
      __pyx_L11_bool_binop_done:;
      __pyx_v_have_slices = __pyx_t_1;

      /* "View.MemoryView":688
 * 
 *             have_slices = have_slices or isinstance(item, slice)
 *             result.append(item)             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - len(result)
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_result, __pyx_v_item); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 688, __pyx_L1_error)
    }
    __pyx_L6:;

    /* "View.MemoryView":675
 *     have_slices = False
 *     seen_ellipsis = False
 *     for idx, item in enumerate(tup):             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":690
 *             result.append(item)
 * 
 *     nslices = ndim - len(result)             # <<<<<<<<<<<<<<
 *     if nslices:
 *         result.extend([slice(None)] * nslices)
 */
  __pyx_t_5 = PyList_GET_SIZE(__pyx_v_result); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(1, 690, __pyx_L1_error)
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_t_5);

  /* "View.MemoryView":691
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  __pyx_t_1 = (__pyx_v_nslices != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":692
 *     nslices = ndim - len(result)
 *     if nslices:
 *         result.extend([slice(None)] * nslices)             # <<<<<<<<<<<<<<
 * 
 *     return have_slices or nslices, tuple(result)
 */
    __pyx_t_3 = PyList_New(1 * ((__pyx_v_nslices<0) ? 0:__pyx_v_nslices)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_v_nslices; __pyx_temp++) {
        __Pyx_INCREF(__pyx_slice__4);
        __Pyx_GIVEREF(__pyx_slice__4);
        PyList_SET_ITEM(__pyx_t_3, __pyx_temp, __pyx_slice__4);
      }
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_result, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 692, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "View.MemoryView":691
 * 
 *     nslices = ndim - len(result)
 *     if nslices:             # <<<<<<<<<<<<<<
 *         result.extend([slice(None)] * nslices)
 * 
 */
  }

  /* "View.MemoryView":694
 *         result.extend([slice(None)] * nslices)
 * 
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L14_bool_binop_done;
  }
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_L14_bool_binop_done:;
  __pyx_t_4 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_4);
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":662
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":696
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static PyObject *assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("assert_direct_dimensions", 0);

  /* "View.MemoryView":697
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":698
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    __pyx_t_4 = ((__pyx_v_suboffset >= 0) != 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":699
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 699, __pyx_L1_error)

      /* "View.MemoryView":698
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Indirect dimensions not supported")
 * 
 */
    }
  }

  /* "View.MemoryView":696
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim):             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":706
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_4;
  char *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __Pyx_RefNannySetupContext("memview_slice", 0);

  /* "View.MemoryView":707
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":714
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":718
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    if (unlikely(!((__pyx_v_memview->view.ndim > 0) != 0))) {
      PyErr_SetNone(PyExc_AssertionError);
      __PYX_ERR(1, 718, __pyx_L1_error)
    }
  }
  #endif

  /* "View.MemoryView":720
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":721
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 721, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":722
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":720
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":724
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":725
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":731
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_4;

  /* "View.MemoryView":732
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_5;

  /* "View.MemoryView":737
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":738
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":742
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  __pyx_t_6 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_3 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 742, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 742, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 742, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 742, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_9); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(1, 742, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 742, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 742, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_v_dim = __pyx_t_6;
    __pyx_t_6 = (__pyx_t_6 + 1);

    /* "View.MemoryView":743
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
    __pyx_t_2 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":747
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 *                 index, 0, 0, # start, stop, step             # <<<<<<<<<<<<<<
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 */
      __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 747, __pyx_L1_error)

      /* "View.MemoryView":744
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_t_10, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 744, __pyx_L1_error)

      /* "View.MemoryView":743
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":750
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_2 = (__pyx_v_index == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":751
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":752
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":753
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":754
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":750
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":756
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 756, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 756, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 756, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_10;

      /* "View.MemoryView":757
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 757, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 757, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 757, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_10;

      /* "View.MemoryView":758
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 758, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 758, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      } else {
        __pyx_t_12 = __Pyx_PyIndex_AsSsize_t(__pyx_t_9); if (unlikely((__pyx_t_12 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 758, __pyx_L1_error)
        __pyx_t_10 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_10 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_10;

      /* "View.MemoryView":760
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 760, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":761
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":762
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_1 = (__pyx_t_9 != Py_None);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":764
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_11 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(1, 764, __pyx_L1_error)

      /* "View.MemoryView":770
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":742
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             slice_memviewslice(
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "View.MemoryView":772
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":773
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":774
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 774, __pyx_L1_error) }

    /* "View.MemoryView":775
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(1, 775, __pyx_L1_error) }

    /* "View.MemoryView":773
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 773, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":772
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":778
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(((PyObject *)__pyx_r));

    /* "View.MemoryView":779
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 778, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "View.MemoryView":778
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(1, 778, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_3);
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":706
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":803
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":823
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = ((!(__pyx_v_is_slice != 0)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":825
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = ((__pyx_v_start < 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":826
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":825
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":827
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":828
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"Index out of bounds (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 828, __pyx_L1_error)

      /* "View.MemoryView":827
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":823
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":831
 *     else:
 * 
 *         negative_step = have_step != 0 and step < 0             # <<<<<<<<<<<<<<
 * 
 *         if have_step and step == 0:
 */
  /*else*/ {
    __pyx_t_1 = ((__pyx_v_have_step != 0) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step < 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;
    __pyx_v_negative_step = __pyx_t_2;

    /* "View.MemoryView":833
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    __pyx_t_1 = (__pyx_v_have_step != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L9_bool_binop_done;
    }
    __pyx_t_1 = ((__pyx_v_step == 0) != 0);
    __pyx_t_2 = __pyx_t_1;
    __pyx_L9_bool_binop_done:;
    if (__pyx_t_2) {

      /* "View.MemoryView":834
 * 
 *         if have_step and step == 0:
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Step may not be zero (axis %d)"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 834, __pyx_L1_error)

      /* "View.MemoryView":833
 *         negative_step = have_step != 0 and step < 0
 * 
 *         if have_step and step == 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Step may not be zero (axis %d)", dim)
 * 
 */
    }

    /* "View.MemoryView":837
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":838
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = ((__pyx_v_start < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":839
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":840
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = ((__pyx_v_start < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":841
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":840
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":838
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":842
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = ((__pyx_v_start >= __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":843
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        __pyx_t_2 = (__pyx_v_negative_step != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":844
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":843
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L14;
        }

        /* "View.MemoryView":846
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L14:;

        /* "View.MemoryView":842
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L12:;

      /* "View.MemoryView":837
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L11;
    }

    /* "View.MemoryView":848
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":849
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":848
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L15;
      }

      /* "View.MemoryView":851
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L15:;
    }
    __pyx_L11:;

    /* "View.MemoryView":853
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":854
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":855
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":856
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = ((__pyx_v_stop < 0) != 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":857
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":856
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":854
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L17;
      }

      /* "View.MemoryView":858
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = ((__pyx_v_stop > __pyx_v_shape) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":859
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":858
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L17:;

      /* "View.MemoryView":853
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L16;
    }

    /* "View.MemoryView":861
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      __pyx_t_2 = (__pyx_v_negative_step != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":862
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":861
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L19;
      }

      /* "View.MemoryView":864
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 *         if not have_step:
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L19:;
    }
    __pyx_L16:;

    /* "View.MemoryView":866
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    __pyx_t_2 = ((!(__pyx_v_have_step != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":867
 * 
 *         if not have_step:
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;

      /* "View.MemoryView":866
 *                 stop = shape
 * 
 *         if not have_step:             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    }

    /* "View.MemoryView":871
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":873
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":874
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":873
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":876
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_new_shape < 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":877
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":876
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":880
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":881
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":882
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":885
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = (((__pyx_v_suboffset_dim[0]) < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":886
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":885
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L23;
  }

  /* "View.MemoryView":888
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L23:;

  /* "View.MemoryView":890
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":891
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = ((!(__pyx_v_is_slice != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":892
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = ((__pyx_v_new_ndim == 0) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":893
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":892
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L26;
      }

      /* "View.MemoryView":895
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":896
 *             else:
 *                 _err_dim(IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(__pyx_builtin_IndexError, ((char *)"All dimensions preceding dimension %d must be indexed and not sliced"), __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 895, __pyx_L1_error)
      }
      __pyx_L26:;

      /* "View.MemoryView":891
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L25;
    }

    /* "View.MemoryView":898
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L25:;

    /* "View.MemoryView":890
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":900
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":803
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":906
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("pybuffer_index", 0);

  /* "View.MemoryView":908
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":909
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":912
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = ((__pyx_v_view->ndim == 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":913
 * 
 *     if view.ndim == 0:
 *         shape = view.len / itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(1, 913, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(1, 913, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":914
 *     if view.ndim == 0:
 *         shape = view.len / itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":912
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len / itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":916
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":917
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":918
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = ((__pyx_v_view->suboffsets != NULL) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":919
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":918
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":921
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = ((__pyx_v_index < 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":922
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":923
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    __pyx_t_2 = ((__pyx_v_index < 0) != 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":924
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 924, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 924, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 924, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 924, __pyx_L1_error)

      /* "View.MemoryView":923
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
    }

    /* "View.MemoryView":921
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":926
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_index >= __pyx_v_shape) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":927
 * 
 *     if index >= shape:
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IndexError, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 927, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 927, __pyx_L1_error)

    /* "View.MemoryView":926
 *             raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 */
  }

  /* "View.MemoryView":929
 *         raise IndexError("Out of bounds on buffer access (axis %d)" % dim)
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":930
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = ((__pyx_v_suboffset >= 0) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":931
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":930
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":933
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":906
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":939
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;

  /* "View.MemoryView":940
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":942
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":943
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":947
 * 
 *     cdef int i, j
 *     for i in range(ndim / 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":948
 *     cdef int i, j
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":949
 *     for i in range(ndim / 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":950
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":952
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0) != 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = (((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0) != 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":953
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 1
 */
      __pyx_t_9 = __pyx_memoryview_err(__pyx_builtin_ValueError, ((char *)"Cannot transpose memoryview with indirect dimensions")); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(1, 953, __pyx_L1_error)

      /* "View.MemoryView":952
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":955
 *             _err(ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "View.MemoryView":939
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) nogil except 0:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = 0;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":972
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "View.MemoryView":973
 * 
 *     def __dealloc__(self):
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XDEC_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":972
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":975
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("convert_item_to_object", 0);

  /* "View.MemoryView":976
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_object_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":977
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 977, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":976
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":979
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 979, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":975
 *         __PYX_XDEC_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":981
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("assign_item_from_object", 0);

  /* "View.MemoryView":982
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->to_dtype_func != NULL) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":983
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(1, 983, __pyx_L1_error)

    /* "View.MemoryView":982
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":985
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":981
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":988
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_16_memoryviewslice_4base___get__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "View.MemoryView":989
 *     @property
 *     def base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":988
 * 
 *     @property
 *     def base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":995
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 0);

  /* "View.MemoryView":1003
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = ((((PyObject *)__pyx_v_memviewslice.memview) == Py_None) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1004
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1003
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1009
 * 
 * 
 *     result = _memoryviewslice(None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1011
 *     result = _memoryviewslice(None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1012
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1014
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_memviewslice.memview), __pyx_n_s_base); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 * 
 *     result.from_object = (<memoryview> memviewslice.memview).base
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1017
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1018
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1019
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1020
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1021
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1023
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1024
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1023
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1026
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1028
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1029
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1032
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1033
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1034
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = ((__pyx_v_suboffset >= 0) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1035
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1036
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1034
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1038
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1039
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1039, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1040
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1040, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1040, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1040, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1042
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1043
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1045
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_result));
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":995
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1048
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 0);

  /* "View.MemoryView":1051
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1052
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(1, 1052, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":1053
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1051
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1055
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1056
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1048
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice):
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1059
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  __Pyx_RefNannyDeclarations
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  __Pyx_RefNannySetupContext("slice_copy", 0);

  /* "View.MemoryView":1063
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1064
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1065
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1067
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1068
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1070
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1071
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1072
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1073
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    if ((__pyx_v_suboffsets != 0)) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1059
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst):             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1076
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy", 0);

  /* "View.MemoryView":1079
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1080
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1076
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1083
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *(*__pyx_t_3)(char *);
  int (*__pyx_t_4)(char *, PyObject *);
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 0);

  /* "View.MemoryView":1090
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1091
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_3;

    /* "View.MemoryView":1092
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_4 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_4;

    /* "View.MemoryView":1090
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1094
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1095
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1097
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1099
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_5 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1083
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1105
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":1106
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arg < 0) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1107
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:
 *         return -arg             # <<<<<<<<<<<<<<
 *     else:
 *         return arg
 */
    __pyx_r = (-__pyx_v_arg);
    goto __pyx_L0;

    /* "View.MemoryView":1106
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:
 *     if arg < 0:             # <<<<<<<<<<<<<<
 *         return -arg
 *     else:
 */
  }

  /* "View.MemoryView":1109
 *         return -arg
 *     else:
 *         return arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  /*else*/ {
    __pyx_r = __pyx_v_arg;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1105
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) nogil:             # <<<<<<<<<<<<<<
 *     if arg < 0:
 *         return -arg
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1112
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1117
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1118
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1120
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1121
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1122
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1123
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1121
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1125
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1126
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = (((__pyx_v_mslice->shape[__pyx_v_i]) > 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1127
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1128
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1126
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1130
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = ((abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1131
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1130
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1133
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1112
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1136
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;

  /* "View.MemoryView":1143
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1144
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1145
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1146
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1148
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1149
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = ((__pyx_v_src_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_dst_stride > 0) != 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1150
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_3 = (__pyx_t_2 != 0);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1149
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1151
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *        else:
 *            for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1149
 * 
 *     if ndim == 1:
 *        if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1153
 *            memcpy(dst_data, src_data, itemsize * dst_extent)
 *        else:
 *            for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 */
    /*else*/ {
      __pyx_t_4 = __pyx_v_dst_extent;
      __pyx_t_5 = __pyx_t_4;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "View.MemoryView":1154
 *        else:
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                src_data += src_stride
 *                dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1155
 *            for i in range(dst_extent):
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride             # <<<<<<<<<<<<<<
 *                dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1156
 *                memcpy(dst_data, src_data, itemsize)
 *                src_data += src_stride
 *                dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1148
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *        if (src_stride > 0 and dst_stride > 0 and
 *            <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1158
 *                dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_4 = __pyx_v_dst_extent;
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "View.MemoryView":1159
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1163
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1164
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1136
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1166
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1169
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1166
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1173
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1176
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 *     cdef Py_ssize_t size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1178
 *     cdef Py_ssize_t size = src.memview.view.itemsize
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         size *= src.shape[i]
 * 
 */
  __pyx_t_2 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1179
 * 
 *     for i in range(ndim):
 *         size *= src.shape[i]             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * (__pyx_v_src->shape[__pyx_v_i]));
  }

  /* "View.MemoryView":1181
 *         size *= src.shape[i]
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1173
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef int i
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1184
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1193
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = ((__pyx_v_order == 'F') != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1194
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1195
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1196
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1193
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1198
 *             stride = stride * shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride = stride * shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1199
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride = stride * shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1200
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride = stride * shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1202
 *             stride = stride * shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1184
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1205
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;

  /* "View.MemoryView":1216
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1217
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1219
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err(MemoryError, NULL)
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1220
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_result != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1221
 *     result = malloc(size)
 *     if not result:
 *         _err(MemoryError, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err(__pyx_builtin_MemoryError, NULL); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1221, __pyx_L1_error)

    /* "View.MemoryView":1220
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err(MemoryError, NULL)
 * 
 */
  }

  /* "View.MemoryView":1224
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1225
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1226
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1227
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1228
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1230
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize,             # <<<<<<<<<<<<<<
 *                               ndim, order)
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1234
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1235
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = (((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1236
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1235
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1238
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = (__pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1239
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1238
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1241
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1243
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1205
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = NULL;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1248
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1251
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 *                                                         (i, extent1, extent2))             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_extent1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_extent2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;

  /* "View.MemoryView":1250
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %             # <<<<<<<<<<<<<<
 *                                                         (i, extent1, extent2))
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 1250, __pyx_L1_error)

  /* "View.MemoryView":1248
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError("got differing extents in dimension %d (got %d and %d)" %
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1254
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, char *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1255
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:
 *     raise error(msg.decode('ascii') % dim)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_2 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyUnicode_Format(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_v_error);
  __pyx_t_3 = __pyx_v_error; __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 1255, __pyx_L1_error)

  /* "View.MemoryView":1254
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(object error, char *msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise error(msg.decode('ascii') % dim)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1258
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, char *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_error);

  /* "View.MemoryView":1259
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_msg != NULL) != 0);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":1260
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))             # <<<<<<<<<<<<<<
 *     else:
 *         raise error
 */
    __pyx_t_3 = __Pyx_decode_c_string(__pyx_v_msg, 0, strlen(__pyx_v_msg), NULL, NULL, PyUnicode_DecodeASCII); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_error);
    __pyx_t_4 = __pyx_v_error; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_5, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1260, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1260, __pyx_L1_error)

    /* "View.MemoryView":1259
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:
 *     if msg != NULL:             # <<<<<<<<<<<<<<
 *         raise error(msg.decode('ascii'))
 *     else:
 */
  }

  /* "View.MemoryView":1262
 *         raise error(msg.decode('ascii'))
 *     else:
 *         raise error             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_contents')
 */
  /*else*/ {
    __Pyx_Raise(__pyx_v_error, 0, 0, 0);
    __PYX_ERR(1, 1262, __pyx_L1_error)
  }

  /* "View.MemoryView":1258
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(object error, char *msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     if msg != NULL:
 *         raise error(msg.decode('ascii'))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_error);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1265
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_t_8;

  /* "View.MemoryView":1273
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1274
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1276
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1277
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1278
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1281
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = ((__pyx_v_src_ndim < __pyx_v_dst_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1282
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1281
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1283
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = ((__pyx_v_dst_ndim < __pyx_v_src_ndim) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1284
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1283
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1286
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  if (((__pyx_t_3 > __pyx_t_4) != 0)) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1288
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1289
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i])) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1290
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = (((__pyx_v_src.shape[__pyx_v_i]) == 1) != 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":1291
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1292
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1290
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1294
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1294, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1289
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1296
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = (((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1297
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(__pyx_builtin_ValueError, ((char *)"Dimension %d is not direct"), __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 1297, __pyx_L1_error)

      /* "View.MemoryView":1296
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1299
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = (__pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1301
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = ((!(__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim) != 0)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1302
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1301
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1304
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(1, 1304, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1305
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1299
 *             _err_dim(ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1307
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = ((!(__pyx_v_broadcasting != 0)) != 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":1310
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1311
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1310
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1312
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = (__pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1313
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1312
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1315
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_2 = (__pyx_v_direct_copy != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1317
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1318
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1319
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1320
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1321
 *             refcount_copying(&dst, dtype_is_object, ndim, True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1315
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    }

    /* "View.MemoryView":1307
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1323
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  __pyx_t_8 = (__pyx_t_2 != 0);
  if (__pyx_t_8) {

    /* "View.MemoryView":1326
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1326, __pyx_L1_error)

    /* "View.MemoryView":1327
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)0))) __PYX_ERR(1, 1327, __pyx_L1_error)

    /* "View.MemoryView":1323
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1329
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1330
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1331
 *     refcount_copying(&dst, dtype_is_object, ndim, False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1333
 *     refcount_copying(&dst, dtype_is_object, ndim, True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1334
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1265
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
    #endif
    __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
    #ifdef WITH_THREAD
    __Pyx_PyGILState_Release(__pyx_gilstate_save);
    #endif
  }
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1337
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1341
 *                             int ndim_other) nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1343
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1344
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1345
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1346
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1348
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1349
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1350
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1351
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1337
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1359
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {
  int __pyx_t_1;

  /* "View.MemoryView":1363
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  __pyx_t_1 = (__pyx_v_dtype_is_object != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1364
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,             # <<<<<<<<<<<<<<
 *                                            dst.strides, ndim, inc)
 * 
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1363
 * 
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape,
 *                                            dst.strides, ndim, inc)
 */
  }

  /* "View.MemoryView":1359
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object,             # <<<<<<<<<<<<<<
 *                            int ndim, bint inc) nogil:
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":1368
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  __Pyx_RefNannyDeclarations
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("refcount_objects_in_slice_with_gil", 0);

  /* "View.MemoryView":1371
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1368
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) with gil:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1374
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  __Pyx_RefNannySetupContext("refcount_objects_in_slice", 0);

  /* "View.MemoryView":1378
 *     cdef Py_ssize_t i
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1379
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = ((__pyx_v_ndim == 1) != 0);
    if (__pyx_t_4) {

      /* "View.MemoryView":1380
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      __pyx_t_4 = (__pyx_v_inc != 0);
      if (__pyx_t_4) {

        /* "View.MemoryView":1381
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1380
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1383
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1379
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1385
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                       ndim - 1, inc)
 * 
 */
    /*else*/ {

      /* "View.MemoryView":1386
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1,
 *                                       ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += strides[0]
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1388
 *                                       ndim - 1, inc)
 * 
 *         data += strides[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + (__pyx_v_strides[0]));
  }

  /* "View.MemoryView":1374
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc):
 *     cdef Py_ssize_t i
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "View.MemoryView":1394
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1397
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1398
 *                               bint dtype_is_object) nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,             # <<<<<<<<<<<<<<
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1400
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim,
 *                          itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1394
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1404
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1408
 *                               size_t itemsize, void *item) nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1409
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1411
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = ((__pyx_v_ndim == 1) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1412
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1413
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1414
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1411
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1416
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1417
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1,             # <<<<<<<<<<<<<<
 *                                 ndim - 1, itemsize, item)
 *             data += stride
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1419
 *             _slice_assign_scalar(data, shape + 1, strides + 1,
 *                                 ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1404
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xb068931) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xb068931:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_v___pyx_PickleError);
    __pyx_t_2 = __pyx_v___pyx_PickleError; __pyx_t_5 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xb068931:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_v___pyx_type) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v___pyx_type);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v___pyx_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_v___pyx_state)->tp_name), 0))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_3 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError("Incompatible checksums (%s vs 0xb068931 = (name))" % __pyx_checksum)
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = (__pyx_t_4 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_update); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    __pyx_t_1 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_7, __pyx_t_8, __pyx_t_6) : __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRPose __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRPose;

static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRPose(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)o);
  p->__pyx_vtab = __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPose;
  p->_pos = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_ori = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRPose(PyObject *o) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_pos);
  Py_CLEAR(p->_ori);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7psychxr_6libovr_7_libovr_LibOVRPose(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)o;
  if (p->_pos) {
    e = (*v)(((PyObject *)p->_pos), a); if (e) return e;
  }
  if (p->_ori) {
    e = (*v)(((PyObject *)p->_ori), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7psychxr_6libovr_7_libovr_LibOVRPose(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)o;
  tmp = ((PyObject*)p->_pos);
  p->_pos = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_ori);
  p->_ori = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_tp_richcompare_7psychxr_6libovr_7_libovr_LibOVRPose(PyObject *o1, PyObject *o2, int op) {
  switch (op) {
    case Py_EQ: {
      return __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_11__eq__(o1, o2);
    }
    case Py_NE: {
      return __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_13__ne__(o1, o2);
    }
    default: {
      return __Pyx_NewRef(Py_NotImplemented);
    }
  }
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_10LibOVRPose_pos(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos_1__get__(o);
}

static int __pyx_setprop_7psychxr_6libovr_7_libovr_10LibOVRPose_pos(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3pos_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_10LibOVRPose_ori(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori_1__get__(o);
}

static int __pyx_setprop_7psychxr_6libovr_7_libovr_10LibOVRPose_ori(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_3ori_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_10LibOVRPose_posOri(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri_1__get__(o);
}

static int __pyx_setprop_7psychxr_6libovr_7_libovr_10LibOVRPose_posOri(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_6posOri_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_10LibOVRPose_at(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_2at_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_10LibOVRPose_up(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_2up_1__get__(o);
}

static PyMethodDef __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRPose[] = {
  {"setIdentity", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_17setIdentity, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_16setIdentity},
  {"getAt", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_19getAt, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_18getAt},
  {"getUp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_21getUp, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_20getUp},
  {"getYawPitchRoll", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_23getYawPitchRoll, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_22getYawPitchRoll},
  {"getTransformMatrix", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_25getTransformMatrix, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_24getTransformMatrix},
  {"normalize", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_27normalize, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_26normalize},
  {"inverted", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_29inverted, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_28inverted},
  {"rotate", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_31rotate, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_30rotate},
  {"inverseRotate", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_33inverseRotate, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_32inverseRotate},
  {"translate", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_35translate, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_34translate},
  {"transform", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_37transform, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_36transform},
  {"inverseTransform", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_39inverseTransform, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_38inverseTransform},
  {"transformNormal", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_41transformNormal, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_40transformNormal},
  {"inverseTransformNormal", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_43inverseTransformNormal, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_42inverseTransformNormal},
  {"apply", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_45apply, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_44apply},
  {"distanceTo", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_47distanceTo, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_46distanceTo},
  {"raycastSphere", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_49raycastSphere, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_48raycastSphere},
  {"interp", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_51interp, METH_VARARGS|METH_KEYWORDS, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_50interp},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_53__reduce_cython__, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_52__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_55__setstate_cython__, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_54__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRPose[] = {
  {(char *)"pos", __pyx_getprop_7psychxr_6libovr_7_libovr_10LibOVRPose_pos, __pyx_setprop_7psychxr_6libovr_7_libovr_10LibOVRPose_pos, (char *)0, 0},
  {(char *)"ori", __pyx_getprop_7psychxr_6libovr_7_libovr_10LibOVRPose_ori, __pyx_setprop_7psychxr_6libovr_7_libovr_10LibOVRPose_ori, (char *)0, 0},
  {(char *)"posOri", __pyx_getprop_7psychxr_6libovr_7_libovr_10LibOVRPose_posOri, __pyx_setprop_7psychxr_6libovr_7_libovr_10LibOVRPose_posOri, (char *)0, 0},
  {(char *)"at", __pyx_getprop_7psychxr_6libovr_7_libovr_10LibOVRPose_at, 0, (char *)0, 0},
  {(char *)"up", __pyx_getprop_7psychxr_6libovr_7_libovr_10LibOVRPose_up, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_LibOVRPose = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_7__mul__, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_9__invert__, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || (CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03050000)
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PyTypeObject __pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose = {
  PyVarObject_HEAD_INIT(0, 0)
  "psychxr.libovr._libovr.LibOVRPose", /*tp_name*/
  sizeof(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRPose, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_LibOVRPose, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_15__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "LibOVRPose(pos=(0., 0., 0.), ori=(0., 0., 0., 1.))\nClass for LibOVR rigid body pose.\n\n    Poses are represented as a position vector/coordinate and orientation\n    quaternion.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_7psychxr_6libovr_7_libovr_LibOVRPose, /*tp_traverse*/
  __pyx_tp_clear_7psychxr_6libovr_7_libovr_LibOVRPose, /*tp_clear*/
  __pyx_tp_richcompare_7psychxr_6libovr_7_libovr_LibOVRPose, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRPose, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRPose, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7psychxr_6libovr_7_libovr_10LibOVRPose_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRPose, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRPoseState __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRPoseState;

static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRPoseState(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)o);
  p->__pyx_vtab = __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPoseState;
  p->_pose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)Py_None); Py_INCREF(Py_None);
  p->_linearVelocity = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_angularVelocity = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_linearAcceleration = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  p->_angularAcceleration = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRPoseState(PyObject *o) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_pose);
  Py_CLEAR(p->_linearVelocity);
  Py_CLEAR(p->_angularVelocity);
  Py_CLEAR(p->_linearAcceleration);
  Py_CLEAR(p->_angularAcceleration);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7psychxr_6libovr_7_libovr_LibOVRPoseState(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)o;
  if (p->_pose) {
    e = (*v)(((PyObject *)p->_pose), a); if (e) return e;
  }
  if (p->_linearVelocity) {
    e = (*v)(((PyObject *)p->_linearVelocity), a); if (e) return e;
  }
  if (p->_angularVelocity) {
    e = (*v)(((PyObject *)p->_angularVelocity), a); if (e) return e;
  }
  if (p->_linearAcceleration) {
    e = (*v)(((PyObject *)p->_linearAcceleration), a); if (e) return e;
  }
  if (p->_angularAcceleration) {
    e = (*v)(((PyObject *)p->_angularAcceleration), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7psychxr_6libovr_7_libovr_LibOVRPoseState(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)o;
  tmp = ((PyObject*)p->_pose);
  p->_pose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_linearVelocity);
  p->_linearVelocity = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_angularVelocity);
  p->_angularVelocity = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_linearAcceleration);
  p->_linearAcceleration = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_angularAcceleration);
  p->_angularAcceleration = ((PyArrayObject *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_pose(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose_1__get__(o);
}

static int __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_pose(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_4pose_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_angularVelocity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity_1__get__(o);
}

static int __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_angularVelocity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_15angularVelocity_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_linearVelocity(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity_1__get__(o);
}

static int __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_linearVelocity(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_14linearVelocity_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_angularAcceleration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration_1__get__(o);
}

static int __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_angularAcceleration(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_19angularAcceleration_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_linearAcceleration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration_1__get__(o);
}

static int __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_linearAcceleration(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_18linearAcceleration_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_timeInSeconds(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds_1__get__(o);
}

static int __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_timeInSeconds(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_13timeInSeconds_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRPoseState[] = {
  {"timeIntegrate", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_7timeIntegrate, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRPoseState_6timeIntegrate},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_9__reduce_cython__, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRPoseState_8__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_11__setstate_cython__, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRPoseState_10__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRPoseState[] = {
  {(char *)"pose", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_pose, __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_pose, (char *)0, 0},
  {(char *)"angularVelocity", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_angularVelocity, __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_angularVelocity, (char *)0, 0},
  {(char *)"linearVelocity", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_linearVelocity, __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_linearVelocity, (char *)0, 0},
  {(char *)"angularAcceleration", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_angularAcceleration, __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_angularAcceleration, (char *)0, 0},
  {(char *)"linearAcceleration", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_linearAcceleration, __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_linearAcceleration, (char *)0, 0},
  {(char *)"timeInSeconds", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_timeInSeconds, __pyx_setprop_7psychxr_6libovr_7_libovr_15LibOVRPoseState_timeInSeconds, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7psychxr_6libovr_7_libovr_LibOVRPoseState = {
  PyVarObject_HEAD_INIT(0, 0)
  "psychxr.libovr._libovr.LibOVRPoseState", /*tp_name*/
  sizeof(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRPoseState, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "LibOVRPoseState()\nClass for data about rigid body configuration with derivatives computed\n    by the LibOVR runtime.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_7psychxr_6libovr_7_libovr_LibOVRPoseState, /*tp_traverse*/
  __pyx_tp_clear_7psychxr_6libovr_7_libovr_LibOVRPoseState, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRPoseState, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRPoseState, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRPoseState_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRPoseState, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRTrackingState __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRTrackingState;

static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRTrackingState(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)o);
  p->__pyx_vtab = __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRTrackingState;
  p->_headPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)Py_None); Py_INCREF(Py_None);
  p->_leftHandPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)Py_None); Py_INCREF(Py_None);
  p->_rightHandPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)Py_None); Py_INCREF(Py_None);
  p->_calibratedOrigin = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRTrackingState(PyObject *o) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->_headPose);
  Py_CLEAR(p->_leftHandPose);
  Py_CLEAR(p->_rightHandPose);
  Py_CLEAR(p->_calibratedOrigin);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7psychxr_6libovr_7_libovr_LibOVRTrackingState(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)o;
  if (p->_headPose) {
    e = (*v)(((PyObject *)p->_headPose), a); if (e) return e;
  }
  if (p->_leftHandPose) {
    e = (*v)(((PyObject *)p->_leftHandPose), a); if (e) return e;
  }
  if (p->_rightHandPose) {
    e = (*v)(((PyObject *)p->_rightHandPose), a); if (e) return e;
  }
  if (p->_calibratedOrigin) {
    e = (*v)(((PyObject *)p->_calibratedOrigin), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7psychxr_6libovr_7_libovr_LibOVRTrackingState(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *)o;
  tmp = ((PyObject*)p->_headPose);
  p->_headPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_leftHandPose);
  p->_leftHandPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_rightHandPose);
  p->_rightHandPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_calibratedOrigin);
  p->_calibratedOrigin = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_headPose(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_8headPose_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_headStatus(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10headStatus_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_handPoses(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_9handPoses_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_handStatus(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_10handStatus_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_calibratedOrigin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_16calibratedOrigin_1__get__(o);
}

static PyMethodDef __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRTrackingState[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_7__reduce_cython__, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_9__setstate_cython__, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRTrackingState[] = {
  {(char *)"headPose", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_headPose, 0, (char *)0, 0},
  {(char *)"headStatus", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_headStatus, 0, (char *)0, 0},
  {(char *)"handPoses", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_handPoses, 0, (char *)0, 0},
  {(char *)"handStatus", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_handStatus, 0, (char *)0, 0},
  {(char *)"calibratedOrigin", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_calibratedOrigin, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackingState = {
  PyVarObject_HEAD_INIT(0, 0)
  "psychxr.libovr._libovr.LibOVRTrackingState", /*tp_name*/
  sizeof(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRTrackingState, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "LibOVRTrackingState()\nClass for tracking state information.", /*tp_doc*/
  __pyx_tp_traverse_7psychxr_6libovr_7_libovr_LibOVRTrackingState, /*tp_traverse*/
  __pyx_tp_clear_7psychxr_6libovr_7_libovr_LibOVRTrackingState, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRTrackingState, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRTrackingState, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRTrackingState, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)o);
  p->_pose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)Py_None); Py_INCREF(Py_None);
  p->_leveledPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo(PyObject *o) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_pose);
  Py_CLEAR(p->_leveledPose);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)o;
  if (p->_pose) {
    e = (*v)(((PyObject *)p->_pose), a); if (e) return e;
  }
  if (p->_leveledPose) {
    e = (*v)(((PyObject *)p->_leveledPose), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *p = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo *)o;
  tmp = ((PyObject*)p->_pose);
  p->_pose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_leveledPose);
  p->_leveledPose = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_trackerIndex(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_12trackerIndex_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_pose(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4pose_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_leveledPose(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11leveledPose_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_isConnected(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11isConnected_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_isPoseTracked(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13isPoseTracked_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_frustum(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_7frustum_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_horizontalFov(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_13horizontalFov_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_verticalFov(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_11verticalFov_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_nearZ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_5nearZ_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_farZ(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4farZ_1__get__(o);
}

static PyMethodDef __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_5__reduce_cython__, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_4__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_7__setstate_cython__, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_6__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo[] = {
  {(char *)"trackerIndex", __pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_trackerIndex, 0, (char *)0, 0},
  {(char *)"pose", __pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_pose, 0, (char *)0, 0},
  {(char *)"leveledPose", __pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_leveledPose, 0, (char *)0, 0},
  {(char *)"isConnected", __pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_isConnected, 0, (char *)0, 0},
  {(char *)"isPoseTracked", __pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_isPoseTracked, 0, (char *)0, 0},
  {(char *)"frustum", __pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_frustum, 0, (char *)0, 0},
  {(char *)"horizontalFov", __pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_horizontalFov, 0, (char *)0, 0},
  {(char *)"verticalFov", __pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_verticalFov, 0, (char *)0, 0},
  {(char *)"nearZ", __pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_nearZ, 0, (char *)0, 0},
  {(char *)"farZ", __pyx_getprop_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_farZ, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo = {
  PyVarObject_HEAD_INIT(0, 0)
  "psychxr.libovr._libovr.LibOVRTrackerInfo", /*tp_name*/
  sizeof(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "LibOVRTrackerInfo()\nClass for information about camera-based tracking sensors.\n\n    ", /*tp_doc*/
  __pyx_tp_traverse_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo, /*tp_traverse*/
  __pyx_tp_clear_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRSessionStatus __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRSessionStatus;

static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRSessionStatus(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *)o);
  p->__pyx_vtab = __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRSessionStatus;
  if (unlikely(__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRSessionStatus(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_isVisible(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_9isVisible_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_hmdPresent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdPresent_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_hmdMounted(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10hmdMounted_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_displayLost(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_11displayLost_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_shouldQuit(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_10shouldQuit_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_shouldRecenter(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14shouldRecenter_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_hasInputFocus(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_13hasInputFocus_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_overlayPresent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14overlayPresent_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_depthRequested(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_14depthRequested_1__get__(o);
}

static PyMethodDef __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRSessionStatus[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_7__reduce_cython__, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_9__setstate_cython__, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRSessionStatus[] = {
  {(char *)"isVisible", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_isVisible, 0, (char *)"True if the application has focus and visible in the HMD.", 0},
  {(char *)"hmdPresent", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_hmdPresent, 0, (char *)"True if the HMD is present.", 0},
  {(char *)"hmdMounted", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_hmdMounted, 0, (char *)"True if the HMD is on the user's head.", 0},
  {(char *)"displayLost", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_displayLost, 0, (char *)"True if the the display was lost.", 0},
  {(char *)"shouldQuit", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_shouldQuit, 0, (char *)"True if the application was signaled to quit.", 0},
  {(char *)"shouldRecenter", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_shouldRecenter, 0, (char *)"True if the application was signaled to re-center.", 0},
  {(char *)"hasInputFocus", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_hasInputFocus, 0, (char *)"True if the application has input focus.", 0},
  {(char *)"overlayPresent", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_overlayPresent, 0, (char *)"True if the system overlay is present.", 0},
  {(char *)"depthRequested", __pyx_getprop_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_depthRequested, 0, (char *)"True if the system requires a depth texture. Currently unused by\n        PsychXR.", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7psychxr_6libovr_7_libovr_LibOVRSessionStatus = {
  PyVarObject_HEAD_INIT(0, 0)
  "psychxr.libovr._libovr.LibOVRSessionStatus", /*tp_name*/
  sizeof(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRSessionStatus, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "LibOVRSessionStatus()\nClass for session status information.\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRSessionStatus, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRSessionStatus, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRSessionStatus, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_7psychxr_6libovr_7_libovr_LibOVRHmdInfo __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRHmdInfo;

static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRHmdInfo(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *)o);
  p->__pyx_vtab = __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRHmdInfo;
  if (unlikely(__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_3__cinit__(o, __pyx_empty_tuple, NULL) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRHmdInfo(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_productName(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11productName_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_manufacturer(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12manufacturer_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_serialNumber(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_12serialNumber_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_resolution(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_10resolution_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_refreshRate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_11refreshRate_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_hid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_3hid_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_firmwareVersion(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15firmwareVersion_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_defaultEyeFov(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_13defaultEyeFov_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_maxEyeFov(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_9maxEyeFov_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_symmetricEyeFov(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_15symmetricEyeFov_1__get__(o);
}

static PyMethodDef __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRHmdInfo[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_7__reduce_cython__, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_6__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_9__setstate_cython__, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_8__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRHmdInfo[] = {
  {(char *)"productName", __pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_productName, 0, (char *)"Get the product name for this device.\n\n        Returns\n        -------\n        str\n            Product name string (utf-8).\n\n        ", 0},
  {(char *)"manufacturer", __pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_manufacturer, 0, (char *)"Get the device manufacturer name.\n\n        Returns\n        -------\n        str\n            Manufacturer name string (utf-8).\n\n        ", 0},
  {(char *)"serialNumber", __pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_serialNumber, 0, (char *)"Get the device serial number.\n\n        Returns\n        -------\n        str\n            Serial number (utf-8).\n\n        ", 0},
  {(char *)"resolution", __pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_resolution, 0, (char *)"Horizontal and vertical resolution of the display in pixels.\n\n        Returns\n        -------\n        ndarray of int\n            Resolution of the display [w, h].\n\n        ", 0},
  {(char *)"refreshRate", __pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_refreshRate, 0, (char *)"Nominal refresh rate in Hertz of the display.\n\n        Returns\n        -------\n        float\n            Refresh rate in Hz.\n\n        ", 0},
  {(char *)"hid", __pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_hid, 0, (char *)"USB human interface device class identifiers.\n\n        Returns\n        -------\n        tuple\n            USB HIDs (vendor, product).\n\n        ", 0},
  {(char *)"firmwareVersion", __pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_firmwareVersion, 0, (char *)"Firmware version for this device.\n\n        Returns\n        -------\n        tuple\n            Firmware version (major, minor).\n\n        ", 0},
  {(char *)"defaultEyeFov", __pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_defaultEyeFov, 0, (char *)"Default or recommended eye field-of-views (FOVs) provided by the API.\n\n        Returns\n        -------\n        tuple of ndarray\n            Pair of left and right eye FOVs specified as tangent angles [Up,\n            Down, Left, Right].\n\n        ", 0},
  {(char *)"maxEyeFov", __pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_maxEyeFov, 0, (char *)"Maximum eye field-of-views (FOVs) provided by the API.\n\n        Returns\n        -------\n        tuple of ndarray\n            Pair of left and right eye FOVs specified as tangent angles in\n            radians [Up, Down, Left, Right].\n\n        ", 0},
  {(char *)"symmetricEyeFov", __pyx_getprop_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_symmetricEyeFov, 0, (char *)"Symmetric field-of-views (FOVs) for mono rendering.\n\n        By default, the Rift uses off-axis FOVs. These frustum parameters make\n        it difficult to converge monoscopic stimuli.\n\n        Returns\n        -------\n        tuple of ndarray of float\n            Pair of left and right eye FOVs specified as tangent angles in\n            radians [Up, Down, Left, Right]. Both FOV objects will have the same\n            values.\n\n        ", 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7psychxr_6libovr_7_libovr_LibOVRHmdInfo = {
  PyVarObject_HEAD_INIT(0, 0)
  "psychxr.libovr._libovr.LibOVRHmdInfo", /*tp_name*/
  sizeof(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRHmdInfo, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "LibOVRHmdInfo()\nClass for HMD information returned by 'getHmdInfo'.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRHmdInfo, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRHmdInfo, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRHmdInfo, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRFrameStat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRFrameStat(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_hmdVsyncIndex(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13hmdVsyncIndex_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_appFrameIndex(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_13appFrameIndex_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_appDroppedFrameCount(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20appDroppedFrameCount_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_appQueueAheadTime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appQueueAheadTime_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_appCpuElapsedTime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appCpuElapsedTime_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_appGpuElapsedTime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17appGpuElapsedTime_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorFrameIndex(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_20compositorFrameIndex_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorLatency(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_17compositorLatency_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorCpuElapsedTime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorCpuElapsedTime_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorGpuElapsedTime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_24compositorGpuElapsedTime_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorCpuStartToGpuEndElapsedTime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_37compositorCpuStartToGpuEndElapsedTime_1__get__(o);
}

static PyObject *__pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorGpuEndToVsyncElapsedTime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_34compositorGpuEndToVsyncElapsedTime_1__get__(o);
}

static PyMethodDef __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRFrameStat[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_3__reduce_cython__, METH_NOARGS, __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_2__reduce_cython__},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_5__setstate_cython__, METH_O, __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_4__setstate_cython__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRFrameStat[] = {
  {(char *)"hmdVsyncIndex", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_hmdVsyncIndex, 0, (char *)"Frame index the stats refer to. This increments on the HMD's vertical\n        synchronization signal.\n\n        ", 0},
  {(char *)"appFrameIndex", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_appFrameIndex, 0, (char *)"Increments every time the application submits a frame to the\n        compositor.\n\n        ", 0},
  {(char *)"appDroppedFrameCount", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_appDroppedFrameCount, 0, (char *)0, 0},
  {(char *)"appQueueAheadTime", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_appQueueAheadTime, 0, (char *)0, 0},
  {(char *)"appCpuElapsedTime", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_appCpuElapsedTime, 0, (char *)0, 0},
  {(char *)"appGpuElapsedTime", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_appGpuElapsedTime, 0, (char *)0, 0},
  {(char *)"compositorFrameIndex", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorFrameIndex, 0, (char *)0, 0},
  {(char *)"compositorLatency", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorLatency, 0, (char *)0, 0},
  {(char *)"compositorCpuElapsedTime", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorCpuElapsedTime, 0, (char *)0, 0},
  {(char *)"compositorGpuElapsedTime", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorGpuElapsedTime, 0, (char *)0, 0},
  {(char *)"compositorCpuStartToGpuEndElapsedTime", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorCpuStartToGpuEndElapsedTime, 0, (char *)0, 0},
  {(char *)"compositorGpuEndToVsyncElapsedTime", __pyx_getprop_7psychxr_6libovr_7_libovr_15LibOVRFrameStat_compositorGpuEndToVsyncElapsedTime, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_7psychxr_6libovr_7_libovr_LibOVRFrameStat = {
  PyVarObject_HEAD_INIT(0, 0)
  "psychxr.libovr._libovr.LibOVRFrameStat", /*tp_name*/
  sizeof(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRFrameStat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_7psychxr_6libovr_7_libovr_LibOVRFrameStat, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Performance stats for a compositor frame.\n\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_7psychxr_6libovr_7_libovr_LibOVRFrameStat, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_7psychxr_6libovr_7_libovr_LibOVRFrameStat, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_7psychxr_6libovr_7_libovr_LibOVRFrameStat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_array___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_array_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_array_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "psychxr.libovr._libovr.array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "psychxr.libovr._libovr.Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryview___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"is_c_contig", (PyCFunction)__pyx_memoryview_is_c_contig, METH_NOARGS, 0},
  {"is_f_contig", (PyCFunction)__pyx_memoryview_is_f_contig, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_memoryview_copy, METH_NOARGS, 0},
  {"copy_fortran", (PyCFunction)__pyx_memoryview_copy_fortran, METH_NOARGS, 0},
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryview_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "psychxr.libovr._libovr.memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_memoryviewslice___dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XDEC_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyObject *__pyx_getprop___pyx_memoryviewslice_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_16_memoryviewslice_4base_1__get__(o);
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets__memoryviewslice[] = {
  {(char *)"base", __pyx_getprop___pyx_memoryviewslice_base, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "psychxr.libovr._libovr._memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Internal class for passing memoryview slices to Python", /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets__memoryviewslice, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__libovr(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__libovr},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_libovr",
    __pyx_k_This_extension_module_exposes_th, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_s_0_2_0, __pyx_k_0_2_0, sizeof(__pyx_k_0_2_0), 0, 0, 1, 0},
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
  {&__pyx_n_s_AppRenderTiming, __pyx_k_AppRenderTiming, sizeof(__pyx_k_AppRenderTiming), 0, 0, 1, 1},
  {&__pyx_n_s_AswStats, __pyx_k_AswStats, sizeof(__pyx_k_AswStats), 0, 0, 1, 1},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_Back, __pyx_k_Back, sizeof(__pyx_k_Back), 0, 0, 1, 1},
  {&__pyx_n_s_Beta, __pyx_k_Beta, sizeof(__pyx_k_Beta), 0, 0, 1, 1},
  {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
  {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_get_buffer_ID_NULL_eye_bu, __pyx_k_Cannot_get_buffer_ID_NULL_eye_bu, sizeof(__pyx_k_Cannot_get_buffer_ID_NULL_eye_bu), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_get_swap_chain_length_NUL, __pyx_k_Cannot_get_swap_chain_length_NUL, sizeof(__pyx_k_Cannot_get_swap_chain_length_NUL), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_index_with_type_s, __pyx_k_Cannot_index_with_type_s, sizeof(__pyx_k_Cannot_index_with_type_s), 0, 0, 1, 0},
  {&__pyx_n_s_CompRenderTiming, __pyx_k_CompRenderTiming, sizeof(__pyx_k_CompRenderTiming), 0, 0, 1, 1},
  {&__pyx_kp_s_Copyright_2019_Matthew_D_Cutone, __pyx_k_Copyright_2019_Matthew_D_Cutone, sizeof(__pyx_k_Copyright_2019_Matthew_D_Cutone), 0, 0, 1, 0},
  {&__pyx_n_s_Default, __pyx_k_Default, sizeof(__pyx_k_Default), 0, 0, 1, 1},
  {&__pyx_n_s_Down, __pyx_k_Down, sizeof(__pyx_k_Down), 0, 0, 1, 1},
  {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
  {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
  {&__pyx_n_s_Enter, __pyx_k_Enter, sizeof(__pyx_k_Enter), 0, 0, 1, 1},
  {&__pyx_kp_s_Failed_to_allocate_array_deviceP, __pyx_k_Failed_to_allocate_array_deviceP, sizeof(__pyx_k_Failed_to_allocate_array_deviceP), 0, 0, 1, 0},
  {&__pyx_kp_s_Failed_to_allocate_array_devices, __pyx_k_Failed_to_allocate_array_devices, sizeof(__pyx_k_Failed_to_allocate_array_devices), 0, 0, 1, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_kp_s_Frame_stats_index_out_of_range, __pyx_k_Frame_stats_index_out_of_range, sizeof(__pyx_k_Frame_stats_index_out_of_range), 0, 0, 1, 0},
  {&__pyx_n_s_Home, __pyx_k_Home, sizeof(__pyx_k_Home), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_IncludeGuardian, __pyx_k_IncludeGuardian, sizeof(__pyx_k_IncludeGuardian), 0, 0, 1, 1},
  {&__pyx_n_s_IncludeNotifications, __pyx_k_IncludeNotifications, sizeof(__pyx_k_IncludeNotifications), 0, 0, 1, 1},
  {&__pyx_n_s_IncludeSystemGui, __pyx_k_IncludeSystemGui, sizeof(__pyx_k_IncludeSystemGui), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xb0, __pyx_k_Incompatible_checksums_s_vs_0xb0, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xb0), 0, 0, 1, 0},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_boundary_type_specified, __pyx_k_Invalid_boundary_type_specified, sizeof(__pyx_k_Invalid_boundary_type_specified), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_controller_type_specifie, __pyx_k_Invalid_controller_type_specifie, sizeof(__pyx_k_Invalid_controller_type_specifie), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_frequency_specified, __pyx_k_Invalid_frequency_specified, sizeof(__pyx_k_Invalid_frequency_specified), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_performance_HUD_mode_spe, __pyx_k_Invalid_performance_HUD_mode_spe, sizeof(__pyx_k_Invalid_performance_HUD_mode_spe), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_shape_in_axis_d_d, __pyx_k_Invalid_shape_in_axis_d_d, sizeof(__pyx_k_Invalid_shape_in_axis_d_d), 0, 0, 1, 0},
  {&__pyx_kp_s_Invalid_trigger_mode_specified, __pyx_k_Invalid_trigger_mode_specified, sizeof(__pyx_k_Invalid_trigger_mode_specified), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_A, __pyx_k_LIBOVR_BUTTON_A, sizeof(__pyx_k_LIBOVR_BUTTON_A), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_B, __pyx_k_LIBOVR_BUTTON_B, sizeof(__pyx_k_LIBOVR_BUTTON_B), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_BACK, __pyx_k_LIBOVR_BUTTON_BACK, sizeof(__pyx_k_LIBOVR_BUTTON_BACK), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_DOWN, __pyx_k_LIBOVR_BUTTON_DOWN, sizeof(__pyx_k_LIBOVR_BUTTON_DOWN), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_ENTER, __pyx_k_LIBOVR_BUTTON_ENTER, sizeof(__pyx_k_LIBOVR_BUTTON_ENTER), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_HOME, __pyx_k_LIBOVR_BUTTON_HOME, sizeof(__pyx_k_LIBOVR_BUTTON_HOME), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_LEFT, __pyx_k_LIBOVR_BUTTON_LEFT, sizeof(__pyx_k_LIBOVR_BUTTON_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_LMASK, __pyx_k_LIBOVR_BUTTON_LMASK, sizeof(__pyx_k_LIBOVR_BUTTON_LMASK), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_LSHOULDER, __pyx_k_LIBOVR_BUTTON_LSHOULDER, sizeof(__pyx_k_LIBOVR_BUTTON_LSHOULDER), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_LTHUMB, __pyx_k_LIBOVR_BUTTON_LTHUMB, sizeof(__pyx_k_LIBOVR_BUTTON_LTHUMB), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_PRIVATE, __pyx_k_LIBOVR_BUTTON_PRIVATE, sizeof(__pyx_k_LIBOVR_BUTTON_PRIVATE), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_RIGHT, __pyx_k_LIBOVR_BUTTON_RIGHT, sizeof(__pyx_k_LIBOVR_BUTTON_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_RMASK, __pyx_k_LIBOVR_BUTTON_RMASK, sizeof(__pyx_k_LIBOVR_BUTTON_RMASK), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_RSHOULDER, __pyx_k_LIBOVR_BUTTON_RSHOULDER, sizeof(__pyx_k_LIBOVR_BUTTON_RSHOULDER), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_RTHUMB, __pyx_k_LIBOVR_BUTTON_RTHUMB, sizeof(__pyx_k_LIBOVR_BUTTON_RTHUMB), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_UP, __pyx_k_LIBOVR_BUTTON_UP, sizeof(__pyx_k_LIBOVR_BUTTON_UP), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_VOLDOWN, __pyx_k_LIBOVR_BUTTON_VOLDOWN, sizeof(__pyx_k_LIBOVR_BUTTON_VOLDOWN), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_VOLUP, __pyx_k_LIBOVR_BUTTON_VOLUP, sizeof(__pyx_k_LIBOVR_BUTTON_VOLUP), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_X, __pyx_k_LIBOVR_BUTTON_X, sizeof(__pyx_k_LIBOVR_BUTTON_X), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_BUTTON_Y, __pyx_k_LIBOVR_BUTTON_Y, sizeof(__pyx_k_LIBOVR_BUTTON_Y), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH, __pyx_k_LIBOVR_CONTROLLER_TYPE_LTOUCH, sizeof(__pyx_k_LIBOVR_CONTROLLER_TYPE_LTOUCH), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE, __pyx_k_LIBOVR_CONTROLLER_TYPE_REMOTE, sizeof(__pyx_k_LIBOVR_CONTROLLER_TYPE_REMOTE), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH, __pyx_k_LIBOVR_CONTROLLER_TYPE_RTOUCH, sizeof(__pyx_k_LIBOVR_CONTROLLER_TYPE_RTOUCH), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH, __pyx_k_LIBOVR_CONTROLLER_TYPE_TOUCH, sizeof(__pyx_k_LIBOVR_CONTROLLER_TYPE_TOUCH), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX, __pyx_k_LIBOVR_CONTROLLER_TYPE_XBOX, sizeof(__pyx_k_LIBOVR_CONTROLLER_TYPE_XBOX), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_APPLICATION_VISIBLE, __pyx_k_LIBOVR_ERROR_APPLICATION_VISIBLE, sizeof(__pyx_k_LIBOVR_ERROR_APPLICATION_VISIBLE), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_AUDIO_COM_ERROR, __pyx_k_LIBOVR_ERROR_AUDIO_COM_ERROR, sizeof(__pyx_k_LIBOVR_ERROR_AUDIO_COM_ERROR), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_AUDIO_DEVICE_NOT_FO, __pyx_k_LIBOVR_ERROR_AUDIO_DEVICE_NOT_FO, sizeof(__pyx_k_LIBOVR_ERROR_AUDIO_DEVICE_NOT_FO), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_BLACKLISTED_GFX_DRI, __pyx_k_LIBOVR_ERROR_BLACKLISTED_GFX_DRI, sizeof(__pyx_k_LIBOVR_ERROR_BLACKLISTED_GFX_DRI), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_DEST, __pyx_k_LIBOVR_ERROR_CLIENT_SKIPPED_DEST, sizeof(__pyx_k_LIBOVR_ERROR_CLIENT_SKIPPED_DEST), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_SHUT, __pyx_k_LIBOVR_ERROR_CLIENT_SKIPPED_SHUT, sizeof(__pyx_k_LIBOVR_ERROR_CLIENT_SKIPPED_SHUT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_CLIENT_VERSION, __pyx_k_LIBOVR_ERROR_CLIENT_VERSION, sizeof(__pyx_k_LIBOVR_ERROR_CLIENT_VERSION), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_CONTENT_PROTECTION, __pyx_k_LIBOVR_ERROR_CONTENT_PROTECTION, sizeof(__pyx_k_LIBOVR_ERROR_CONTENT_PROTECTION), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_DEVICE_UNAVAILABLE, __pyx_k_LIBOVR_ERROR_DEVICE_UNAVAILABLE, sizeof(__pyx_k_LIBOVR_ERROR_DEVICE_UNAVAILABLE), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_DISABLED_OR_DEFAULT, __pyx_k_LIBOVR_ERROR_DISABLED_OR_DEFAULT, sizeof(__pyx_k_LIBOVR_ERROR_DISABLED_OR_DEFAULT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_DISALLOWED, __pyx_k_LIBOVR_ERROR_DISALLOWED, sizeof(__pyx_k_LIBOVR_ERROR_DISALLOWED), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_DISPLAY_INIT, __pyx_k_LIBOVR_ERROR_DISPLAY_INIT, sizeof(__pyx_k_LIBOVR_ERROR_DISPLAY_INIT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_DISPLAY_LIMIT_REACH, __pyx_k_LIBOVR_ERROR_DISPLAY_LIMIT_REACH, sizeof(__pyx_k_LIBOVR_ERROR_DISPLAY_LIMIT_REACH), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_DISPLAY_LOST, __pyx_k_LIBOVR_ERROR_DISPLAY_LOST, sizeof(__pyx_k_LIBOVR_ERROR_DISPLAY_LOST), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_DISPLAY_MANAGER_INI, __pyx_k_LIBOVR_ERROR_DISPLAY_MANAGER_INI, sizeof(__pyx_k_LIBOVR_ERROR_DISPLAY_MANAGER_INI), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_DISPLAY_PLUGGED_INC, __pyx_k_LIBOVR_ERROR_DISPLAY_PLUGGED_INC, sizeof(__pyx_k_LIBOVR_ERROR_DISPLAY_PLUGGED_INC), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_DISPLAY_REMOVED, __pyx_k_LIBOVR_ERROR_DISPLAY_REMOVED, sizeof(__pyx_k_LIBOVR_ERROR_DISPLAY_REMOVED), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_CAP, __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_CAP, sizeof(__pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_CAP), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_INI, __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_INI, sizeof(__pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_INI), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM, __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM, sizeof(__pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_2, __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_2, sizeof(__pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_2), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_3, __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_3, sizeof(__pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_3), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NOT, __pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NOT, sizeof(__pyx_k_LIBOVR_ERROR_EXTERNAL_CAMERA_NOT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_GRAPHICS_DEVICE_RES, __pyx_k_LIBOVR_ERROR_GRAPHICS_DEVICE_RES, sizeof(__pyx_k_LIBOVR_ERROR_GRAPHICS_DEVICE_RES), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_HYBRID_GRAPHICS_NOT, __pyx_k_LIBOVR_ERROR_HYBRID_GRAPHICS_NOT, sizeof(__pyx_k_LIBOVR_ERROR_HYBRID_GRAPHICS_NOT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_INCOMPATIBLE_OS, __pyx_k_LIBOVR_ERROR_INCOMPATIBLE_OS, sizeof(__pyx_k_LIBOVR_ERROR_INCOMPATIBLE_OS), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_INITIALIZE, __pyx_k_LIBOVR_ERROR_INITIALIZE, sizeof(__pyx_k_LIBOVR_ERROR_INITIALIZE), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_INITIALIZE_VULKAN, __pyx_k_LIBOVR_ERROR_INITIALIZE_VULKAN, sizeof(__pyx_k_LIBOVR_ERROR_INITIALIZE_VULKAN), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_INSUFFICENT_ARRAY_S, __pyx_k_LIBOVR_ERROR_INSUFFICENT_ARRAY_S, sizeof(__pyx_k_LIBOVR_ERROR_INSUFFICENT_ARRAY_S), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_INVALID_HEADSET_ORI, __pyx_k_LIBOVR_ERROR_INVALID_HEADSET_ORI, sizeof(__pyx_k_LIBOVR_ERROR_INVALID_HEADSET_ORI), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_INVALID_OPERATION, __pyx_k_LIBOVR_ERROR_INVALID_OPERATION, sizeof(__pyx_k_LIBOVR_ERROR_INVALID_OPERATION), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_INVALID_PARAMETER, __pyx_k_LIBOVR_ERROR_INVALID_PARAMETER, sizeof(__pyx_k_LIBOVR_ERROR_INVALID_PARAMETER), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_INVALID_SESSION, __pyx_k_LIBOVR_ERROR_INVALID_SESSION, sizeof(__pyx_k_LIBOVR_ERROR_INVALID_SESSION), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_LEAKING_RESOURCES, __pyx_k_LIBOVR_ERROR_LEAKING_RESOURCES, sizeof(__pyx_k_LIBOVR_ERROR_LEAKING_RESOURCES), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_LIB_LOAD, __pyx_k_LIBOVR_ERROR_LIB_LOAD, sizeof(__pyx_k_LIBOVR_ERROR_LIB_LOAD), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_LIB_PATH, __pyx_k_LIBOVR_ERROR_LIB_PATH, sizeof(__pyx_k_LIBOVR_ERROR_LIB_PATH), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_LIB_SIGN_CHECK, __pyx_k_LIBOVR_ERROR_LIB_SIGN_CHECK, sizeof(__pyx_k_LIBOVR_ERROR_LIB_SIGN_CHECK), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_LIB_SYMBOLS, __pyx_k_LIBOVR_ERROR_LIB_SYMBOLS, sizeof(__pyx_k_LIBOVR_ERROR_LIB_SYMBOLS), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_LOST_TRACKING, __pyx_k_LIBOVR_ERROR_LOST_TRACKING, sizeof(__pyx_k_LIBOVR_ERROR_LOST_TRACKING), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_MEMORY_ALLOCATION_F, __pyx_k_LIBOVR_ERROR_MEMORY_ALLOCATION_F, sizeof(__pyx_k_LIBOVR_ERROR_MEMORY_ALLOCATION_F), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_MISFORMATTED_BLOCK, __pyx_k_LIBOVR_ERROR_MISFORMATTED_BLOCK, sizeof(__pyx_k_LIBOVR_ERROR_MISFORMATTED_BLOCK), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_MISMATCHED_ADAPTERS, __pyx_k_LIBOVR_ERROR_MISMATCHED_ADAPTERS, sizeof(__pyx_k_LIBOVR_ERROR_MISMATCHED_ADAPTERS), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_NOT_INITIALIZED, __pyx_k_LIBOVR_ERROR_NOT_INITIALIZED, sizeof(__pyx_k_LIBOVR_ERROR_NOT_INITIALIZED), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_NO_CALIBRATION, __pyx_k_LIBOVR_ERROR_NO_CALIBRATION, sizeof(__pyx_k_LIBOVR_ERROR_NO_CALIBRATION), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_NO_EXTERNAL_CAMERA, __pyx_k_LIBOVR_ERROR_NO_EXTERNAL_CAMERA, sizeof(__pyx_k_LIBOVR_ERROR_NO_EXTERNAL_CAMERA), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_NO_HMD, __pyx_k_LIBOVR_ERROR_NO_HMD, sizeof(__pyx_k_LIBOVR_ERROR_NO_HMD), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_NO_VALID_VR_DISPLAY, __pyx_k_LIBOVR_ERROR_NO_VALID_VR_DISPLAY, sizeof(__pyx_k_LIBOVR_ERROR_NO_VALID_VR_DISPLAY), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_OBSOLETE, __pyx_k_LIBOVR_ERROR_OBSOLETE, sizeof(__pyx_k_LIBOVR_ERROR_OBSOLETE), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_OLD_VERSION, __pyx_k_LIBOVR_ERROR_OLD_VERSION, sizeof(__pyx_k_LIBOVR_ERROR_OLD_VERSION), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_GFX_DRI, __pyx_k_LIBOVR_ERROR_OUT_OF_DATE_GFX_DRI, sizeof(__pyx_k_LIBOVR_ERROR_OUT_OF_DATE_GFX_DRI), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_OS, __pyx_k_LIBOVR_ERROR_OUT_OF_DATE_OS, sizeof(__pyx_k_LIBOVR_ERROR_OUT_OF_DATE_OS), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_REINITIALIZATION, __pyx_k_LIBOVR_ERROR_REINITIALIZATION, sizeof(__pyx_k_LIBOVR_ERROR_REINITIALIZATION), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_REMOTE_SESSION, __pyx_k_LIBOVR_ERROR_REMOTE_SESSION, sizeof(__pyx_k_LIBOVR_ERROR_REMOTE_SESSION), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_RUNTIME_EXCEPTION, __pyx_k_LIBOVR_ERROR_RUNTIME_EXCEPTION, sizeof(__pyx_k_LIBOVR_ERROR_RUNTIME_EXCEPTION), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_SERVER_START, __pyx_k_LIBOVR_ERROR_SERVER_START, sizeof(__pyx_k_LIBOVR_ERROR_SERVER_START), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_SERVICE_CONNECTION, __pyx_k_LIBOVR_ERROR_SERVICE_CONNECTION, sizeof(__pyx_k_LIBOVR_ERROR_SERVICE_CONNECTION), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_SERVICE_DEADLOCK_DE, __pyx_k_LIBOVR_ERROR_SERVICE_DEADLOCK_DE, sizeof(__pyx_k_LIBOVR_ERROR_SERVICE_DEADLOCK_DE), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_SERVICE_ERROR, __pyx_k_LIBOVR_ERROR_SERVICE_ERROR, sizeof(__pyx_k_LIBOVR_ERROR_SERVICE_ERROR), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_SERVICE_VERSION, __pyx_k_LIBOVR_ERROR_SERVICE_VERSION, sizeof(__pyx_k_LIBOVR_ERROR_SERVICE_VERSION), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN, __pyx_k_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN, sizeof(__pyx_k_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_2, __pyx_k_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_2, sizeof(__pyx_k_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_2), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_TIMEOUT, __pyx_k_LIBOVR_ERROR_TIMEOUT, sizeof(__pyx_k_LIBOVR_ERROR_TIMEOUT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_TRACKER_DRIVER_INIT, __pyx_k_LIBOVR_ERROR_TRACKER_DRIVER_INIT, sizeof(__pyx_k_LIBOVR_ERROR_TRACKER_DRIVER_INIT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_ERROR_UNSUPPORTED, __pyx_k_LIBOVR_ERROR_UNSUPPORTED, sizeof(__pyx_k_LIBOVR_ERROR_UNSUPPORTED), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_EYE_COUNT, __pyx_k_LIBOVR_EYE_COUNT, sizeof(__pyx_k_LIBOVR_EYE_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_EYE_LEFT, __pyx_k_LIBOVR_EYE_LEFT, sizeof(__pyx_k_LIBOVR_EYE_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_EYE_RIGHT, __pyx_k_LIBOVR_EYE_RIGHT, sizeof(__pyx_k_LIBOVR_EYE_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_FORMAT_D16_UNORM, __pyx_k_LIBOVR_FORMAT_D16_UNORM, sizeof(__pyx_k_LIBOVR_FORMAT_D16_UNORM), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_FORMAT_D24_UNORM_S8_UINT, __pyx_k_LIBOVR_FORMAT_D24_UNORM_S8_UINT, sizeof(__pyx_k_LIBOVR_FORMAT_D24_UNORM_S8_UINT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_FORMAT_D32_FLOAT, __pyx_k_LIBOVR_FORMAT_D32_FLOAT, sizeof(__pyx_k_LIBOVR_FORMAT_D32_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_FORMAT_R11G11B10_FLOAT, __pyx_k_LIBOVR_FORMAT_R11G11B10_FLOAT, sizeof(__pyx_k_LIBOVR_FORMAT_R11G11B10_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_FORMAT_R16G16B16A16_FLOAT, __pyx_k_LIBOVR_FORMAT_R16G16B16A16_FLOAT, sizeof(__pyx_k_LIBOVR_FORMAT_R16G16B16A16_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM, __pyx_k_LIBOVR_FORMAT_R8G8B8A8_UNORM, sizeof(__pyx_k_LIBOVR_FORMAT_R8G8B8A8_UNORM), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM_SRG, __pyx_k_LIBOVR_FORMAT_R8G8B8A8_UNORM_SRG, sizeof(__pyx_k_LIBOVR_FORMAT_R8G8B8A8_UNORM_SRG), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_HAND_COUNT, __pyx_k_LIBOVR_HAND_COUNT, sizeof(__pyx_k_LIBOVR_HAND_COUNT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_HAND_LEFT, __pyx_k_LIBOVR_HAND_LEFT, sizeof(__pyx_k_LIBOVR_HAND_LEFT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_HAND_RIGHT, __pyx_k_LIBOVR_HAND_RIGHT, sizeof(__pyx_k_LIBOVR_HAND_RIGHT), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_MAX_PROVIDED_FRAME_STATS, __pyx_k_LIBOVR_MAX_PROVIDED_FRAME_STATS, sizeof(__pyx_k_LIBOVR_MAX_PROVIDED_FRAME_STATS), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_SUCCESS, __pyx_k_LIBOVR_SUCCESS, sizeof(__pyx_k_LIBOVR_SUCCESS), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_SUCCESS_BOUNDARY_INVALID, __pyx_k_LIBOVR_SUCCESS_BOUNDARY_INVALID, sizeof(__pyx_k_LIBOVR_SUCCESS_BOUNDARY_INVALID), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_SUCCESS_DEVICE_UNAVAILABL, __pyx_k_LIBOVR_SUCCESS_DEVICE_UNAVAILABL, sizeof(__pyx_k_LIBOVR_SUCCESS_DEVICE_UNAVAILABL), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_SUCCESS_NOT_VISIBLE, __pyx_k_LIBOVR_SUCCESS_NOT_VISIBLE, sizeof(__pyx_k_LIBOVR_SUCCESS_NOT_VISIBLE), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN0, __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN0, sizeof(__pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN0), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN1, __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN1, sizeof(__pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN1), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN2, __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN2, sizeof(__pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN2), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN3, __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN3, sizeof(__pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN3), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN4, __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN4, sizeof(__pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN4), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN5, __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN5, sizeof(__pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN5), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN6, __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN6, sizeof(__pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN6), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN7, __pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN7, sizeof(__pyx_k_LIBOVR_TEXTURE_SWAP_CHAIN7), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_A, __pyx_k_LIBOVR_TOUCH_A, sizeof(__pyx_k_LIBOVR_TOUCH_A), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_B, __pyx_k_LIBOVR_TOUCH_B, sizeof(__pyx_k_LIBOVR_TOUCH_B), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_LINDEXPOINTING, __pyx_k_LIBOVR_TOUCH_LINDEXPOINTING, sizeof(__pyx_k_LIBOVR_TOUCH_LINDEXPOINTING), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_LINDEXTRIGGER, __pyx_k_LIBOVR_TOUCH_LINDEXTRIGGER, sizeof(__pyx_k_LIBOVR_TOUCH_LINDEXTRIGGER), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_LTHUMB, __pyx_k_LIBOVR_TOUCH_LTHUMB, sizeof(__pyx_k_LIBOVR_TOUCH_LTHUMB), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_LTHUMBUP, __pyx_k_LIBOVR_TOUCH_LTHUMBUP, sizeof(__pyx_k_LIBOVR_TOUCH_LTHUMBUP), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_RINDEXPOINTING, __pyx_k_LIBOVR_TOUCH_RINDEXPOINTING, sizeof(__pyx_k_LIBOVR_TOUCH_RINDEXPOINTING), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_RTHUMB, __pyx_k_LIBOVR_TOUCH_RTHUMB, sizeof(__pyx_k_LIBOVR_TOUCH_RTHUMB), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_RTHUMBREST, __pyx_k_LIBOVR_TOUCH_RTHUMBREST, sizeof(__pyx_k_LIBOVR_TOUCH_RTHUMBREST), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_RTHUMBUP, __pyx_k_LIBOVR_TOUCH_RTHUMBUP, sizeof(__pyx_k_LIBOVR_TOUCH_RTHUMBUP), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_X, __pyx_k_LIBOVR_TOUCH_X, sizeof(__pyx_k_LIBOVR_TOUCH_X), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TOUCH_Y, __pyx_k_LIBOVR_TOUCH_Y, sizeof(__pyx_k_LIBOVR_TOUCH_Y), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_HMD, __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_HMD, sizeof(__pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_HMD), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_LTOUC, __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_LTOUC, sizeof(__pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_LTOUC), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC, __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC, sizeof(__pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_2, __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_2, sizeof(__pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_2), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_3, __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_3, sizeof(__pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_3), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_4, __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_4, sizeof(__pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_4), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_RTOUC, __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_RTOUC, sizeof(__pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_RTOUC), 0, 0, 1, 1},
  {&__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_TOUCH, __pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_TOUCH, sizeof(__pyx_k_LIBOVR_TRACKED_DEVICE_TYPE_TOUCH), 0, 0, 1, 1},
  {&__pyx_n_s_LIndexPointing, __pyx_k_LIndexPointing, sizeof(__pyx_k_LIndexPointing), 0, 0, 1, 1},
  {&__pyx_n_s_LIndexTrigger, __pyx_k_LIndexTrigger, sizeof(__pyx_k_LIndexTrigger), 0, 0, 1, 1},
  {&__pyx_n_s_LMask, __pyx_k_LMask, sizeof(__pyx_k_LMask), 0, 0, 1, 1},
  {&__pyx_n_s_LShoulder, __pyx_k_LShoulder, sizeof(__pyx_k_LShoulder), 0, 0, 1, 1},
  {&__pyx_n_s_LThumb, __pyx_k_LThumb, sizeof(__pyx_k_LThumb), 0, 0, 1, 1},
  {&__pyx_n_s_LThumbRest, __pyx_k_LThumbRest, sizeof(__pyx_k_LThumbRest), 0, 0, 1, 1},
  {&__pyx_n_s_LThumbUp, __pyx_k_LThumbUp, sizeof(__pyx_k_LThumbUp), 0, 0, 1, 1},
  {&__pyx_n_s_LatencyTiming, __pyx_k_LatencyTiming, sizeof(__pyx_k_LatencyTiming), 0, 0, 1, 1},
  {&__pyx_kp_s_Laurie_M_Wilcox, __pyx_k_Laurie_M_Wilcox, sizeof(__pyx_k_Laurie_M_Wilcox), 0, 0, 1, 0},
  {&__pyx_n_s_Left, __pyx_k_Left, sizeof(__pyx_k_Left), 0, 0, 1, 1},
  {&__pyx_n_s_LeftEyeOnly, __pyx_k_LeftEyeOnly, sizeof(__pyx_k_LeftEyeOnly), 0, 0, 1, 1},
  {&__pyx_n_s_LeftTouch, __pyx_k_LeftTouch, sizeof(__pyx_k_LeftTouch), 0, 0, 1, 1},
  {&__pyx_n_s_LibOVRFrameStat, __pyx_k_LibOVRFrameStat, sizeof(__pyx_k_LibOVRFrameStat), 0, 0, 1, 1},
  {&__pyx_n_s_LibOVRHmdInfo, __pyx_k_LibOVRHmdInfo, sizeof(__pyx_k_LibOVRHmdInfo), 0, 0, 1, 1},
  {&__pyx_n_s_LibOVRPose, __pyx_k_LibOVRPose, sizeof(__pyx_k_LibOVRPose), 0, 0, 1, 1},
  {&__pyx_n_s_LibOVRPoseState, __pyx_k_LibOVRPoseState, sizeof(__pyx_k_LibOVRPoseState), 0, 0, 1, 1},
  {&__pyx_kp_s_LibOVRPose_px_py_pz_rx_ry_rz_rw, __pyx_k_LibOVRPose_px_py_pz_rx_ry_rz_rw, sizeof(__pyx_k_LibOVRPose_px_py_pz_rx_ry_rz_rw), 0, 0, 1, 0},
  {&__pyx_n_s_LibOVRSessionStatus, __pyx_k_LibOVRSessionStatus, sizeof(__pyx_k_LibOVRSessionStatus), 0, 0, 1, 1},
  {&__pyx_n_s_LibOVRTrackerInfo, __pyx_k_LibOVRTrackerInfo, sizeof(__pyx_k_LibOVRTrackerInfo), 0, 0, 1, 1},
  {&__pyx_n_s_LibOVRTrackingState, __pyx_k_LibOVRTrackingState, sizeof(__pyx_k_LibOVRTrackingState), 0, 0, 1, 1},
  {&__pyx_n_s_MIT, __pyx_k_MIT, sizeof(__pyx_k_MIT), 0, 0, 1, 1},
  {&__pyx_kp_s_Matthew_D_Cutone, __pyx_k_Matthew_D_Cutone, sizeof(__pyx_k_Matthew_D_Cutone), 0, 0, 1, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
  {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
  {&__pyx_n_s_N, __pyx_k_N, sizeof(__pyx_k_N), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
  {&__pyx_n_s_Off, __pyx_k_Off, sizeof(__pyx_k_Off), 0, 0, 1, 1},
  {&__pyx_kp_s_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 0, 1, 0},
  {&__pyx_n_s_Outer, __pyx_k_Outer, sizeof(__pyx_k_Outer), 0, 0, 1, 1},
  {&__pyx_n_s_PerfSummary, __pyx_k_PerfSummary, sizeof(__pyx_k_PerfSummary), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_PlayArea, __pyx_k_PlayArea, sizeof(__pyx_k_PlayArea), 0, 0, 1, 1},
  {&__pyx_n_s_PostDistortion, __pyx_k_PostDistortion, sizeof(__pyx_k_PostDistortion), 0, 0, 1, 1},
  {&__pyx_n_s_Private, __pyx_k_Private, sizeof(__pyx_k_Private), 0, 0, 1, 1},
  {&__pyx_n_s_R11G11B10_FLOAT, __pyx_k_R11G11B10_FLOAT, sizeof(__pyx_k_R11G11B10_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_R16G16B16A16_FLOAT, __pyx_k_R16G16B16A16_FLOAT, sizeof(__pyx_k_R16G16B16A16_FLOAT), 0, 0, 1, 1},
  {&__pyx_n_s_R8G8B8A8_UNORM, __pyx_k_R8G8B8A8_UNORM, sizeof(__pyx_k_R8G8B8A8_UNORM), 0, 0, 1, 1},
  {&__pyx_n_s_R8G8B8A8_UNORM_SRGB, __pyx_k_R8G8B8A8_UNORM_SRGB, sizeof(__pyx_k_R8G8B8A8_UNORM_SRGB), 0, 0, 1, 1},
  {&__pyx_n_s_RIndexPointing, __pyx_k_RIndexPointing, sizeof(__pyx_k_RIndexPointing), 0, 0, 1, 1},
  {&__pyx_n_s_RIndexTrigger, __pyx_k_RIndexTrigger, sizeof(__pyx_k_RIndexTrigger), 0, 0, 1, 1},
  {&__pyx_n_s_RMask, __pyx_k_RMask, sizeof(__pyx_k_RMask), 0, 0, 1, 1},
  {&__pyx_n_s_RShoulder, __pyx_k_RShoulder, sizeof(__pyx_k_RShoulder), 0, 0, 1, 1},
  {&__pyx_n_s_RThumb, __pyx_k_RThumb, sizeof(__pyx_k_RThumb), 0, 0, 1, 1},
  {&__pyx_n_s_RThumbRest, __pyx_k_RThumbRest, sizeof(__pyx_k_RThumbRest), 0, 0, 1, 1},
  {&__pyx_n_s_RThumbUp, __pyx_k_RThumbUp, sizeof(__pyx_k_RThumbUp), 0, 0, 1, 1},
  {&__pyx_n_s_Remote, __pyx_k_Remote, sizeof(__pyx_k_Remote), 0, 0, 1, 1},
  {&__pyx_n_s_Right, __pyx_k_Right, sizeof(__pyx_k_Right), 0, 0, 1, 1},
  {&__pyx_n_s_RightEyeOnly, __pyx_k_RightEyeOnly, sizeof(__pyx_k_RightEyeOnly), 0, 0, 1, 1},
  {&__pyx_n_s_RightTouch, __pyx_k_RightTouch, sizeof(__pyx_k_RightTouch), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_Touch, __pyx_k_Touch, sizeof(__pyx_k_Touch), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
  {&__pyx_n_s_Up, __pyx_k_Up, sizeof(__pyx_k_Up), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_VersionInfo, __pyx_k_VersionInfo, sizeof(__pyx_k_VersionInfo), 0, 0, 1, 1},
  {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
  {&__pyx_n_s_VolDown, __pyx_k_VolDown, sizeof(__pyx_k_VolDown), 0, 0, 1, 1},
  {&__pyx_n_s_VolUp, __pyx_k_VolUp, sizeof(__pyx_k_VolUp), 0, 0, 1, 1},
  {&__pyx_n_s_X, __pyx_k_X, sizeof(__pyx_k_X), 0, 0, 1, 1},
  {&__pyx_n_s_Xbox, __pyx_k_Xbox, sizeof(__pyx_k_Xbox), 0, 0, 1, 1},
  {&__pyx_n_s_Y, __pyx_k_Y, sizeof(__pyx_k_Y), 0, 0, 1, 1},
  {&__pyx_n_s_absTime, __pyx_k_absTime, sizeof(__pyx_k_absTime), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
  {&__pyx_n_s_amplitude, __pyx_k_amplitude, sizeof(__pyx_k_amplitude), 0, 0, 1, 1},
  {&__pyx_n_s_anyFrameStatsDropped, __pyx_k_anyFrameStatsDropped, sizeof(__pyx_k_anyFrameStatsDropped), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
  {&__pyx_n_s_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 0, 1, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_beginFrame, __pyx_k_beginFrame, sizeof(__pyx_k_beginFrame), 0, 0, 1, 1},
  {&__pyx_n_s_blue, __pyx_k_blue, sizeof(__pyx_k_blue), 0, 0, 1, 1},
  {&__pyx_n_s_boundaryType, __pyx_k_boundaryType, sizeof(__pyx_k_boundaryType), 0, 0, 1, 1},
  {&__pyx_n_s_btype, __pyx_k_btype, sizeof(__pyx_k_btype), 0, 0, 1, 1},
  {&__pyx_n_s_buffSize, __pyx_k_buffSize, sizeof(__pyx_k_buffSize), 0, 0, 1, 1},
  {&__pyx_n_s_button, __pyx_k_button, sizeof(__pyx_k_button), 0, 0, 1, 1},
  {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
  {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
  {&__pyx_n_s_calcEyeBufferSize, __pyx_k_calcEyeBufferSize, sizeof(__pyx_k_calcEyeBufferSize), 0, 0, 1, 1},
  {&__pyx_n_s_calcEyePoses, __pyx_k_calcEyePoses, sizeof(__pyx_k_calcEyePoses), 0, 0, 1, 1},
  {&__pyx_n_s_checkAppLastFrameDropped, __pyx_k_checkAppLastFrameDropped, sizeof(__pyx_k_checkAppLastFrameDropped), 0, 0, 1, 1},
  {&__pyx_n_s_checkAswIsAvailable, __pyx_k_checkAswIsAvailable, sizeof(__pyx_k_checkAswIsAvailable), 0, 0, 1, 1},
  {&__pyx_n_s_checkCompLastFrameDropped, __pyx_k_checkCompLastFrameDropped, sizeof(__pyx_k_checkCompLastFrameDropped), 0, 0, 1, 1},
  {&__pyx_n_s_check_result, __pyx_k_check_result, sizeof(__pyx_k_check_result), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_clearShouldRecenterFlag, __pyx_k_clearShouldRecenterFlag, sizeof(__pyx_k_clearShouldRecenterFlag), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_color, __pyx_k_color, sizeof(__pyx_k_color), 0, 0, 1, 1},
  {&__pyx_n_s_commitTextureSwapChain, __pyx_k_commitTextureSwapChain, sizeof(__pyx_k_commitTextureSwapChain), 0, 0, 1, 1},
  {&__pyx_n_s_compFrameStats, __pyx_k_compFrameStats, sizeof(__pyx_k_compFrameStats), 0, 0, 1, 1},
  {&__pyx_n_s_connectionTimeout, __pyx_k_connectionTimeout, sizeof(__pyx_k_connectionTimeout), 0, 0, 1, 1},
  {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
  {&__pyx_n_s_continuous, __pyx_k_continuous, sizeof(__pyx_k_continuous), 0, 0, 1, 1},
  {&__pyx_n_s_controller, __pyx_k_controller, sizeof(__pyx_k_controller), 0, 0, 1, 1},
  {&__pyx_n_s_copyright, __pyx_k_copyright, sizeof(__pyx_k_copyright), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_create, __pyx_k_create, sizeof(__pyx_k_create), 0, 0, 1, 1},
  {&__pyx_n_s_createMirrorTexture, __pyx_k_createMirrorTexture, sizeof(__pyx_k_createMirrorTexture), 0, 0, 1, 1},
  {&__pyx_n_s_createTextureSwapChainGL, __pyx_k_createTextureSwapChainGL, sizeof(__pyx_k_createTextureSwapChainGL), 0, 0, 1, 1},
  {&__pyx_n_s_credits, __pyx_k_credits, sizeof(__pyx_k_credits), 0, 0, 1, 1},
  {&__pyx_n_s_curButtons, __pyx_k_curButtons, sizeof(__pyx_k_curButtons), 0, 0, 1, 1},
  {&__pyx_n_s_curTouches, __pyx_k_curTouches, sizeof(__pyx_k_curTouches), 0, 0, 1, 1},
  {&__pyx_n_s_currentInputState, __pyx_k_currentInputState, sizeof(__pyx_k_currentInputState), 0, 0, 1, 1},
  {&__pyx_n_s_current_idx, __pyx_k_current_idx, sizeof(__pyx_k_current_idx), 0, 0, 1, 1},
  {&__pyx_kp_s_cutonem_yorku_ca, __pyx_k_cutonem_yorku_ca, sizeof(__pyx_k_cutonem_yorku_ca), 0, 0, 1, 0},
  {&__pyx_n_s_deadzone, __pyx_k_deadzone, sizeof(__pyx_k_deadzone), 0, 0, 1, 1},
  {&__pyx_n_s_destroy, __pyx_k_destroy, sizeof(__pyx_k_destroy), 0, 0, 1, 1},
  {&__pyx_n_s_destroyMirrorTexture, __pyx_k_destroyMirrorTexture, sizeof(__pyx_k_destroyMirrorTexture), 0, 0, 1, 1},
  {&__pyx_n_s_destroyTextureSwapChain, __pyx_k_destroyTextureSwapChain, sizeof(__pyx_k_destroyTextureSwapChain), 0, 0, 1, 1},
  {&__pyx_n_s_devicePoses, __pyx_k_devicePoses, sizeof(__pyx_k_devicePoses), 0, 0, 1, 1},
  {&__pyx_n_s_deviceTypes, __pyx_k_deviceTypes, sizeof(__pyx_k_deviceTypes), 0, 0, 1, 1},
  {&__pyx_n_s_devices, __pyx_k_devices, sizeof(__pyx_k_devices), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_distVp, __pyx_k_distVp, sizeof(__pyx_k_distVp), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
  {&__pyx_n_s_email, __pyx_k_email, sizeof(__pyx_k_email), 0, 0, 1, 1},
  {&__pyx_n_s_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_endFrame, __pyx_k_endFrame, sizeof(__pyx_k_endFrame), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_errorString, __pyx_k_errorString, sizeof(__pyx_k_errorString), 0, 0, 1, 1},
  {&__pyx_n_s_eye, __pyx_k_eye, sizeof(__pyx_k_eye), 0, 0, 1, 1},
  {&__pyx_n_s_eyePose, __pyx_k_eyePose, sizeof(__pyx_k_eyePose), 0, 0, 1, 1},
  {&__pyx_n_s_failure, __pyx_k_failure, sizeof(__pyx_k_failure), 0, 0, 1, 1},
  {&__pyx_n_s_falling, __pyx_k_falling, sizeof(__pyx_k_falling), 0, 0, 1, 1},
  {&__pyx_n_s_farClip, __pyx_k_farClip, sizeof(__pyx_k_farClip), 0, 0, 1, 1},
  {&__pyx_n_s_fast, __pyx_k_fast, sizeof(__pyx_k_fast), 0, 0, 1, 1},
  {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_floor, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 0, 1, 1},
  {&__pyx_n_s_focusAware, __pyx_k_focusAware, sizeof(__pyx_k_focusAware), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
  {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
  {&__pyx_n_s_forward, __pyx_k_forward, sizeof(__pyx_k_forward), 0, 0, 1, 1},
  {&__pyx_n_s_fov, __pyx_k_fov, sizeof(__pyx_k_fov), 0, 0, 1, 1},
  {&__pyx_n_s_fovPort, __pyx_k_fovPort, sizeof(__pyx_k_fovPort), 0, 0, 1, 1},
  {&__pyx_n_s_fov_in, __pyx_k_fov_in, sizeof(__pyx_k_fov_in), 0, 0, 1, 1},
  {&__pyx_n_s_frameIndex, __pyx_k_frameIndex, sizeof(__pyx_k_frameIndex), 0, 0, 1, 1},
  {&__pyx_n_s_frameStat, __pyx_k_frameStat, sizeof(__pyx_k_frameStat), 0, 0, 1, 1},
  {&__pyx_n_s_frameStatIndex, __pyx_k_frameStatIndex, sizeof(__pyx_k_frameStatIndex), 0, 0, 1, 1},
  {&__pyx_n_s_freq, __pyx_k_freq, sizeof(__pyx_k_freq), 0, 0, 1, 1},
  {&__pyx_n_s_frequency, __pyx_k_frequency, sizeof(__pyx_k_frequency), 0, 0, 1, 1},
  {&__pyx_n_s_getAdaptiveGpuPerformanceScale, __pyx_k_getAdaptiveGpuPerformanceScale, sizeof(__pyx_k_getAdaptiveGpuPerformanceScale), 0, 0, 1, 1},
  {&__pyx_n_s_getAt, __pyx_k_getAt, sizeof(__pyx_k_getAt), 0, 0, 1, 1},
  {&__pyx_n_s_getBoundaryDimensions, __pyx_k_getBoundaryDimensions, sizeof(__pyx_k_getBoundaryDimensions), 0, 0, 1, 1},
  {&__pyx_n_s_getBoundaryVisible, __pyx_k_getBoundaryVisible, sizeof(__pyx_k_getBoundaryVisible), 0, 0, 1, 1},
  {&__pyx_n_s_getButton, __pyx_k_getButton, sizeof(__pyx_k_getButton), 0, 0, 1, 1},
  {&__pyx_n_s_getConnectedControllerTypes, __pyx_k_getConnectedControllerTypes, sizeof(__pyx_k_getConnectedControllerTypes), 0, 0, 1, 1},
  {&__pyx_n_s_getDevicePoses, __pyx_k_getDevicePoses, sizeof(__pyx_k_getDevicePoses), 0, 0, 1, 1},
  {&__pyx_n_s_getDistortedViewport, __pyx_k_getDistortedViewport, sizeof(__pyx_k_getDistortedViewport), 0, 0, 1, 1},
  {&__pyx_n_s_getEyeAspectRatio, __pyx_k_getEyeAspectRatio, sizeof(__pyx_k_getEyeAspectRatio), 0, 0, 1, 1},
  {&__pyx_n_s_getEyeFocalLength, __pyx_k_getEyeFocalLength, sizeof(__pyx_k_getEyeFocalLength), 0, 0, 1, 1},
  {&__pyx_n_s_getEyeHeight, __pyx_k_getEyeHeight, sizeof(__pyx_k_getEyeHeight), 0, 0, 1, 1},
  {&__pyx_n_s_getEyeHorizontalFovRadians, __pyx_k_getEyeHorizontalFovRadians, sizeof(__pyx_k_getEyeHorizontalFovRadians), 0, 0, 1, 1},
  {&__pyx_n_s_getEyeProjectionMatrix, __pyx_k_getEyeProjectionMatrix, sizeof(__pyx_k_getEyeProjectionMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_getEyeRenderFov, __pyx_k_getEyeRenderFov, sizeof(__pyx_k_getEyeRenderFov), 0, 0, 1, 1},
  {&__pyx_n_s_getEyeRenderPose, __pyx_k_getEyeRenderPose, sizeof(__pyx_k_getEyeRenderPose), 0, 0, 1, 1},
  {&__pyx_n_s_getEyeRenderViewport, __pyx_k_getEyeRenderViewport, sizeof(__pyx_k_getEyeRenderViewport), 0, 0, 1, 1},
  {&__pyx_n_s_getEyeToNoseDist, __pyx_k_getEyeToNoseDist, sizeof(__pyx_k_getEyeToNoseDist), 0, 0, 1, 1},
  {&__pyx_n_s_getEyeVerticalFovRadians, __pyx_k_getEyeVerticalFovRadians, sizeof(__pyx_k_getEyeVerticalFovRadians), 0, 0, 1, 1},
  {&__pyx_n_s_getEyeViewMatrix, __pyx_k_getEyeViewMatrix, sizeof(__pyx_k_getEyeViewMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_getFrameStats, __pyx_k_getFrameStats, sizeof(__pyx_k_getFrameStats), 0, 0, 1, 1},
  {&__pyx_n_s_getFrameStatsCount, __pyx_k_getFrameStatsCount, sizeof(__pyx_k_getFrameStatsCount), 0, 0, 1, 1},
  {&__pyx_n_s_getGraphicsLUID, __pyx_k_getGraphicsLUID, sizeof(__pyx_k_getGraphicsLUID), 0, 0, 1, 1},
  {&__pyx_n_s_getHandTriggerValues, __pyx_k_getHandTriggerValues, sizeof(__pyx_k_getHandTriggerValues), 0, 0, 1, 1},
  {&__pyx_n_s_getHmdInfo, __pyx_k_getHmdInfo, sizeof(__pyx_k_getHmdInfo), 0, 0, 1, 1},
  {&__pyx_n_s_getHmdToEyePose, __pyx_k_getHmdToEyePose, sizeof(__pyx_k_getHmdToEyePose), 0, 0, 1, 1},
  {&__pyx_n_s_getIndexTriggerValues, __pyx_k_getIndexTriggerValues, sizeof(__pyx_k_getIndexTriggerValues), 0, 0, 1, 1},
  {&__pyx_n_s_getLastErrorInfo, __pyx_k_getLastErrorInfo, sizeof(__pyx_k_getLastErrorInfo), 0, 0, 1, 1},
  {&__pyx_n_s_getMirrorTexture, __pyx_k_getMirrorTexture, sizeof(__pyx_k_getMirrorTexture), 0, 0, 1, 1},
  {&__pyx_n_s_getNeckEyeDist, __pyx_k_getNeckEyeDist, sizeof(__pyx_k_getNeckEyeDist), 0, 0, 1, 1},
  {&__pyx_n_s_getPixelsPerTanAngleAtCenter, __pyx_k_getPixelsPerTanAngleAtCenter, sizeof(__pyx_k_getPixelsPerTanAngleAtCenter), 0, 0, 1, 1},
  {&__pyx_n_s_getPredictedDisplayTime, __pyx_k_getPredictedDisplayTime, sizeof(__pyx_k_getPredictedDisplayTime), 0, 0, 1, 1},
  {&__pyx_n_s_getSessionStatus, __pyx_k_getSessionStatus, sizeof(__pyx_k_getSessionStatus), 0, 0, 1, 1},
  {&__pyx_n_s_getTextureSwapChainBufferGL, __pyx_k_getTextureSwapChainBufferGL, sizeof(__pyx_k_getTextureSwapChainBufferGL), 0, 0, 1, 1},
  {&__pyx_n_s_getTextureSwapChainCurrentIndex, __pyx_k_getTextureSwapChainCurrentIndex, sizeof(__pyx_k_getTextureSwapChainCurrentIndex), 0, 0, 1, 1},
  {&__pyx_n_s_getTextureSwapChainLengthGL, __pyx_k_getTextureSwapChainLengthGL, sizeof(__pyx_k_getTextureSwapChainLengthGL), 0, 0, 1, 1},
  {&__pyx_n_s_getThumbstickValues, __pyx_k_getThumbstickValues, sizeof(__pyx_k_getThumbstickValues), 0, 0, 1, 1},
  {&__pyx_n_s_getTouch, __pyx_k_getTouch, sizeof(__pyx_k_getTouch), 0, 0, 1, 1},
  {&__pyx_n_s_getTrackerCount, __pyx_k_getTrackerCount, sizeof(__pyx_k_getTrackerCount), 0, 0, 1, 1},
  {&__pyx_n_s_getTrackerInfo, __pyx_k_getTrackerInfo, sizeof(__pyx_k_getTrackerInfo), 0, 0, 1, 1},
  {&__pyx_n_s_getTrackingOriginType, __pyx_k_getTrackingOriginType, sizeof(__pyx_k_getTrackingOriginType), 0, 0, 1, 1},
  {&__pyx_n_s_getTrackingState, __pyx_k_getTrackingState, sizeof(__pyx_k_getTrackingState), 0, 0, 1, 1},
  {&__pyx_n_s_getUp, __pyx_k_getUp, sizeof(__pyx_k_getUp), 0, 0, 1, 1},
  {&__pyx_n_s_getUserHeight, __pyx_k_getUserHeight, sizeof(__pyx_k_getUserHeight), 0, 0, 1, 1},
  {&__pyx_n_s_getVisibleProcessId, __pyx_k_getVisibleProcessId, sizeof(__pyx_k_getVisibleProcessId), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_s_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 0, 1, 0},
  {&__pyx_n_s_green, __pyx_k_green, sizeof(__pyx_k_green), 0, 0, 1, 1},
  {&__pyx_n_s_headPose, __pyx_k_headPose, sizeof(__pyx_k_headPose), 0, 0, 1, 1},
  {&__pyx_n_s_height, __pyx_k_height, sizeof(__pyx_k_height), 0, 0, 1, 1},
  {&__pyx_n_s_hideBoundary, __pyx_k_hideBoundary, sizeof(__pyx_k_hideBoundary), 0, 0, 1, 1},
  {&__pyx_n_s_hidePerfHud, __pyx_k_hidePerfHud, sizeof(__pyx_k_hidePerfHud), 0, 0, 1, 1},
  {&__pyx_n_s_high, __pyx_k_high, sizeof(__pyx_k_high), 0, 0, 1, 1},
  {&__pyx_n_s_hmdToEyePoses, __pyx_k_hmdToEyePoses, sizeof(__pyx_k_hmdToEyePoses), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_initialize, __pyx_k_initialize, sizeof(__pyx_k_initialize), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_inverse, __pyx_k_inverse, sizeof(__pyx_k_inverse), 0, 0, 1, 1},
  {&__pyx_n_s_inverted, __pyx_k_inverted, sizeof(__pyx_k_inverted), 0, 0, 1, 1},
  {&__pyx_n_s_isHmdConnected, __pyx_k_isHmdConnected, sizeof(__pyx_k_isHmdConnected), 0, 0, 1, 1},
  {&__pyx_n_s_isOculusServiceRunning, __pyx_k_isOculusServiceRunning, sizeof(__pyx_k_isOculusServiceRunning), 0, 0, 1, 1},
  {&__pyx_n_s_is_visible, __pyx_k_is_visible, sizeof(__pyx_k_is_visible), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_lastErrorInfo, __pyx_k_lastErrorInfo, sizeof(__pyx_k_lastErrorInfo), 0, 0, 1, 1},
  {&__pyx_n_s_latencyMarker, __pyx_k_latencyMarker, sizeof(__pyx_k_latencyMarker), 0, 0, 1, 1},
  {&__pyx_n_s_layers, __pyx_k_layers, sizeof(__pyx_k_layers), 0, 0, 1, 1},
  {&__pyx_n_s_levels, __pyx_k_levels, sizeof(__pyx_k_levels), 0, 0, 1, 1},
  {&__pyx_n_s_license, __pyx_k_license, sizeof(__pyx_k_license), 0, 0, 1, 1},
  {&__pyx_n_s_low, __pyx_k_low, sizeof(__pyx_k_low), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_maintainer, __pyx_k_maintainer, sizeof(__pyx_k_maintainer), 0, 0, 1, 1},
  {&__pyx_n_s_maxRange, __pyx_k_maxRange, sizeof(__pyx_k_maxRange), 0, 0, 1, 1},
  {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
  {&__pyx_n_s_mirrorDesc, __pyx_k_mirrorDesc, sizeof(__pyx_k_mirrorDesc), 0, 0, 1, 1},
  {&__pyx_n_s_mirror_id, __pyx_k_mirror_id, sizeof(__pyx_k_mirror_id), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_mv, __pyx_k_mv, sizeof(__pyx_k_mv), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
  {&__pyx_n_s_nearClip, __pyx_k_nearClip, sizeof(__pyx_k_nearClip), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_newOrigin, __pyx_k_newOrigin, sizeof(__pyx_k_newOrigin), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numStats, __pyx_k_numStats, sizeof(__pyx_k_numStats), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_s_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 0, 1, 0},
  {&__pyx_kp_s_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 0, 1, 0},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_off, __pyx_k_off, sizeof(__pyx_k_off), 0, 0, 1, 1},
  {&__pyx_n_s_ori, __pyx_k_ori, sizeof(__pyx_k_ori), 0, 0, 1, 1},
  {&__pyx_n_s_origin, __pyx_k_origin, sizeof(__pyx_k_origin), 0, 0, 1, 1},
  {&__pyx_n_s_outLength, __pyx_k_outLength, sizeof(__pyx_k_outLength), 0, 0, 1, 1},
  {&__pyx_n_s_outMatrix, __pyx_k_outMatrix, sizeof(__pyx_k_outMatrix), 0, 0, 1, 1},
  {&__pyx_n_s_outPoses, __pyx_k_outPoses, sizeof(__pyx_k_outPoses), 0, 0, 1, 1},
  {&__pyx_n_s_outRect, __pyx_k_outRect, sizeof(__pyx_k_outRect), 0, 0, 1, 1},
  {&__pyx_n_s_outVector, __pyx_k_outVector, sizeof(__pyx_k_outVector), 0, 0, 1, 1},
  {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
  {&__pyx_n_s_perfHudMode, __pyx_k_perfHudMode, sizeof(__pyx_k_perfHudMode), 0, 0, 1, 1},
  {&__pyx_n_s_perfHudModes, __pyx_k_perfHudModes, sizeof(__pyx_k_perfHudModes), 0, 0, 1, 1},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_pressed, __pyx_k_pressed, sizeof(__pyx_k_pressed), 0, 0, 1, 1},
  {&__pyx_n_s_previousInputState, __pyx_k_previousInputState, sizeof(__pyx_k_previousInputState), 0, 0, 1, 1},
  {&__pyx_n_s_prvButtons, __pyx_k_prvButtons, sizeof(__pyx_k_prvButtons), 0, 0, 1, 1},
  {&__pyx_n_s_prvTouches, __pyx_k_prvTouches, sizeof(__pyx_k_prvTouches), 0, 0, 1, 1},
  {&__pyx_n_s_psychxr_libovr__libovr, __pyx_k_psychxr_libovr__libovr, sizeof(__pyx_k_psychxr_libovr__libovr), 0, 0, 1, 1},
  {&__pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_k_psychxr_libovr__libovr_pyx, sizeof(__pyx_k_psychxr_libovr__libovr_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_px, __pyx_k_px, sizeof(__pyx_k_px), 0, 0, 1, 1},
  {&__pyx_n_s_py, __pyx_k_py, sizeof(__pyx_k_py), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_getbuffer, __pyx_k_pyx_getbuffer, sizeof(__pyx_k_pyx_getbuffer), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_pz, __pyx_k_pz, sizeof(__pyx_k_pz), 0, 0, 1, 1},
  {&__pyx_n_s_radius, __pyx_k_radius, sizeof(__pyx_k_radius), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rayDir, __pyx_k_rayDir, sizeof(__pyx_k_rayDir), 0, 0, 1, 1},
  {&__pyx_n_s_recenterTrackingOrigin, __pyx_k_recenterTrackingOrigin, sizeof(__pyx_k_recenterTrackingOrigin), 0, 0, 1, 1},
  {&__pyx_n_s_red, __pyx_k_red, sizeof(__pyx_k_red), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_refPose, __pyx_k_refPose, sizeof(__pyx_k_refPose), 0, 0, 1, 1},
  {&__pyx_n_s_refreshPerformanceStats, __pyx_k_refreshPerformanceStats, sizeof(__pyx_k_refreshPerformanceStats), 0, 0, 1, 1},
  {&__pyx_n_s_released, __pyx_k_released, sizeof(__pyx_k_released), 0, 0, 1, 1},
  {&__pyx_n_s_resetBoundaryColor, __pyx_k_resetBoundaryColor, sizeof(__pyx_k_resetBoundaryColor), 0, 0, 1, 1},
  {&__pyx_n_s_resetFrameStats, __pyx_k_resetFrameStats, sizeof(__pyx_k_resetFrameStats), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_n_s_rising, __pyx_k_rising, sizeof(__pyx_k_rising), 0, 0, 1, 1},
  {&__pyx_n_s_rm, __pyx_k_rm, sizeof(__pyx_k_rm), 0, 0, 1, 1},
  {&__pyx_n_s_rw, __pyx_k_rw, sizeof(__pyx_k_rw), 0, 0, 1, 1},
  {&__pyx_n_s_rx, __pyx_k_rx, sizeof(__pyx_k_rx), 0, 0, 1, 1},
  {&__pyx_n_s_ry, __pyx_k_ry, sizeof(__pyx_k_ry), 0, 0, 1, 1},
  {&__pyx_n_s_rz, __pyx_k_rz, sizeof(__pyx_k_rz), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_setBoundaryColor, __pyx_k_setBoundaryColor, sizeof(__pyx_k_setBoundaryColor), 0, 0, 1, 1},
  {&__pyx_n_s_setControllerVibration, __pyx_k_setControllerVibration, sizeof(__pyx_k_setControllerVibration), 0, 0, 1, 1},
  {&__pyx_n_s_setEyeColorTextureSwapChain, __pyx_k_setEyeColorTextureSwapChain, sizeof(__pyx_k_setEyeColorTextureSwapChain), 0, 0, 1, 1},
  {&__pyx_n_s_setEyeRenderFov, __pyx_k_setEyeRenderFov, sizeof(__pyx_k_setEyeRenderFov), 0, 0, 1, 1},
  {&__pyx_n_s_setEyeRenderPose, __pyx_k_setEyeRenderPose, sizeof(__pyx_k_setEyeRenderPose), 0, 0, 1, 1},
  {&__pyx_n_s_setEyeRenderViewport, __pyx_k_setEyeRenderViewport, sizeof(__pyx_k_setEyeRenderViewport), 0, 0, 1, 1},
  {&__pyx_n_s_setHeadLocked, __pyx_k_setHeadLocked, sizeof(__pyx_k_setHeadLocked), 0, 0, 1, 1},
  {&__pyx_n_s_setHighQuality, __pyx_k_setHighQuality, sizeof(__pyx_k_setHighQuality), 0, 0, 1, 1},
  {&__pyx_n_s_setHmdToEyePose, __pyx_k_setHmdToEyePose, sizeof(__pyx_k_setHmdToEyePose), 0, 0, 1, 1},
  {&__pyx_n_s_setTrackingOriginType, __pyx_k_setTrackingOriginType, sizeof(__pyx_k_setTrackingOriginType), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_showBoundary, __pyx_k_showBoundary, sizeof(__pyx_k_showBoundary), 0, 0, 1, 1},
  {&__pyx_n_s_shutdown, __pyx_k_shutdown, sizeof(__pyx_k_shutdown), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_specifyTrackingOrigin, __pyx_k_specifyTrackingOrigin, sizeof(__pyx_k_specifyTrackingOrigin), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_stat, __pyx_k_stat, sizeof(__pyx_k_stat), 0, 0, 1, 1},
  {&__pyx_n_s_statIdx, __pyx_k_statIdx, sizeof(__pyx_k_statIdx), 0, 0, 1, 1},
  {&__pyx_n_s_stateResult, __pyx_k_stateResult, sizeof(__pyx_k_stateResult), 0, 0, 1, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
  {&__pyx_n_s_success, __pyx_k_success, sizeof(__pyx_k_success), 0, 0, 1, 1},
  {&__pyx_n_s_swapChain, __pyx_k_swapChain, sizeof(__pyx_k_swapChain), 0, 0, 1, 1},
  {&__pyx_n_s_swapConfig, __pyx_k_swapConfig, sizeof(__pyx_k_swapConfig), 0, 0, 1, 1},
  {&__pyx_n_s_t_sec, __pyx_k_t_sec, sizeof(__pyx_k_t_sec), 0, 0, 1, 1},
  {&__pyx_n_s_targetPose, __pyx_k_targetPose, sizeof(__pyx_k_targetPose), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_testState, __pyx_k_testState, sizeof(__pyx_k_testState), 0, 0, 1, 1},
  {&__pyx_n_s_tex_id, __pyx_k_tex_id, sizeof(__pyx_k_tex_id), 0, 0, 1, 1},
  {&__pyx_n_s_texelsPerPixel, __pyx_k_texelsPerPixel, sizeof(__pyx_k_texelsPerPixel), 0, 0, 1, 1},
  {&__pyx_n_s_textureFormat, __pyx_k_textureFormat, sizeof(__pyx_k_textureFormat), 0, 0, 1, 1},
  {&__pyx_n_s_thisPose, __pyx_k_thisPose, sizeof(__pyx_k_thisPose), 0, 0, 1, 1},
  {&__pyx_n_s_thumbstick_x0, __pyx_k_thumbstick_x0, sizeof(__pyx_k_thumbstick_x0), 0, 0, 1, 1},
  {&__pyx_n_s_thumbstick_x1, __pyx_k_thumbstick_x1, sizeof(__pyx_k_thumbstick_x1), 0, 0, 1, 1},
  {&__pyx_n_s_thumbstick_y0, __pyx_k_thumbstick_y0, sizeof(__pyx_k_thumbstick_y0), 0, 0, 1, 1},
  {&__pyx_n_s_thumbstick_y1, __pyx_k_thumbstick_y1, sizeof(__pyx_k_thumbstick_y1), 0, 0, 1, 1},
  {&__pyx_n_s_timeInSeconds, __pyx_k_timeInSeconds, sizeof(__pyx_k_timeInSeconds), 0, 0, 1, 1},
  {&__pyx_n_s_timeoutMS, __pyx_k_timeoutMS, sizeof(__pyx_k_timeoutMS), 0, 0, 1, 1},
  {&__pyx_n_s_timeout_ms, __pyx_k_timeout_ms, sizeof(__pyx_k_timeout_ms), 0, 0, 1, 1},
  {&__pyx_n_s_toPose, __pyx_k_toPose, sizeof(__pyx_k_toPose), 0, 0, 1, 1},
  {&__pyx_n_s_toReturn, __pyx_k_toReturn, sizeof(__pyx_k_toReturn), 0, 0, 1, 1},
  {&__pyx_n_s_to_return, __pyx_k_to_return, sizeof(__pyx_k_to_return), 0, 0, 1, 1},
  {&__pyx_n_s_touch, __pyx_k_touch, sizeof(__pyx_k_touch), 0, 0, 1, 1},
  {&__pyx_n_s_trackerCount, __pyx_k_trackerCount, sizeof(__pyx_k_trackerCount), 0, 0, 1, 1},
  {&__pyx_n_s_trackerIndex, __pyx_k_trackerIndex, sizeof(__pyx_k_trackerIndex), 0, 0, 1, 1},
  {&__pyx_n_s_triggerLeft, __pyx_k_triggerLeft, sizeof(__pyx_k_triggerLeft), 0, 0, 1, 1},
  {&__pyx_n_s_triggerRight, __pyx_k_triggerRight, sizeof(__pyx_k_triggerRight), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
  {&__pyx_n_s_unqualifedSuccess, __pyx_k_unqualifedSuccess, sizeof(__pyx_k_unqualifedSuccess), 0, 0, 1, 1},
  {&__pyx_n_s_up, __pyx_k_up, sizeof(__pyx_k_up), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_updateInputState, __pyx_k_updateInputState, sizeof(__pyx_k_updateInputState), 0, 0, 1, 1},
  {&__pyx_n_s_updatePerfStats, __pyx_k_updatePerfStats, sizeof(__pyx_k_updatePerfStats), 0, 0, 1, 1},
  {&__pyx_n_s_use_marker, __pyx_k_use_marker, sizeof(__pyx_k_use_marker), 0, 0, 1, 1},
  {&__pyx_n_s_vals, __pyx_k_vals, sizeof(__pyx_k_vals), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_vec_out, __pyx_k_vec_out, sizeof(__pyx_k_vec_out), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_waitToBeginFrame, __pyx_k_waitToBeginFrame, sizeof(__pyx_k_waitToBeginFrame), 0, 0, 1, 1},
  {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 348, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(0, 696, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 1115, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(0, 3795, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 4268, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 4397, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 1038, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 151, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(1, 400, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(1, 609, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "psychxr/libovr/_libovr.pyx":649
 *     cdef np.ndarray _ori
 * 
 *     def __init__(self, pos=(0., 0., 0.), ori=(0., 0., 0., 1.)):             # <<<<<<<<<<<<<<
 *         """
 *         Parameters
 */
  __pyx_tuple__2 = PyTuple_Pack(3, __pyx_float_0_, __pyx_float_0_, __pyx_float_0_); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_tuple__3 = PyTuple_Pack(4, __pyx_float_0_, __pyx_float_0_, __pyx_float_0_, __pyx_float_1_); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "psychxr/libovr/_libovr.pyx":779
 *     @pos.setter
 *     def pos(self, object value):
 *         self._pos[:] = value             # <<<<<<<<<<<<<<
 * 
 *     # def getPos(self, object outVector=None):
 */
  __pyx_slice__4 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__4)) __PYX_ERR(0, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__4);
  __Pyx_GIVEREF(__pyx_slice__4);

  /* "psychxr/libovr/_libovr.pyx":978
 *         cdef np.ndarray[np.float32_t, ndim=1] toReturn
 *         if outVector is None:
 *             toReturn = np.zeros((3,), dtype=np.float32)             # <<<<<<<<<<<<<<
 *         else:
 *             toReturn = outVector
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_int_3); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_tuple__5); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "psychxr/libovr/_libovr.pyx":1108
 * 
 *         cdef np.ndarray[np.float32_t, ndim=2] to_return = \
 *             np.zeros((4, 4), dtype=np.float32)             # <<<<<<<<<<<<<<
 * 
 *         # fast copy matrix to numpy array
 */
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_int_4, __pyx_int_4); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_tuple__7); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "psychxr/libovr/_libovr.pyx":1376
 *             (<libovr_math.Posef>self.c_data[0]).Translation.Distance(pos_in)
 * 
 *     def raycastSphere(self, object targetPose, float radius=0.5, object rayDir=(0., 0., -1.), float maxRange=0.0):             # <<<<<<<<<<<<<<
 *         """Raycast to a sphere.
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(3, __pyx_float_0_, __pyx_float_0_, __pyx_float_neg_1_); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 1376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "psychxr/libovr/_libovr.pyx":2858
 *     # check if there is a swap chain in the slot
 *     if _eyeLayer.ColorTexture[swapChain] == NULL:
 *         raise RuntimeError(             # <<<<<<<<<<<<<<
 *             "Cannot get swap chain length, NULL eye buffer texture.")
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_Cannot_get_swap_chain_length_NUL); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 2858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "psychxr/libovr/_libovr.pyx":2891
 *     # check if there is a swap chain in the slot
 *     if _eyeLayer.ColorTexture[swapChain] == NULL:
 *         raise RuntimeError(             # <<<<<<<<<<<<<<
 *             "Cannot get buffer ID, NULL eye buffer texture.")
 * 
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_Cannot_get_buffer_ID_NULL_eye_bu); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 2891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "psychxr/libovr/_libovr.pyx":3351
 *             count * sizeof(libovr_capi.ovrTrackedDeviceType))
 *     if not devices:
 *         raise MemoryError("Failed to allocate array 'devices'.")             # <<<<<<<<<<<<<<
 * 
 *     cdef int i = 0
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_Failed_to_allocate_array_devices); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 3351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "psychxr/libovr/_libovr.pyx":3361
 *             count * sizeof(libovr_capi.ovrPoseStatef))
 *     if not devicePoses:
 *         raise MemoryError("Failed to allocate array 'devicePoses'.")             # <<<<<<<<<<<<<<
 * 
 *     # get the device poses
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_Failed_to_allocate_array_deviceP); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 3361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "psychxr/libovr/_libovr.pyx":3651
 * 
 *     if outRect is None:
 *         to_return = np.zeros((4,), dtype=np.int)             # <<<<<<<<<<<<<<
 *     else:
 *         to_return = outRect
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_int_4); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 3651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_tuple__30); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 3651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "psychxr/libovr/_libovr.pyx":3796
 *         perfHudMode = <int>_performance_hud_modes[mode]
 *     except KeyError:
 *         raise KeyError("Invalid performance HUD mode specified.")             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrBool ret = libovr_capi.ovr_SetInt(
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_Invalid_performance_HUD_mode_spe); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 3796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "psychxr/libovr/_libovr.pyx":4268
 * 
 *     if 0 > frameStatIndex >= _frameStats.FrameStatsCount:
 *         raise IndexError("Frame stats index out of range.")             # <<<<<<<<<<<<<<
 * 
 *     cdef LibOVRFrameStat stat = LibOVRFrameStat()
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_Frame_stats_index_out_of_range); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 4268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "psychxr/libovr/_libovr.pyx":4397
 *         btype = libovr_capi.ovrBoundary_Outer
 *     else:
 *         raise ValueError("Invalid boundary type specified.")             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrVector3f vec_out
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_Invalid_boundary_type_specified); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 4397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "psychxr/libovr/_libovr.pyx":4493
 *         idx = 4
 *     else:
 *         raise ValueError("Invalid controller type specified.")             # <<<<<<<<<<<<<<
 * 
 *     # pointer to the current and previous input state
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_Invalid_controller_type_specifie); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 4493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "psychxr/libovr/_libovr.pyx":4624
 *                       (prvButtons & button) == button
 *     else:
 *         raise ValueError("Invalid trigger mode specified.")             # <<<<<<<<<<<<<<
 * 
 *     return stateResult, t_sec
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_Invalid_trigger_mode_specified); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 4624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "psychxr/libovr/_libovr.pyx":4938
 *         freq = 1.0
 *     else:
 *         raise RuntimeError("Invalid frequency specified.")             # <<<<<<<<<<<<<<
 * 
 *     cdef libovr_capi.ovrResult result = libovr_capi.ovr_SetControllerVibration(
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_Invalid_frequency_specified); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(0, 4938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(2, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_ARRAY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(2, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":306
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(2, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":856
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(2, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":880
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(2, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1038
 *         _import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(2, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "../../AppData/Local/Programs/Python/Python36/lib/site-packages/Cython/Includes/numpy/__init__.pxd":1044
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_s_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(2, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "View.MemoryView":133
 * 
 *         if not self.ndim:
 *             raise ValueError("Empty shape tuple for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_s_Empty_shape_tuple_for_cython_arr); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "View.MemoryView":136
 * 
 *         if itemsize <= 0:
 *             raise ValueError("itemsize <= 0 for cython.array")             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
  __pyx_tuple__46 = PyTuple_Pack(1, __pyx_kp_s_itemsize_0_for_cython_array); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);

  /* "View.MemoryView":148
 * 
 *         if not self._shape:
 *             raise MemoryError("unable to allocate shape and strides.")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_shape_and_str); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(1, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "View.MemoryView":176
 *             self.data = <char *>malloc(self.len)
 *             if not self.data:
 *                 raise MemoryError("unable to allocate array data.")             # <<<<<<<<<<<<<<
 * 
 *             if self.dtype_is_object:
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_s_unable_to_allocate_array_data); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "View.MemoryView":192
 *             bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *         if not (flags & bufmode):
 *             raise ValueError("Can only create a buffer that is contiguous in memory.")             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_kp_s_Can_only_create_a_buffer_that_is); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(1, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "View.MemoryView":414
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError("Cannot assign to read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_kp_s_Cannot_assign_to_read_only_memor); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);

  /* "View.MemoryView":491
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError("Unable to convert item to object")             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
  __pyx_tuple__53 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_convert_item_to_object); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);

  /* "View.MemoryView":516
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError("Cannot create writable memory view from read-only memoryview")             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_kp_s_Cannot_create_writable_memory_vi); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);

  /* "View.MemoryView":566
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError("Buffer view does not expose strides")             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
  __pyx_tuple__55 = PyTuple_Pack(1, __pyx_kp_s_Buffer_view_does_not_expose_stri); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(1, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);

  /* "View.MemoryView":573
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__56 = PyTuple_New(1); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  PyTuple_SET_ITEM(__pyx_tuple__56, 0, __pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_tuple__56);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__57 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__58 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);

  /* "View.MemoryView":699
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError("Indirect dimensions not supported")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_Indirect_dimensions_not_supporte); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(1, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(1, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "psychxr/libovr/_libovr.pyx":345
 * #
 * cdef libovr_capi.ovrErrorInfo _last_error_info_  # store our last error here
 * def check_result(result):             # <<<<<<<<<<<<<<
 *     if libovr_capi.OVR_FAILURE(result):
 *         libovr_capi.ovr_GetLastErrorInfo(&_last_error_info_)
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_check_result, 345, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 345, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2283
 * 
 * 
 * def success(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates success."""
 *     return <bint>libovr_capi.OVR_SUCCESS(result)
 */
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_n_s_result, __pyx_n_s_result); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 2283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_success, 2283, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 2283, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2287
 *     return <bint>libovr_capi.OVR_SUCCESS(result)
 * 
 * def unqualifedSuccess(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates unqualified success."""
 *     return <bint>libovr_capi.OVR_UNQUALIFIED_SUCCESS(result)
 */
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_n_s_result, __pyx_n_s_result); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 2287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_unqualifedSuccess, 2287, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 2287, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2291
 *     return <bint>libovr_capi.OVR_UNQUALIFIED_SUCCESS(result)
 * 
 * def failure(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates failure (error)."""
 *     return <bint>libovr_capi.OVR_FAILURE(result)
 */
  __pyx_tuple__68 = PyTuple_Pack(2, __pyx_n_s_result, __pyx_n_s_result); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 2291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_failure, 2291, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 2291, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2295
 *     return <bint>libovr_capi.OVR_FAILURE(result)
 * 
 * def isOculusServiceRunning(int timeoutMS=100):             # <<<<<<<<<<<<<<
 *     """Check if the Oculus Runtime is loaded and running.
 * 
 */
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_n_s_timeoutMS, __pyx_n_s_result); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 2295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_isOculusServiceRunning, 2295, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 2295, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2313
 *     return <bint>result.IsOculusServiceRunning
 * 
 * def isHmdConnected(int timeout_ms=100):             # <<<<<<<<<<<<<<
 *     """Check if an HMD is connected.
 * 
 */
  __pyx_tuple__72 = PyTuple_Pack(2, __pyx_n_s_timeout_ms, __pyx_n_s_result); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 2313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_isHmdConnected, 2313, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 2313, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2331
 *     return <bint>result.IsOculusHMDConnected
 * 
 * def getHmdInfo():             # <<<<<<<<<<<<<<
 *     """Get HMD information.
 * 
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_n_s_toReturn); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 2331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getHmdInfo, 2331, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 2331, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2346
 *     return toReturn
 * 
 * def getUserHeight():             # <<<<<<<<<<<<<<
 *     """User's calibrated height in meters.
 * 
 */
  __pyx_tuple__76 = PyTuple_Pack(1, __pyx_n_s_to_return); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 2346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getUserHeight, 2346, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 2346, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2364
 *     return to_return
 * 
 * def getEyeHeight():             # <<<<<<<<<<<<<<
 *     """Calibrated eye height from floor in meters.
 * 
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_n_s_to_return); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getEyeHeight, 2364, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 2364, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2381
 *     return to_return
 * 
 * def getNeckEyeDist():             # <<<<<<<<<<<<<<
 *     """Distance from the neck to eyes in meters.
 * 
 */
  __pyx_tuple__80 = PyTuple_Pack(2, __pyx_n_s_vals, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 2381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getNeckEyeDist, 2381, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 2381, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2401
 *     return <float> vals[0], <float> vals[1]
 * 
 * def getEyeToNoseDist():             # <<<<<<<<<<<<<<
 *     """Distance between the nose and eyes in meters.
 * 
 */
  __pyx_tuple__82 = PyTuple_Pack(2, __pyx_n_s_vals, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 2401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getEyeToNoseDist, 2401, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 2401, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2421
 *     return <float>vals[0], <float> vals[1]
 * 
 * def initialize(bint focusAware=False, int connectionTimeout=0):             # <<<<<<<<<<<<<<
 *     """Initialize the session.
 * 
 */
  __pyx_tuple__84 = PyTuple_Pack(4, __pyx_n_s_focusAware, __pyx_n_s_connectionTimeout, __pyx_n_s_flags, __pyx_n_s_result); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 2421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_initialize, 2421, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 2421, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2465
 *     return result  # failed to initalize, return error code
 * 
 * def create():             # <<<<<<<<<<<<<<
 *     """Create a new session. Control is handed over to the application from
 *     Oculus Home.
 */
  __pyx_tuple__86 = PyTuple_Pack(2, __pyx_n_s_result, __pyx_n_s_i); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 2465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_create, 2465, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 2465, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2507
 *     return result
 * 
 * def destroyTextureSwapChain(int swapChain):             # <<<<<<<<<<<<<<
 *     """Destroy a texture swap chain."""
 *     global _ptrSession
 */
  __pyx_tuple__88 = PyTuple_Pack(2, __pyx_n_s_swapChain, __pyx_n_s_swapChain); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 2507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_destroyTextureSwapChain, 2507, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 2507, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2514
 *     _swapChains[swapChain] = NULL
 * 
 * def destroyMirrorTexture():             # <<<<<<<<<<<<<<
 *     """Destroy the mirror texture."""
 *     global _ptrSession
 */
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_destroyMirrorTexture, 2514, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 2514, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2521
 *         libovr_capi.ovr_DestroyMirrorTexture(_ptrSession, _mirrorTexture)
 * 
 * def destroy():             # <<<<<<<<<<<<<<
 *     """Destroy a session.
 *     """
 */
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_destroy, 2521, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 2521, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2532
 *     libovr_capi.ovr_Destroy(_ptrSession)
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """End the current session.
 * 
 */
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_shutdown, 2532, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 2532, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2542
 *     libovr_capi.ovr_Shutdown()
 * 
 * def getGraphicsLUID():             # <<<<<<<<<<<<<<
 *     """The graphics device LUID."""
 *     global _gfxLuid
 */
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getGraphicsLUID, 2542, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 2542, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2547
 *     return _gfxLuid.Reserved.decode('utf-8')
 * 
 * def setHighQuality(bint enable):             # <<<<<<<<<<<<<<
 *     """Enable high quality mode.
 *     """
 */
  __pyx_tuple__94 = PyTuple_Pack(2, __pyx_n_s_enable, __pyx_n_s_enable); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 2547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_setHighQuality, 2547, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 2547, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2556
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HighQuality
 * 
 * def setHeadLocked(bint enable):             # <<<<<<<<<<<<<<
 *     """True when head-locked mode is enabled.
 * 
 */
  __pyx_tuple__96 = PyTuple_Pack(2, __pyx_n_s_enable, __pyx_n_s_enable); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 2556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_setHeadLocked, 2556, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 2556, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2569
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HeadLocked
 * 
 * def getPixelsPerTanAngleAtCenter(int eye):             # <<<<<<<<<<<<<<
 *     """Get pixels per tan angle at te center of the display.
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(3, __pyx_n_s_eye, __pyx_n_s_eye, __pyx_n_s_toReturn); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 2569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getPixelsPerTanAngleAtCenter, 2569, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 2569, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2594
 *     return toReturn.x, toReturn.y
 * 
 * def getDistortedViewport(int eye):             # <<<<<<<<<<<<<<
 *     """Get the distorted viewport.
 * 
 */
  __pyx_tuple__100 = PyTuple_Pack(4, __pyx_n_s_eye, __pyx_n_s_eye, __pyx_n_s_distVp, __pyx_n_s_toReturn); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getDistortedViewport, 2594, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 2594, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2617
 *     return toReturn
 * 
 * def getEyeRenderFov(int eye):             # <<<<<<<<<<<<<<
 *     """Get the field-of-view to use for rendering.
 * 
 */
  __pyx_tuple__102 = PyTuple_Pack(3, __pyx_n_s_eye, __pyx_n_s_eye, __pyx_n_s_to_return); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 2617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getEyeRenderFov, 2617, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 2617, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2656
 *     return to_return
 * 
 * def setEyeRenderFov(int eye, object fov):             # <<<<<<<<<<<<<<
 *     """Set the field-of-view of a given eye. This is used to compute the
 *     projection matrix.
 */
  __pyx_tuple__104 = PyTuple_Pack(3, __pyx_n_s_eye, __pyx_n_s_fov, __pyx_n_s_fov_in); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 2656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_setEyeRenderFov, 2656, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 2656, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2700
 *     _eyeLayer.Fov[eye] = _eyeRenderDesc[eye].Fov
 * 
 * def getEyeAspectRatio(int eye):             # <<<<<<<<<<<<<<
 *     """Get the aspect ratio of an eye.
 * 
 */
  __pyx_tuple__106 = PyTuple_Pack(3, __pyx_n_s_eye, __pyx_n_s_eye, __pyx_n_s_fovPort); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 2700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getEyeAspectRatio, 2700, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 2700, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2721
 *            (fovPort.UpTan + fovPort.DownTan)
 * 
 * def getEyeHorizontalFovRadians(int eye):             # <<<<<<<<<<<<<<
 *     """Get the angle of the horizontal field-of-view (FOV) for a given eye.
 * 
 */
  __pyx_tuple__108 = PyTuple_Pack(3, __pyx_n_s_eye, __pyx_n_s_eye, __pyx_n_s_fovPort); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 2721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getEyeHorizontalFovRadians, 2721, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 2721, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2741
 *     return fovPort.GetHorizontalFovRadians()
 * 
 * def getEyeVerticalFovRadians(int eye):             # <<<<<<<<<<<<<<
 *     """Get the angle of the vertical field-of-view (FOV) for a given eye.
 * 
 */
  __pyx_tuple__110 = PyTuple_Pack(3, __pyx_n_s_eye, __pyx_n_s_eye, __pyx_n_s_fovPort); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 2741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getEyeVerticalFovRadians, 2741, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 2741, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2761
 *     return fovPort.GetVerticalFovRadians()
 * 
 * def getEyeFocalLength(int eye):             # <<<<<<<<<<<<<<
 *     """Get the focal length of the eye's frustum.
 * 
 */
  __pyx_tuple__112 = PyTuple_Pack(2, __pyx_n_s_eye, __pyx_n_s_eye); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 2761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getEyeFocalLength, 2761, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 2761, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2778
 *     return 1.0 / tan(getEyeHorizontalFovRadians(eye) / 2.0)
 * 
 * def calcEyeBufferSize(int eye, float texelsPerPixel=1.0):             # <<<<<<<<<<<<<<
 *     """Get the recommended buffer (texture) sizes for eye buffers.
 * 
 */
  __pyx_tuple__114 = PyTuple_Pack(3, __pyx_n_s_eye, __pyx_n_s_texelsPerPixel, __pyx_n_s_buffSize); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 2778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_calcEyeBufferSize, 2778, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 2778, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2834
 *     return buffSize.w, buffSize.h
 * 
 * def getTextureSwapChainLengthGL(int swapChain):             # <<<<<<<<<<<<<<
 *     """Get the length of a specified swap chain.
 * 
 */
  __pyx_tuple__116 = PyTuple_Pack(4, __pyx_n_s_swapChain, __pyx_n_s_swapChain, __pyx_n_s_outLength, __pyx_n_s_result); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 2834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getTextureSwapChainLengthGL, 2834, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 2834, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2867
 *     return result, outLength
 * 
 * def getTextureSwapChainCurrentIndex(int swapChain):             # <<<<<<<<<<<<<<
 *     """Get the current buffer index within the swap chain.
 * 
 */
  __pyx_tuple__118 = PyTuple_Pack(4, __pyx_n_s_swapChain, __pyx_n_s_swapChain, __pyx_n_s_current_idx, __pyx_n_s_result); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 2867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(1, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getTextureSwapChainCurrentIndex, 2867, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 2867, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2900
 *     return result, current_idx
 * 
 * def getTextureSwapChainBufferGL(int swapChain, int index):             # <<<<<<<<<<<<<<
 *     """Get the texture buffer as an OpenGL name at a specific index in the
 *     swap chain for a given swapChain.
 */
  __pyx_tuple__120 = PyTuple_Pack(4, __pyx_n_s_swapChain, __pyx_n_s_index, __pyx_n_s_tex_id, __pyx_n_s_result); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 2900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getTextureSwapChainBufferGL, 2900, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 2900, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":2946
 *     return result, tex_id
 * 
 * def createTextureSwapChainGL(int swapChain, int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB, int levels=1):             # <<<<<<<<<<<<<<
 *     """Create a texture swap chain for eye image buffers.
 * 
 */
  __pyx_tuple__122 = PyTuple_Pack(7, __pyx_n_s_swapChain, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_textureFormat, __pyx_n_s_levels, __pyx_n_s_swapConfig, __pyx_n_s_result); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 2946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(5, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_createTextureSwapChainGL, 2946, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 2946, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3019
 *     return result
 * 
 * def setEyeColorTextureSwapChain(int eye, int swapChain):             # <<<<<<<<<<<<<<
 *     """Set the color texture swap chain for a given eye.
 * 
 */
  __pyx_tuple__124 = PyTuple_Pack(2, __pyx_n_s_eye, __pyx_n_s_swapChain); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 3019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_setEyeColorTextureSwapChain, 3019, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 3019, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3065
 *     _eyeLayer.ColorTexture[eye] = _swapChains[swapChain]
 * 
 * def createMirrorTexture(int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB):             # <<<<<<<<<<<<<<
 *     """Create a mirror texture.
 * 
 */
  __pyx_tuple__126 = PyTuple_Pack(5, __pyx_n_s_width, __pyx_n_s_height, __pyx_n_s_textureFormat, __pyx_n_s_mirrorDesc, __pyx_n_s_result); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(0, 3065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_createMirrorTexture, 3065, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(0, 3065, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3128
 *     return <int>result
 * 
 * def getMirrorTexture():             # <<<<<<<<<<<<<<
 *     """Mirror texture ID.
 * 
 */
  __pyx_tuple__128 = PyTuple_Pack(2, __pyx_n_s_mirror_id, __pyx_n_s_result); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(0, 3128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getMirrorTexture, 3128, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(0, 3128, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3170
 * 
 * 
 * def getTrackingState(double absTime, bint latencyMarker=True):             # <<<<<<<<<<<<<<
 *     """Get the current poses of the head and hands.
 * 
 */
  __pyx_tuple__130 = PyTuple_Pack(4, __pyx_n_s_absTime, __pyx_n_s_latencyMarker, __pyx_n_s_use_marker, __pyx_n_s_toReturn); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(0, 3170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getTrackingState, 3170, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(0, 3170, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3273
 * #     return result, devicePose
 * 
 * def getDevicePoses(object deviceTypes, double absTime, bint latencyMarker=True):             # <<<<<<<<<<<<<<
 *     """Get tracked device poses.
 * 
 */
  __pyx_tuple__132 = PyTuple_Pack(10, __pyx_n_s_deviceTypes, __pyx_n_s_absTime, __pyx_n_s_latencyMarker, __pyx_n_s_count, __pyx_n_s_devices, __pyx_n_s_i, __pyx_n_s_devicePoses, __pyx_n_s_result, __pyx_n_s_outPoses, __pyx_n_s_thisPose); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(0, 3273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(3, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getDevicePoses, 3273, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(0, 3273, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3385
 *     return result, outPoses
 * 
 * def calcEyePoses(LibOVRPose headPose):             # <<<<<<<<<<<<<<
 *     """Calculate eye poses using a given pose state.
 * 
 */
  __pyx_tuple__134 = PyTuple_Pack(8, __pyx_n_s_headPose, __pyx_n_s_hmdToEyePoses, __pyx_n_s_pos, __pyx_n_s_ori, __pyx_n_s_up, __pyx_n_s_forward, __pyx_n_s_rm, __pyx_n_s_eye); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(0, 3385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(1, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_calcEyePoses, 3385, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(0, 3385, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3465
 *             _eyeProjectionMatrix[eye] * _eyeViewMatrix[eye]
 * 
 * def getHmdToEyePose(int eye):             # <<<<<<<<<<<<<<
 *     """HMD to eye poses.
 * 
 */
  __pyx_tuple__136 = PyTuple_Pack(2, __pyx_n_s_eye, __pyx_n_s_eye); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(0, 3465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getHmdToEyePose, 3465, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(0, 3465, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3496
 *     return LibOVRPose.fromPtr(&_eyeRenderDesc[eye].HmdToEyePose)
 * 
 * def setHmdToEyePose(int eye, LibOVRPose eyePose):             # <<<<<<<<<<<<<<
 *     """Set the HMD eye poses.
 * 
 */
  __pyx_tuple__138 = PyTuple_Pack(2, __pyx_n_s_eye, __pyx_n_s_eyePose); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(0, 3496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_setHmdToEyePose, 3496, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(0, 3496, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3508
 *     _eyeRenderDesc[0].HmdToEyePose = eyePose.c_data[0]
 * 
 * def getEyeRenderPose(int eye):             # <<<<<<<<<<<<<<
 *     """Get eye render poses.
 * 
 */
  __pyx_tuple__140 = PyTuple_Pack(2, __pyx_n_s_eye, __pyx_n_s_eye); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(0, 3508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getEyeRenderPose, 3508, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(0, 3508, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3536
 *     return LibOVRPose.fromPtr(&_eyeLayer.RenderPose[eye])
 * 
 * def setEyeRenderPose(int eye, LibOVRPose value):             # <<<<<<<<<<<<<<
 *     """Set eye render poses.
 * 
 */
  __pyx_tuple__142 = PyTuple_Pack(7, __pyx_n_s_eye, __pyx_n_s_value, __pyx_n_s_pos, __pyx_n_s_ori, __pyx_n_s_up, __pyx_n_s_forward, __pyx_n_s_rm); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(0, 3536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_setEyeRenderPose, 3536, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(0, 3536, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3572
 *         _eyeProjectionMatrix[eye] * _eyeViewMatrix[eye]
 * 
 * def getEyeProjectionMatrix(int eye, float nearClip=0.01, float farClip=1000.0, object outMatrix=None):             # <<<<<<<<<<<<<<
 *     """Compute the projection matrix.
 * 
 */
  __pyx_tuple__144 = PyTuple_Pack(9, __pyx_n_s_eye, __pyx_n_s_nearClip, __pyx_n_s_farClip, __pyx_n_s_outMatrix, __pyx_n_s_to_return, __pyx_n_s_mv, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_N); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(0, 3572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getEyeProjectionMatrix, 3572, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(0, 3572, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3627
 *         return to_return
 * 
 * def getEyeRenderViewport(int eye, object outRect=None):             # <<<<<<<<<<<<<<
 *     """Get the eye render viewport.
 * 
 */
  __pyx_tuple__146 = PyTuple_Pack(3, __pyx_n_s_eye, __pyx_n_s_outRect, __pyx_n_s_to_return); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(0, 3627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getEyeRenderViewport, 3627, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(0, 3627, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3663
 *         return to_return
 * 
 * def setEyeRenderViewport(int eye, object values):             # <<<<<<<<<<<<<<
 *     """Set the eye render viewport.
 * 
 */
  __pyx_tuple__148 = PyTuple_Pack(2, __pyx_n_s_eye, __pyx_n_s_values); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(0, 3663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_setEyeRenderViewport, 3663, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(0, 3663, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3701
 *     _eyeLayer.Viewport[eye].Size.h = <int>values[3]
 * 
 * def getEyeViewMatrix(int eye, object outMatrix=None):             # <<<<<<<<<<<<<<
 *     """Compute a view matrix for a specified eye.
 * 
 */
  __pyx_tuple__150 = PyTuple_Pack(6, __pyx_n_s_eye, __pyx_n_s_outMatrix, __pyx_n_s_to_return, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_N); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(0, 3701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getEyeViewMatrix, 3701, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(0, 3701, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3739
 *         return to_return
 * 
 * def getPredictedDisplayTime(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Get the predicted time a frame will be displayed.
 * 
 */
  __pyx_tuple__152 = PyTuple_Pack(2, __pyx_n_s_frameIndex, __pyx_n_s_t_sec); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(0, 3739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getPredictedDisplayTime, 3739, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(0, 3739, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3760
 *     return t_sec
 * 
 * def timeInSeconds():             # <<<<<<<<<<<<<<
 *     """Absolute time in seconds.
 * 
 */
  __pyx_tuple__154 = PyTuple_Pack(1, __pyx_n_s_t_sec); if (unlikely(!__pyx_tuple__154)) __PYX_ERR(0, 3760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__154);
  __Pyx_GIVEREF(__pyx_tuple__154);
  __pyx_codeobj__155 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__154, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_timeInSeconds, 3760, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__155)) __PYX_ERR(0, 3760, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3773
 *     return t_sec
 * 
 * def perfHudMode(str mode):             # <<<<<<<<<<<<<<
 *     """Display a performance information HUD.
 * 
 */
  __pyx_tuple__156 = PyTuple_Pack(3, __pyx_n_s_mode, __pyx_n_s_perfHudMode, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__156)) __PYX_ERR(0, 3773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__156);
  __Pyx_GIVEREF(__pyx_tuple__156);
  __pyx_codeobj__157 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__156, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_perfHudMode, 3773, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__157)) __PYX_ERR(0, 3773, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3801
 *         _ptrSession, b"PerfHudMode", perfHudMode)
 * 
 * def hidePerfHud():             # <<<<<<<<<<<<<<
 *     """Hide the performance HUD.
 * 
 */
  __pyx_tuple__158 = PyTuple_Pack(1, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__158)) __PYX_ERR(0, 3801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__158);
  __Pyx_GIVEREF(__pyx_tuple__158);
  __pyx_codeobj__159 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__158, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_hidePerfHud, 3801, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__159)) __PYX_ERR(0, 3801, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3812
 *         _ptrSession, b"PerfHudMode", libovr_capi.ovrPerfHud_Off)
 * 
 * def perfHudModes():             # <<<<<<<<<<<<<<
 *     """List of valid performance HUD modes."""
 *     return [*_performance_hud_modes]
 */
  __pyx_codeobj__160 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_perfHudModes, 3812, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__160)) __PYX_ERR(0, 3812, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3858
 * #     _eyeLayer.Viewport[eye] = viewportRect
 * 
 * def waitToBeginFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Wait until a buffer is available and frame rendering can begin. Must
 *     be called before 'beginFrame'.
 */
  __pyx_tuple__161 = PyTuple_Pack(2, __pyx_n_s_frameIndex, __pyx_n_s_result); if (unlikely(!__pyx_tuple__161)) __PYX_ERR(0, 3858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__161);
  __Pyx_GIVEREF(__pyx_tuple__161);
  __pyx_codeobj__162 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__161, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_waitToBeginFrame, 3858, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__162)) __PYX_ERR(0, 3858, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3882
 *     return <int>result
 * 
 * def beginFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Begin rendering the frame. Must be called prior to drawing and
 *     'endFrame'.
 */
  __pyx_tuple__163 = PyTuple_Pack(2, __pyx_n_s_frameIndex, __pyx_n_s_result); if (unlikely(!__pyx_tuple__163)) __PYX_ERR(0, 3882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__163);
  __Pyx_GIVEREF(__pyx_tuple__163);
  __pyx_codeobj__164 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__163, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_beginFrame, 3882, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__164)) __PYX_ERR(0, 3882, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3903
 *     return <int>result
 * 
 * def commitTextureSwapChain(int eye):             # <<<<<<<<<<<<<<
 *     """Commit changes to a given eye's texture swap chain. When called, the
 *     runtime is notified that the texture is ready for use, and the swap
 */
  __pyx_tuple__165 = PyTuple_Pack(3, __pyx_n_s_eye, __pyx_n_s_eye, __pyx_n_s_result); if (unlikely(!__pyx_tuple__165)) __PYX_ERR(0, 3903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__165);
  __Pyx_GIVEREF(__pyx_tuple__165);
  __pyx_codeobj__166 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__165, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_commitTextureSwapChain, 3903, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__166)) __PYX_ERR(0, 3903, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3936
 *     return <int>result
 * 
 * def endFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Call when rendering a frame has completed. Buffers which have been
 *     committed are passed to the compositor for distortion.
 */
  __pyx_tuple__167 = PyTuple_Pack(3, __pyx_n_s_frameIndex, __pyx_n_s_layers, __pyx_n_s_result); if (unlikely(!__pyx_tuple__167)) __PYX_ERR(0, 3936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__167);
  __Pyx_GIVEREF(__pyx_tuple__167);
  __pyx_codeobj__168 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__167, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_endFrame, 3936, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__168)) __PYX_ERR(0, 3936, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3973
 *     return result
 * 
 * def resetFrameStats():             # <<<<<<<<<<<<<<
 *     """Reset frame statistics.
 * 
 */
  __pyx_tuple__169 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__169)) __PYX_ERR(0, 3973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__169);
  __Pyx_GIVEREF(__pyx_tuple__169);
  __pyx_codeobj__170 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__169, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_resetFrameStats, 3973, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__170)) __PYX_ERR(0, 3973, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":3987
 *     return result
 * 
 * def getTrackingOriginType():             # <<<<<<<<<<<<<<
 *     """Tracking origin type.
 * 
 */
  __pyx_tuple__171 = PyTuple_Pack(1, __pyx_n_s_origin); if (unlikely(!__pyx_tuple__171)) __PYX_ERR(0, 3987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__171);
  __Pyx_GIVEREF(__pyx_tuple__171);
  __pyx_codeobj__172 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__171, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getTrackingOriginType, 3987, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__172)) __PYX_ERR(0, 3987, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4004
 *         return 'eye'
 * 
 * def setTrackingOriginType(str value):             # <<<<<<<<<<<<<<
 *     cdef libovr_capi.ovrResult result
 *     global _ptrSession
 */
  __pyx_tuple__173 = PyTuple_Pack(2, __pyx_n_s_value, __pyx_n_s_result); if (unlikely(!__pyx_tuple__173)) __PYX_ERR(0, 4004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__173);
  __Pyx_GIVEREF(__pyx_tuple__173);
  __pyx_codeobj__174 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__173, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_setTrackingOriginType, 4004, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__174)) __PYX_ERR(0, 4004, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4016
 *     return result
 * 
 * def recenterTrackingOrigin():             # <<<<<<<<<<<<<<
 *     """Recenter the tracking origin.
 * 
 */
  __pyx_tuple__175 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__175)) __PYX_ERR(0, 4016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__175);
  __Pyx_GIVEREF(__pyx_tuple__175);
  __pyx_codeobj__176 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__175, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_recenterTrackingOrigin, 4016, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__176)) __PYX_ERR(0, 4016, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4030
 *     return result
 * 
 * def specifyTrackingOrigin(LibOVRPose newOrigin):             # <<<<<<<<<<<<<<
 *     """Specify a new tracking origin.
 * 
 */
  __pyx_tuple__177 = PyTuple_Pack(2, __pyx_n_s_newOrigin, __pyx_n_s_result); if (unlikely(!__pyx_tuple__177)) __PYX_ERR(0, 4030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__177);
  __Pyx_GIVEREF(__pyx_tuple__177);
  __pyx_codeobj__178 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__177, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_specifyTrackingOrigin, 4030, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__178)) __PYX_ERR(0, 4030, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4046
 *     return result
 * 
 * def clearShouldRecenterFlag():             # <<<<<<<<<<<<<<
 *     """Clear the `shouldRecenter` flag.
 * 
 */
  __pyx_codeobj__179 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_clearShouldRecenterFlag, 4046, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__179)) __PYX_ERR(0, 4046, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4053
 *     libovr_capi.ovr_ClearShouldRecenterFlag(_ptrSession)
 * 
 * def getTrackerCount():             # <<<<<<<<<<<<<<
 *     """Get the number of attached trackers."""
 *     global _ptrSession
 */
  __pyx_tuple__180 = PyTuple_Pack(1, __pyx_n_s_trackerCount); if (unlikely(!__pyx_tuple__180)) __PYX_ERR(0, 4053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__180);
  __Pyx_GIVEREF(__pyx_tuple__180);
  __pyx_codeobj__181 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__180, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getTrackerCount, 4053, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__181)) __PYX_ERR(0, 4053, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4061
 *     return <int>trackerCount
 * 
 * def getTrackerInfo(int trackerIndex):             # <<<<<<<<<<<<<<
 *     """Get information about a given tracker.
 * 
 */
  __pyx_tuple__182 = PyTuple_Pack(3, __pyx_n_s_trackerIndex, __pyx_n_s_trackerIndex, __pyx_n_s_to_return); if (unlikely(!__pyx_tuple__182)) __PYX_ERR(0, 4061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__182);
  __Pyx_GIVEREF(__pyx_tuple__182);
  __pyx_codeobj__183 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__182, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getTrackerInfo, 4061, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__183)) __PYX_ERR(0, 4061, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4086
 *     return to_return
 * 
 * def refreshPerformanceStats():             # <<<<<<<<<<<<<<
 *     """Refresh performance statistics.
 * 
 */
  __pyx_tuple__184 = PyTuple_Pack(5, __pyx_n_s_result, __pyx_n_s_compFrameStats, __pyx_n_s_statIdx, __pyx_n_s_numStats, __pyx_n_s_frameStat); if (unlikely(!__pyx_tuple__184)) __PYX_ERR(0, 4086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__184);
  __Pyx_GIVEREF(__pyx_tuple__184);
  __pyx_codeobj__185 = (PyObject*)__Pyx_PyCode_New(0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__184, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_refreshPerformanceStats, 4086, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__185)) __PYX_ERR(0, 4086, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4110
 *     return result
 * 
 * def updatePerfStats():             # <<<<<<<<<<<<<<
 *     """Update performance stats.
 * 
 */
  __pyx_tuple__186 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__186)) __PYX_ERR(0, 4110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__186);
  __Pyx_GIVEREF(__pyx_tuple__186);
  __pyx_codeobj__187 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__186, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_updatePerfStats, 4110, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__187)) __PYX_ERR(0, 4110, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4133
 *     return result
 * 
 * def getAdaptiveGpuPerformanceScale():             # <<<<<<<<<<<<<<
 *     """Get the adaptive GPU performance scale.
 * 
 */
  __pyx_codeobj__188 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getAdaptiveGpuPerformanceScale, 4133, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__188)) __PYX_ERR(0, 4133, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4144
 *     return _frameStats.AdaptiveGpuPerformanceScale
 * 
 * def getFrameStatsCount():             # <<<<<<<<<<<<<<
 *     """Get the number of queued compositor statistics.
 * 
 */
  __pyx_codeobj__189 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getFrameStatsCount, 4144, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__189)) __PYX_ERR(0, 4144, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4155
 *     return _frameStats.FrameStatsCount
 * 
 * def anyFrameStatsDropped():             # <<<<<<<<<<<<<<
 *     """Check if frame stats were dropped.
 * 
 */
  __pyx_codeobj__190 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_anyFrameStatsDropped, 4155, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__190)) __PYX_ERR(0, 4155, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4169
 *     return <bint>_frameStats.AnyFrameStatsDropped
 * 
 * def checkAswIsAvailable():             # <<<<<<<<<<<<<<
 *     """Check if ASW is available.
 * 
 */
  __pyx_codeobj__191 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_checkAswIsAvailable, 4169, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__191)) __PYX_ERR(0, 4169, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4180
 *     return <bint>_frameStats.AswIsAvailable
 * 
 * def getVisibleProcessId():             # <<<<<<<<<<<<<<
 *     """Process ID which the performance stats are currently being polled.
 * 
 */
  __pyx_codeobj__192 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getVisibleProcessId, 4180, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__192)) __PYX_ERR(0, 4180, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4192
 *     return <int>_frameStats.VisibleProcessId
 * 
 * def checkAppLastFrameDropped():             # <<<<<<<<<<<<<<
 *     """Check if the application dropped a frame.
 * 
 */
  __pyx_codeobj__193 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_checkAppLastFrameDropped, 4192, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__193)) __PYX_ERR(0, 4192, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4211
 *     return False
 * 
 * def checkCompLastFrameDropped():             # <<<<<<<<<<<<<<
 *     """Check if the compositor dropped a frame.
 * 
 */
  __pyx_codeobj__194 = (PyObject*)__Pyx_PyCode_New(0, 0, 0, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_checkCompLastFrameDropped, 4211, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__194)) __PYX_ERR(0, 4211, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4245
 * #     return toReturn
 * 
 * def getFrameStats(int frameStatIndex=0):             # <<<<<<<<<<<<<<
 *     """Get detailed compositor frame statistics.
 * 
 */
  __pyx_tuple__195 = PyTuple_Pack(2, __pyx_n_s_frameStatIndex, __pyx_n_s_stat); if (unlikely(!__pyx_tuple__195)) __PYX_ERR(0, 4245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__195);
  __Pyx_GIVEREF(__pyx_tuple__195);
  __pyx_codeobj__196 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__195, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getFrameStats, 4245, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__196)) __PYX_ERR(0, 4245, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4275
 *     return stat
 * 
 * def getLastErrorInfo():             # <<<<<<<<<<<<<<
 *     """Get the last error code and information string reported by the API.
 * 
 */
  __pyx_tuple__197 = PyTuple_Pack(3, __pyx_n_s_lastErrorInfo, __pyx_n_s_result, __pyx_n_s_errorString); if (unlikely(!__pyx_tuple__197)) __PYX_ERR(0, 4275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__197);
  __Pyx_GIVEREF(__pyx_tuple__197);
  __pyx_codeobj__198 = (PyObject*)__Pyx_PyCode_New(0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__197, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getLastErrorInfo, 4275, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__198)) __PYX_ERR(0, 4275, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4294
 *     return <int>result, errorString
 * 
 * def setBoundaryColor(float red, float green, float blue):             # <<<<<<<<<<<<<<
 *     """Set the boundary color.
 * 
 */
  __pyx_tuple__199 = PyTuple_Pack(5, __pyx_n_s_red, __pyx_n_s_green, __pyx_n_s_blue, __pyx_n_s_color, __pyx_n_s_result); if (unlikely(!__pyx_tuple__199)) __PYX_ERR(0, 4294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__199);
  __Pyx_GIVEREF(__pyx_tuple__199);
  __pyx_codeobj__200 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__199, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_setBoundaryColor, 4294, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__200)) __PYX_ERR(0, 4294, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4326
 *     return result
 * 
 * def resetBoundaryColor():             # <<<<<<<<<<<<<<
 *     """Reset the boundary color to system default.
 * 
 */
  __pyx_tuple__201 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__201)) __PYX_ERR(0, 4326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__201);
  __Pyx_GIVEREF(__pyx_tuple__201);
  __pyx_codeobj__202 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__201, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_resetBoundaryColor, 4326, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__202)) __PYX_ERR(0, 4326, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4336
 *     return result
 * 
 * def getBoundaryVisible():             # <<<<<<<<<<<<<<
 *     """Check if the Guardian boundary is visible.
 * 
 */
  __pyx_tuple__203 = PyTuple_Pack(2, __pyx_n_s_is_visible, __pyx_n_s_result); if (unlikely(!__pyx_tuple__203)) __PYX_ERR(0, 4336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__203);
  __Pyx_GIVEREF(__pyx_tuple__203);
  __pyx_codeobj__204 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__203, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getBoundaryVisible, 4336, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__204)) __PYX_ERR(0, 4336, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4355
 *     return result, is_visible
 * 
 * def showBoundary():             # <<<<<<<<<<<<<<
 *     """Show the boundary.
 * 
 */
  __pyx_tuple__205 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__205)) __PYX_ERR(0, 4355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__205);
  __Pyx_GIVEREF(__pyx_tuple__205);
  __pyx_codeobj__206 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__205, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_showBoundary, 4355, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__206)) __PYX_ERR(0, 4355, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4368
 *     return result
 * 
 * def hideBoundary():             # <<<<<<<<<<<<<<
 *     """Hide the boundry."""
 *     global _ptrSession
 */
  __pyx_tuple__207 = PyTuple_Pack(1, __pyx_n_s_result); if (unlikely(!__pyx_tuple__207)) __PYX_ERR(0, 4368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__207);
  __Pyx_GIVEREF(__pyx_tuple__207);
  __pyx_codeobj__208 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__207, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_hideBoundary, 4368, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__208)) __PYX_ERR(0, 4368, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4376
 *     return result
 * 
 * def getBoundaryDimensions(str boundaryType='PlayArea'):             # <<<<<<<<<<<<<<
 *     """Get the dimensions of the boundary.
 * 
 */
  __pyx_tuple__209 = PyTuple_Pack(5, __pyx_n_s_boundaryType, __pyx_n_s_btype, __pyx_n_s_vec_out, __pyx_n_s_result, __pyx_n_s_to_return); if (unlikely(!__pyx_tuple__209)) __PYX_ERR(0, 4376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__209);
  __Pyx_GIVEREF(__pyx_tuple__209);
  __pyx_codeobj__210 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__209, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getBoundaryDimensions, 4376, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__210)) __PYX_ERR(0, 4376, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4412
 * #    pass  # TODO: make this work.
 * 
 * def getConnectedControllerTypes():             # <<<<<<<<<<<<<<
 *     """Get connected controller types.
 * 
 */
  __pyx_tuple__211 = PyTuple_Pack(2, __pyx_n_s_result, __pyx_n_s_toReturn); if (unlikely(!__pyx_tuple__211)) __PYX_ERR(0, 4412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__211);
  __Pyx_GIVEREF(__pyx_tuple__211);
  __pyx_codeobj__212 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__211, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getConnectedControllerTypes, 4412, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__212)) __PYX_ERR(0, 4412, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4462
 *     return toReturn
 * 
 * def updateInputState(int controller):             # <<<<<<<<<<<<<<
 *     """Refresh the input state of a controller.
 * 
 */
  __pyx_tuple__213 = PyTuple_Pack(6, __pyx_n_s_controller, __pyx_n_s_controller, __pyx_n_s_idx, __pyx_n_s_previousInputState, __pyx_n_s_currentInputState, __pyx_n_s_result); if (unlikely(!__pyx_tuple__213)) __PYX_ERR(0, 4462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__213);
  __Pyx_GIVEREF(__pyx_tuple__213);
  __pyx_codeobj__214 = (PyObject*)__Pyx_PyCode_New(1, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__213, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_updateInputState, 4462, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__214)) __PYX_ERR(0, 4462, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4512
 *     return result, currentInputState.TimeInSeconds
 * 
 * def getButton(int controller, int button, str testState='continuous'):             # <<<<<<<<<<<<<<
 *     """Get the state of a specified button for a given controller.
 * 
 */
  __pyx_tuple__215 = PyTuple_Pack(8, __pyx_n_s_controller, __pyx_n_s_button, __pyx_n_s_testState, __pyx_n_s_idx, __pyx_n_s_t_sec, __pyx_n_s_curButtons, __pyx_n_s_prvButtons, __pyx_n_s_stateResult); if (unlikely(!__pyx_tuple__215)) __PYX_ERR(0, 4512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__215);
  __Pyx_GIVEREF(__pyx_tuple__215);
  __pyx_codeobj__216 = (PyObject*)__Pyx_PyCode_New(3, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__215, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getButton, 4512, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__216)) __PYX_ERR(0, 4512, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4628
 *     return stateResult, t_sec
 * 
 * def getTouch(str controller, object touch, str testState='continuous'):             # <<<<<<<<<<<<<<
 *     """Get touches for a specified device.
 * 
 */
  __pyx_tuple__217 = PyTuple_Pack(8, __pyx_n_s_controller, __pyx_n_s_touch, __pyx_n_s_testState, __pyx_n_s_idx, __pyx_n_s_t_sec, __pyx_n_s_curTouches, __pyx_n_s_prvTouches, __pyx_n_s_stateResult); if (unlikely(!__pyx_tuple__217)) __PYX_ERR(0, 4628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__217);
  __Pyx_GIVEREF(__pyx_tuple__217);
  __pyx_codeobj__218 = (PyObject*)__Pyx_PyCode_New(3, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__217, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getTouch, 4628, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__218)) __PYX_ERR(0, 4628, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4727
 *     return stateResult, t_sec
 * 
 * def getThumbstickValues(int controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get analog thumbstick values.
 * 
 */
  __pyx_tuple__219 = PyTuple_Pack(8, __pyx_n_s_controller, __pyx_n_s_deadzone, __pyx_n_s_idx, __pyx_n_s_currentInputState, __pyx_n_s_thumbstick_x0, __pyx_n_s_thumbstick_y0, __pyx_n_s_thumbstick_x1, __pyx_n_s_thumbstick_y1); if (unlikely(!__pyx_tuple__219)) __PYX_ERR(0, 4727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__219);
  __Pyx_GIVEREF(__pyx_tuple__219);
  __pyx_codeobj__220 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__219, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getThumbstickValues, 4727, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__220)) __PYX_ERR(0, 4727, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4802
 *            np.array((thumbstick_x1, thumbstick_y1), dtype=np.float32)
 * 
 * def getIndexTriggerValues(int controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get analog index trigger values.
 * 
 */
  __pyx_tuple__221 = PyTuple_Pack(6, __pyx_n_s_controller, __pyx_n_s_deadzone, __pyx_n_s_idx, __pyx_n_s_currentInputState, __pyx_n_s_triggerLeft, __pyx_n_s_triggerRight); if (unlikely(!__pyx_tuple__221)) __PYX_ERR(0, 4802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__221);
  __Pyx_GIVEREF(__pyx_tuple__221);
  __pyx_codeobj__222 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__221, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getIndexTriggerValues, 4802, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__222)) __PYX_ERR(0, 4802, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4859
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)
 * 
 * def getHandTriggerValues(str controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get hand trigger values."""
 *     global _inputStates
 */
  __pyx_tuple__223 = PyTuple_Pack(6, __pyx_n_s_controller, __pyx_n_s_deadzone, __pyx_n_s_idx, __pyx_n_s_currentInputState, __pyx_n_s_triggerLeft, __pyx_n_s_triggerRight); if (unlikely(!__pyx_tuple__223)) __PYX_ERR(0, 4859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__223);
  __Pyx_GIVEREF(__pyx_tuple__223);
  __pyx_codeobj__224 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__223, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getHandTriggerValues, 4859, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__224)) __PYX_ERR(0, 4859, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4893
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)
 * 
 * def setControllerVibration(int controller, str frequency, float amplitude):             # <<<<<<<<<<<<<<
 *     """Vibrate a controller.
 * 
 */
  __pyx_tuple__225 = PyTuple_Pack(5, __pyx_n_s_controller, __pyx_n_s_frequency, __pyx_n_s_amplitude, __pyx_n_s_freq, __pyx_n_s_result); if (unlikely(!__pyx_tuple__225)) __PYX_ERR(0, 4893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__225);
  __Pyx_GIVEREF(__pyx_tuple__225);
  __pyx_codeobj__226 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__225, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_setControllerVibration, 4893, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__226)) __PYX_ERR(0, 4893, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":4948
 *     return result
 * 
 * def getSessionStatus():             # <<<<<<<<<<<<<<
 *     """Get the current session status.
 * 
 */
  __pyx_tuple__227 = PyTuple_Pack(2, __pyx_n_s_to_return, __pyx_n_s_result); if (unlikely(!__pyx_tuple__227)) __PYX_ERR(0, 4948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__227);
  __Pyx_GIVEREF(__pyx_tuple__227);
  __pyx_codeobj__228 = (PyObject*)__Pyx_PyCode_New(0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__227, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_psychxr_libovr__libovr_pyx, __pyx_n_s_getSessionStatus, 4948, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__228)) __PYX_ERR(0, 4948, __pyx_L1_error)

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__229 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__229)) __PYX_ERR(1, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__229);
  __Pyx_GIVEREF(__pyx_tuple__229);

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__230 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__230)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__230);
  __Pyx_GIVEREF(__pyx_tuple__230);

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__231 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__231)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__231);
  __Pyx_GIVEREF(__pyx_tuple__231);

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__232 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__232)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__232);
  __Pyx_GIVEREF(__pyx_tuple__232);

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__233 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__233)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__233);
  __Pyx_GIVEREF(__pyx_tuple__233);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__234 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__234)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__234);
  __Pyx_GIVEREF(__pyx_tuple__234);
  __pyx_codeobj__235 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__234, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__235)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_2_0 = PyFloat_FromDouble(2.0); if (unlikely(!__pyx_float_2_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_neg_1_ = PyFloat_FromDouble(-1.); if (unlikely(!__pyx_float_neg_1_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_6 = PyInt_FromLong(6); if (unlikely(!__pyx_int_6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_7 = PyInt_FromLong(7); if (unlikely(!__pyx_int_7)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_v_7psychxr_6libovr_7_libovr__supported_texture_formats = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_7psychxr_6libovr_7_libovr__performance_hud_modes = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_7psychxr_6libovr_7_libovr__mirror_texture_options = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_7psychxr_6libovr_7_libovr__controller_type_enum = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_7psychxr_6libovr_7_libovr__controller_buttons = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_7psychxr_6libovr_7_libovr__touch_states = ((PyObject*)Py_None); Py_INCREF(Py_None);
  __pyx_v_7psychxr_6libovr_7_libovr__controller_types = ((PyObject*)Py_None); Py_INCREF(Py_None);
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPose = &__pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRPose;
  __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRPose.fromPtr = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *(*)(ovrPosef *, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_10LibOVRPose_fromPtr *__pyx_optional_args))__pyx_f_7psychxr_6libovr_7_libovr_10LibOVRPose_fromPtr;
  __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRPose.newStruct = (void (*)(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPose *, PyObject *, PyObject *))__pyx_f_7psychxr_6libovr_7_libovr_10LibOVRPose_newStruct;
  if (PyType_Ready(&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose.tp_dictoffset && __pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 636, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose___init__.doc = __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose___init__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose, "__mul__"); if (unlikely(!wrapper)) __PYX_ERR(0, 636, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_6__mul__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_6__mul__.doc = __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_6__mul__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_6__mul__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose, "__invert__"); if (unlikely(!wrapper)) __PYX_ERR(0, 636, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_8__invert__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_8__invert__.doc = __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_8__invert__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_8__invert__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose, "__eq__"); if (unlikely(!wrapper)) __PYX_ERR(0, 636, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_10__eq__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_10__eq__.doc = __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_10__eq__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_10__eq__;
    }
  }
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose, "__ne__"); if (unlikely(!wrapper)) __PYX_ERR(0, 636, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_12__ne__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_12__ne__.doc = __pyx_doc_7psychxr_6libovr_7_libovr_10LibOVRPose_12__ne__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7psychxr_6libovr_7_libovr_10LibOVRPose_12__ne__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose.tp_dict, __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPose) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LibOVRPose, (PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose) < 0) __PYX_ERR(0, 636, __pyx_L1_error)
  __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPose = &__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPose;
  __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPoseState = &__pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRPoseState;
  __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRPoseState.fromPtr = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *(*)(ovrPoseStatef *, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_15LibOVRPoseState_fromPtr *__pyx_optional_args))__pyx_f_7psychxr_6libovr_7_libovr_15LibOVRPoseState_fromPtr;
  __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRPoseState.newStruct = (void (*)(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRPoseState *))__pyx_f_7psychxr_6libovr_7_libovr_15LibOVRPoseState_newStruct;
  if (PyType_Ready(&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPoseState) < 0) __PYX_ERR(0, 1483, __pyx_L1_error)
  __pyx_type_7psychxr_6libovr_7_libovr_LibOVRPoseState.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPoseState.tp_dictoffset && __pyx_type_7psychxr_6libovr_7_libovr_LibOVRPoseState.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7psychxr_6libovr_7_libovr_LibOVRPoseState.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPoseState, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 1483, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_15LibOVRPoseState___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_15LibOVRPoseState___init__.doc = __pyx_doc_7psychxr_6libovr_7_libovr_15LibOVRPoseState___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7psychxr_6libovr_7_libovr_15LibOVRPoseState___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPoseState.tp_dict, __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRPoseState) < 0) __PYX_ERR(0, 1483, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LibOVRPoseState, (PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPoseState) < 0) __PYX_ERR(0, 1483, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPoseState) < 0) __PYX_ERR(0, 1483, __pyx_L1_error)
  __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRPoseState = &__pyx_type_7psychxr_6libovr_7_libovr_LibOVRPoseState;
  __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRTrackingState = &__pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRTrackingState;
  __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRTrackingState.fromPtr = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *(*)(ovrTrackingState *, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_fromPtr *__pyx_optional_args))__pyx_f_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_fromPtr;
  __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRTrackingState.newStruct = (void (*)(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRTrackingState *))__pyx_f_7psychxr_6libovr_7_libovr_19LibOVRTrackingState_newStruct;
  if (PyType_Ready(&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackingState) < 0) __PYX_ERR(0, 1656, __pyx_L1_error)
  __pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackingState.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackingState.tp_dictoffset && __pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackingState.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackingState.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackingState, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 1656, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_19LibOVRTrackingState___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_19LibOVRTrackingState___init__.doc = __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRTrackingState___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7psychxr_6libovr_7_libovr_19LibOVRTrackingState___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackingState.tp_dict, __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRTrackingState) < 0) __PYX_ERR(0, 1656, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LibOVRTrackingState, (PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackingState) < 0) __PYX_ERR(0, 1656, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackingState) < 0) __PYX_ERR(0, 1656, __pyx_L1_error)
  __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRTrackingState = &__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackingState;
  if (PyType_Ready(&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo) < 0) __PYX_ERR(0, 1784, __pyx_L1_error)
  __pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo.tp_dictoffset && __pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 1784, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo___init__.doc = __pyx_doc_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7psychxr_6libovr_7_libovr_17LibOVRTrackerInfo___init__;
    }
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LibOVRTrackerInfo, (PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo) < 0) __PYX_ERR(0, 1784, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo) < 0) __PYX_ERR(0, 1784, __pyx_L1_error)
  __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo = &__pyx_type_7psychxr_6libovr_7_libovr_LibOVRTrackerInfo;
  __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRSessionStatus = &__pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRSessionStatus;
  __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRSessionStatus.fromPtr = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *(*)(ovrSessionStatus *, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_fromPtr *__pyx_optional_args))__pyx_f_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_fromPtr;
  __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRSessionStatus.newStruct = (void (*)(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRSessionStatus *))__pyx_f_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus_newStruct;
  if (PyType_Ready(&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRSessionStatus) < 0) __PYX_ERR(0, 1887, __pyx_L1_error)
  __pyx_type_7psychxr_6libovr_7_libovr_LibOVRSessionStatus.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7psychxr_6libovr_7_libovr_LibOVRSessionStatus.tp_dictoffset && __pyx_type_7psychxr_6libovr_7_libovr_LibOVRSessionStatus.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7psychxr_6libovr_7_libovr_LibOVRSessionStatus.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #if CYTHON_COMPILING_IN_CPYTHON
  {
    PyObject *wrapper = PyObject_GetAttrString((PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRSessionStatus, "__init__"); if (unlikely(!wrapper)) __PYX_ERR(0, 1887, __pyx_L1_error)
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus___init__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus___init__.doc = __pyx_doc_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus___init__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_7psychxr_6libovr_7_libovr_19LibOVRSessionStatus___init__;
    }
  }
  #endif
  if (__Pyx_SetVtable(__pyx_type_7psychxr_6libovr_7_libovr_LibOVRSessionStatus.tp_dict, __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRSessionStatus) < 0) __PYX_ERR(0, 1887, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LibOVRSessionStatus, (PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRSessionStatus) < 0) __PYX_ERR(0, 1887, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRSessionStatus) < 0) __PYX_ERR(0, 1887, __pyx_L1_error)
  __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRSessionStatus = &__pyx_type_7psychxr_6libovr_7_libovr_LibOVRSessionStatus;
  __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRHmdInfo = &__pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRHmdInfo;
  __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRHmdInfo.fromPtr = (struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *(*)(ovrHmdDesc *, struct __pyx_opt_args_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_fromPtr *__pyx_optional_args))__pyx_f_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_fromPtr;
  __pyx_vtable_7psychxr_6libovr_7_libovr_LibOVRHmdInfo.newStruct = (void (*)(struct __pyx_obj_7psychxr_6libovr_7_libovr_LibOVRHmdInfo *))__pyx_f_7psychxr_6libovr_7_libovr_13LibOVRHmdInfo_newStruct;
  if (PyType_Ready(&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRHmdInfo) < 0) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_type_7psychxr_6libovr_7_libovr_LibOVRHmdInfo.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7psychxr_6libovr_7_libovr_LibOVRHmdInfo.tp_dictoffset && __pyx_type_7psychxr_6libovr_7_libovr_LibOVRHmdInfo.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7psychxr_6libovr_7_libovr_LibOVRHmdInfo.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type_7psychxr_6libovr_7_libovr_LibOVRHmdInfo.tp_dict, __pyx_vtabptr_7psychxr_6libovr_7_libovr_LibOVRHmdInfo) < 0) __PYX_ERR(0, 1990, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LibOVRHmdInfo, (PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRHmdInfo) < 0) __PYX_ERR(0, 1990, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRHmdInfo) < 0) __PYX_ERR(0, 1990, __pyx_L1_error)
  __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRHmdInfo = &__pyx_type_7psychxr_6libovr_7_libovr_LibOVRHmdInfo;
  if (PyType_Ready(&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRFrameStat) < 0) __PYX_ERR(0, 2216, __pyx_L1_error)
  __pyx_type_7psychxr_6libovr_7_libovr_LibOVRFrameStat.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_7psychxr_6libovr_7_libovr_LibOVRFrameStat.tp_dictoffset && __pyx_type_7psychxr_6libovr_7_libovr_LibOVRFrameStat.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_7psychxr_6libovr_7_libovr_LibOVRFrameStat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_LibOVRFrameStat, (PyObject *)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRFrameStat) < 0) __PYX_ERR(0, 2216, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_7psychxr_6libovr_7_libovr_LibOVRFrameStat) < 0) __PYX_ERR(0, 2216, __pyx_L1_error)
  __pyx_ptype_7psychxr_6libovr_7_libovr_LibOVRFrameStat = &__pyx_type_7psychxr_6libovr_7_libovr_LibOVRFrameStat;
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  if (PyType_Ready(&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  __pyx_type___pyx_array.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type___pyx_array.tp_dict, __pyx_vtabptr_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_array) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  __pyx_array_type = &__pyx_type___pyx_array;
  if (PyType_Ready(&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 279, __pyx_L1_error)
  __pyx_type___pyx_MemviewEnum.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_MemviewEnum.tp_dictoffset && __pyx_type___pyx_MemviewEnum.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_MemviewEnum.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_MemviewEnum) < 0) __PYX_ERR(1, 279, __pyx_L1_error)
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  if (PyType_Ready(&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  __pyx_type___pyx_memoryview.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryview.tp_dictoffset && __pyx_type___pyx_memoryview.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryview.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryview.tp_dict, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryview) < 0) __PYX_ERR(1, 330, __pyx_L1_error)
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_type___pyx_memoryviewslice.tp_base = __pyx_memoryview_type;
  if (PyType_Ready(&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 961, __pyx_L1_error)
  __pyx_type___pyx_memoryviewslice.tp_print = 0;
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type___pyx_memoryviewslice.tp_dictoffset && __pyx_type___pyx_memoryviewslice.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type___pyx_memoryviewslice.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (__Pyx_SetVtable(__pyx_type___pyx_memoryviewslice.tp_dict, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(1, 961, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type___pyx_memoryviewslice) < 0) __PYX_ERR(1, 961, __pyx_L1_error)
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(3, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 206, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 229, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 233, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 242, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_libovr(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_libovr(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__libovr(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__libovr(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__libovr(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  static npy_intp __pyx_t_4[1];
  static npy_intp __pyx_t_5[1];
  static npy_intp __pyx_t_6[2];
  static PyThread_type_lock __pyx_t_7[8];
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_libovr' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__libovr(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_libovr", __pyx_methods, __pyx_k_This_extension_module_exposes_th, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_psychxr__libovr___libovr) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "psychxr.libovr._libovr")) {
      if (unlikely(PyDict_SetItemString(modules, "psychxr.libovr._libovr", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  if (unlikely(__Pyx_modinit_type_import_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "psychxr/libovr/_libovr.pyx":46
 * #-------------------
 * #
 * __author__ = "Matthew D. Cutone"             # <<<<<<<<<<<<<<
 * __credits__ = ["Laurie M. Wilcox"]
 * __copyright__ = "Copyright 2019 Matthew D. Cutone"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Matthew_D_Cutone) < 0) __PYX_ERR(0, 46, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":47
 * #
 * __author__ = "Matthew D. Cutone"
 * __credits__ = ["Laurie M. Wilcox"]             # <<<<<<<<<<<<<<
 * __copyright__ = "Copyright 2019 Matthew D. Cutone"
 * __license__ = "MIT"
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_s_Laurie_M_Wilcox);
  __Pyx_GIVEREF(__pyx_kp_s_Laurie_M_Wilcox);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_s_Laurie_M_Wilcox);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_credits, __pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":48
 * __author__ = "Matthew D. Cutone"
 * __credits__ = ["Laurie M. Wilcox"]
 * __copyright__ = "Copyright 2019 Matthew D. Cutone"             # <<<<<<<<<<<<<<
 * __license__ = "MIT"
 * __version__ = "0.2.0"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_copyright, __pyx_kp_s_Copyright_2019_Matthew_D_Cutone) < 0) __PYX_ERR(0, 48, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":49
 * __credits__ = ["Laurie M. Wilcox"]
 * __copyright__ = "Copyright 2019 Matthew D. Cutone"
 * __license__ = "MIT"             # <<<<<<<<<<<<<<
 * __version__ = "0.2.0"
 * __status__ = "Beta"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_license, __pyx_n_s_MIT) < 0) __PYX_ERR(0, 49, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":50
 * __copyright__ = "Copyright 2019 Matthew D. Cutone"
 * __license__ = "MIT"
 * __version__ = "0.2.0"             # <<<<<<<<<<<<<<
 * __status__ = "Beta"
 * __maintainer__ = "Matthew D. Cutone"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_kp_s_0_2_0) < 0) __PYX_ERR(0, 50, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":51
 * __license__ = "MIT"
 * __version__ = "0.2.0"
 * __status__ = "Beta"             # <<<<<<<<<<<<<<
 * __maintainer__ = "Matthew D. Cutone"
 * __email__ = "cutonem@yorku.ca"
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_status, __pyx_n_s_Beta) < 0) __PYX_ERR(0, 51, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":52
 * __version__ = "0.2.0"
 * __status__ = "Beta"
 * __maintainer__ = "Matthew D. Cutone"             # <<<<<<<<<<<<<<
 * __email__ = "cutonem@yorku.ca"
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_maintainer, __pyx_kp_s_Matthew_D_Cutone) < 0) __PYX_ERR(0, 52, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":53
 * __status__ = "Beta"
 * __maintainer__ = "Matthew D. Cutone"
 * __email__ = "cutonem@yorku.ca"             # <<<<<<<<<<<<<<
 * 
 * # ----------------
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_email, __pyx_kp_s_cutonem_yorku_ca) < 0) __PYX_ERR(0, 53, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":59
 * # ----------------
 * #
 * __all__ = [             # <<<<<<<<<<<<<<
 *     'LIBOVR_SUCCESS',
 *     'LIBOVR_SUCCESS_NOT_VISIBLE',
 */
  __pyx_t_1 = PyList_New(218); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_SUCCESS);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_SUCCESS);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LIBOVR_SUCCESS);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_SUCCESS_NOT_VISIBLE);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_SUCCESS_NOT_VISIBLE);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_LIBOVR_SUCCESS_NOT_VISIBLE);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_SUCCESS_DEVICE_UNAVAILABL);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_SUCCESS_DEVICE_UNAVAILABL);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_LIBOVR_SUCCESS_DEVICE_UNAVAILABL);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_SUCCESS_BOUNDARY_INVALID);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_SUCCESS_BOUNDARY_INVALID);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_n_s_LIBOVR_SUCCESS_BOUNDARY_INVALID);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_MEMORY_ALLOCATION_F);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_MEMORY_ALLOCATION_F);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_s_LIBOVR_ERROR_MEMORY_ALLOCATION_F);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_INVALID_SESSION);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_INVALID_SESSION);
  PyList_SET_ITEM(__pyx_t_1, 5, __pyx_n_s_LIBOVR_ERROR_INVALID_SESSION);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_TIMEOUT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_TIMEOUT);
  PyList_SET_ITEM(__pyx_t_1, 6, __pyx_n_s_LIBOVR_ERROR_TIMEOUT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_NOT_INITIALIZED);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_NOT_INITIALIZED);
  PyList_SET_ITEM(__pyx_t_1, 7, __pyx_n_s_LIBOVR_ERROR_NOT_INITIALIZED);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_INVALID_PARAMETER);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_INVALID_PARAMETER);
  PyList_SET_ITEM(__pyx_t_1, 8, __pyx_n_s_LIBOVR_ERROR_INVALID_PARAMETER);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_SERVICE_ERROR);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_SERVICE_ERROR);
  PyList_SET_ITEM(__pyx_t_1, 9, __pyx_n_s_LIBOVR_ERROR_SERVICE_ERROR);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_NO_HMD);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_NO_HMD);
  PyList_SET_ITEM(__pyx_t_1, 10, __pyx_n_s_LIBOVR_ERROR_NO_HMD);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_UNSUPPORTED);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_UNSUPPORTED);
  PyList_SET_ITEM(__pyx_t_1, 11, __pyx_n_s_LIBOVR_ERROR_UNSUPPORTED);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_DEVICE_UNAVAILABLE);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_DEVICE_UNAVAILABLE);
  PyList_SET_ITEM(__pyx_t_1, 12, __pyx_n_s_LIBOVR_ERROR_DEVICE_UNAVAILABLE);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_INVALID_HEADSET_ORI);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_INVALID_HEADSET_ORI);
  PyList_SET_ITEM(__pyx_t_1, 13, __pyx_n_s_LIBOVR_ERROR_INVALID_HEADSET_ORI);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_DEST);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_DEST);
  PyList_SET_ITEM(__pyx_t_1, 14, __pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_DEST);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_SHUT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_SHUT);
  PyList_SET_ITEM(__pyx_t_1, 15, __pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_SHUT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_SERVICE_DEADLOCK_DE);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_SERVICE_DEADLOCK_DE);
  PyList_SET_ITEM(__pyx_t_1, 16, __pyx_n_s_LIBOVR_ERROR_SERVICE_DEADLOCK_DE);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_INSUFFICENT_ARRAY_S);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_INSUFFICENT_ARRAY_S);
  PyList_SET_ITEM(__pyx_t_1, 17, __pyx_n_s_LIBOVR_ERROR_INSUFFICENT_ARRAY_S);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_NO_EXTERNAL_CAMERA);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_NO_EXTERNAL_CAMERA);
  PyList_SET_ITEM(__pyx_t_1, 18, __pyx_n_s_LIBOVR_ERROR_NO_EXTERNAL_CAMERA);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_LOST_TRACKING);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_LOST_TRACKING);
  PyList_SET_ITEM(__pyx_t_1, 19, __pyx_n_s_LIBOVR_ERROR_LOST_TRACKING);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_INI);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_INI);
  PyList_SET_ITEM(__pyx_t_1, 20, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_INI);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_CAP);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_CAP);
  PyList_SET_ITEM(__pyx_t_1, 21, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_CAP);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM);
  PyList_SET_ITEM(__pyx_t_1, 22, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_2);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_2);
  PyList_SET_ITEM(__pyx_t_1, 23, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_2);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NOT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NOT);
  PyList_SET_ITEM(__pyx_t_1, 24, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NOT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_3);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_3);
  PyList_SET_ITEM(__pyx_t_1, 25, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_3);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_AUDIO_DEVICE_NOT_FO);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_AUDIO_DEVICE_NOT_FO);
  PyList_SET_ITEM(__pyx_t_1, 26, __pyx_n_s_LIBOVR_ERROR_AUDIO_DEVICE_NOT_FO);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_AUDIO_COM_ERROR);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_AUDIO_COM_ERROR);
  PyList_SET_ITEM(__pyx_t_1, 27, __pyx_n_s_LIBOVR_ERROR_AUDIO_COM_ERROR);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_INITIALIZE);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_INITIALIZE);
  PyList_SET_ITEM(__pyx_t_1, 28, __pyx_n_s_LIBOVR_ERROR_INITIALIZE);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_LIB_LOAD);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_LIB_LOAD);
  PyList_SET_ITEM(__pyx_t_1, 29, __pyx_n_s_LIBOVR_ERROR_LIB_LOAD);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_SERVICE_CONNECTION);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_SERVICE_CONNECTION);
  PyList_SET_ITEM(__pyx_t_1, 30, __pyx_n_s_LIBOVR_ERROR_SERVICE_CONNECTION);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_SERVICE_VERSION);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_SERVICE_VERSION);
  PyList_SET_ITEM(__pyx_t_1, 31, __pyx_n_s_LIBOVR_ERROR_SERVICE_VERSION);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_INCOMPATIBLE_OS);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_INCOMPATIBLE_OS);
  PyList_SET_ITEM(__pyx_t_1, 32, __pyx_n_s_LIBOVR_ERROR_INCOMPATIBLE_OS);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_INIT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_INIT);
  PyList_SET_ITEM(__pyx_t_1, 33, __pyx_n_s_LIBOVR_ERROR_DISPLAY_INIT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_SERVER_START);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_SERVER_START);
  PyList_SET_ITEM(__pyx_t_1, 34, __pyx_n_s_LIBOVR_ERROR_SERVER_START);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_REINITIALIZATION);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_REINITIALIZATION);
  PyList_SET_ITEM(__pyx_t_1, 35, __pyx_n_s_LIBOVR_ERROR_REINITIALIZATION);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_MISMATCHED_ADAPTERS);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_MISMATCHED_ADAPTERS);
  PyList_SET_ITEM(__pyx_t_1, 36, __pyx_n_s_LIBOVR_ERROR_MISMATCHED_ADAPTERS);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_LEAKING_RESOURCES);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_LEAKING_RESOURCES);
  PyList_SET_ITEM(__pyx_t_1, 37, __pyx_n_s_LIBOVR_ERROR_LEAKING_RESOURCES);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_CLIENT_VERSION);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_CLIENT_VERSION);
  PyList_SET_ITEM(__pyx_t_1, 38, __pyx_n_s_LIBOVR_ERROR_CLIENT_VERSION);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_OS);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_OS);
  PyList_SET_ITEM(__pyx_t_1, 39, __pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_OS);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_GFX_DRI);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_GFX_DRI);
  PyList_SET_ITEM(__pyx_t_1, 40, __pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_GFX_DRI);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_INCOMPATIBLE_OS);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_INCOMPATIBLE_OS);
  PyList_SET_ITEM(__pyx_t_1, 41, __pyx_n_s_LIBOVR_ERROR_INCOMPATIBLE_OS);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_NO_VALID_VR_DISPLAY);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_NO_VALID_VR_DISPLAY);
  PyList_SET_ITEM(__pyx_t_1, 42, __pyx_n_s_LIBOVR_ERROR_NO_VALID_VR_DISPLAY);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_OBSOLETE);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_OBSOLETE);
  PyList_SET_ITEM(__pyx_t_1, 43, __pyx_n_s_LIBOVR_ERROR_OBSOLETE);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_DISABLED_OR_DEFAULT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_DISABLED_OR_DEFAULT);
  PyList_SET_ITEM(__pyx_t_1, 44, __pyx_n_s_LIBOVR_ERROR_DISABLED_OR_DEFAULT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_HYBRID_GRAPHICS_NOT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_HYBRID_GRAPHICS_NOT);
  PyList_SET_ITEM(__pyx_t_1, 45, __pyx_n_s_LIBOVR_ERROR_HYBRID_GRAPHICS_NOT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_MANAGER_INI);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_MANAGER_INI);
  PyList_SET_ITEM(__pyx_t_1, 46, __pyx_n_s_LIBOVR_ERROR_DISPLAY_MANAGER_INI);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_TRACKER_DRIVER_INIT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_TRACKER_DRIVER_INIT);
  PyList_SET_ITEM(__pyx_t_1, 47, __pyx_n_s_LIBOVR_ERROR_TRACKER_DRIVER_INIT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_LIB_SIGN_CHECK);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_LIB_SIGN_CHECK);
  PyList_SET_ITEM(__pyx_t_1, 48, __pyx_n_s_LIBOVR_ERROR_LIB_SIGN_CHECK);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_LIB_PATH);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_LIB_PATH);
  PyList_SET_ITEM(__pyx_t_1, 49, __pyx_n_s_LIBOVR_ERROR_LIB_PATH);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_LIB_SYMBOLS);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_LIB_SYMBOLS);
  PyList_SET_ITEM(__pyx_t_1, 50, __pyx_n_s_LIBOVR_ERROR_LIB_SYMBOLS);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_REMOTE_SESSION);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_REMOTE_SESSION);
  PyList_SET_ITEM(__pyx_t_1, 51, __pyx_n_s_LIBOVR_ERROR_REMOTE_SESSION);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_INITIALIZE_VULKAN);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_INITIALIZE_VULKAN);
  PyList_SET_ITEM(__pyx_t_1, 52, __pyx_n_s_LIBOVR_ERROR_INITIALIZE_VULKAN);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_BLACKLISTED_GFX_DRI);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_BLACKLISTED_GFX_DRI);
  PyList_SET_ITEM(__pyx_t_1, 53, __pyx_n_s_LIBOVR_ERROR_BLACKLISTED_GFX_DRI);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_LOST);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_LOST);
  PyList_SET_ITEM(__pyx_t_1, 54, __pyx_n_s_LIBOVR_ERROR_DISPLAY_LOST);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN);
  PyList_SET_ITEM(__pyx_t_1, 55, __pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_2);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_2);
  PyList_SET_ITEM(__pyx_t_1, 56, __pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_2);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_GRAPHICS_DEVICE_RES);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_GRAPHICS_DEVICE_RES);
  PyList_SET_ITEM(__pyx_t_1, 57, __pyx_n_s_LIBOVR_ERROR_GRAPHICS_DEVICE_RES);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_REMOVED);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_REMOVED);
  PyList_SET_ITEM(__pyx_t_1, 58, __pyx_n_s_LIBOVR_ERROR_DISPLAY_REMOVED);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_CONTENT_PROTECTION);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_CONTENT_PROTECTION);
  PyList_SET_ITEM(__pyx_t_1, 59, __pyx_n_s_LIBOVR_ERROR_CONTENT_PROTECTION);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_APPLICATION_VISIBLE);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_APPLICATION_VISIBLE);
  PyList_SET_ITEM(__pyx_t_1, 60, __pyx_n_s_LIBOVR_ERROR_APPLICATION_VISIBLE);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_DISALLOWED);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_DISALLOWED);
  PyList_SET_ITEM(__pyx_t_1, 61, __pyx_n_s_LIBOVR_ERROR_DISALLOWED);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_PLUGGED_INC);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_PLUGGED_INC);
  PyList_SET_ITEM(__pyx_t_1, 62, __pyx_n_s_LIBOVR_ERROR_DISPLAY_PLUGGED_INC);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_LIMIT_REACH);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_DISPLAY_LIMIT_REACH);
  PyList_SET_ITEM(__pyx_t_1, 63, __pyx_n_s_LIBOVR_ERROR_DISPLAY_LIMIT_REACH);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_RUNTIME_EXCEPTION);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_RUNTIME_EXCEPTION);
  PyList_SET_ITEM(__pyx_t_1, 64, __pyx_n_s_LIBOVR_ERROR_RUNTIME_EXCEPTION);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_NO_CALIBRATION);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_NO_CALIBRATION);
  PyList_SET_ITEM(__pyx_t_1, 65, __pyx_n_s_LIBOVR_ERROR_NO_CALIBRATION);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_OLD_VERSION);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_OLD_VERSION);
  PyList_SET_ITEM(__pyx_t_1, 66, __pyx_n_s_LIBOVR_ERROR_OLD_VERSION);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_ERROR_MISFORMATTED_BLOCK);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_ERROR_MISFORMATTED_BLOCK);
  PyList_SET_ITEM(__pyx_t_1, 67, __pyx_n_s_LIBOVR_ERROR_MISFORMATTED_BLOCK);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_EYE_LEFT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_EYE_LEFT);
  PyList_SET_ITEM(__pyx_t_1, 68, __pyx_n_s_LIBOVR_EYE_LEFT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_EYE_RIGHT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_EYE_RIGHT);
  PyList_SET_ITEM(__pyx_t_1, 69, __pyx_n_s_LIBOVR_EYE_RIGHT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_EYE_COUNT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_EYE_COUNT);
  PyList_SET_ITEM(__pyx_t_1, 70, __pyx_n_s_LIBOVR_EYE_COUNT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_HAND_LEFT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_HAND_LEFT);
  PyList_SET_ITEM(__pyx_t_1, 71, __pyx_n_s_LIBOVR_HAND_LEFT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_HAND_RIGHT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_HAND_RIGHT);
  PyList_SET_ITEM(__pyx_t_1, 72, __pyx_n_s_LIBOVR_HAND_RIGHT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_HAND_COUNT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_HAND_COUNT);
  PyList_SET_ITEM(__pyx_t_1, 73, __pyx_n_s_LIBOVR_HAND_COUNT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX);
  PyList_SET_ITEM(__pyx_t_1, 74, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE);
  PyList_SET_ITEM(__pyx_t_1, 75, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH);
  PyList_SET_ITEM(__pyx_t_1, 76, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH);
  PyList_SET_ITEM(__pyx_t_1, 77, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH);
  PyList_SET_ITEM(__pyx_t_1, 78, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_A);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_A);
  PyList_SET_ITEM(__pyx_t_1, 79, __pyx_n_s_LIBOVR_BUTTON_A);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_B);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_B);
  PyList_SET_ITEM(__pyx_t_1, 80, __pyx_n_s_LIBOVR_BUTTON_B);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_RTHUMB);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_RTHUMB);
  PyList_SET_ITEM(__pyx_t_1, 81, __pyx_n_s_LIBOVR_BUTTON_RTHUMB);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_RSHOULDER);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_RSHOULDER);
  PyList_SET_ITEM(__pyx_t_1, 82, __pyx_n_s_LIBOVR_BUTTON_RSHOULDER);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_X);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_X);
  PyList_SET_ITEM(__pyx_t_1, 83, __pyx_n_s_LIBOVR_BUTTON_X);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_Y);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_Y);
  PyList_SET_ITEM(__pyx_t_1, 84, __pyx_n_s_LIBOVR_BUTTON_Y);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_LTHUMB);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_LTHUMB);
  PyList_SET_ITEM(__pyx_t_1, 85, __pyx_n_s_LIBOVR_BUTTON_LTHUMB);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_LSHOULDER);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_LSHOULDER);
  PyList_SET_ITEM(__pyx_t_1, 86, __pyx_n_s_LIBOVR_BUTTON_LSHOULDER);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_UP);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_UP);
  PyList_SET_ITEM(__pyx_t_1, 87, __pyx_n_s_LIBOVR_BUTTON_UP);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_DOWN);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_DOWN);
  PyList_SET_ITEM(__pyx_t_1, 88, __pyx_n_s_LIBOVR_BUTTON_DOWN);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_LEFT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_LEFT);
  PyList_SET_ITEM(__pyx_t_1, 89, __pyx_n_s_LIBOVR_BUTTON_LEFT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_RIGHT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_RIGHT);
  PyList_SET_ITEM(__pyx_t_1, 90, __pyx_n_s_LIBOVR_BUTTON_RIGHT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_ENTER);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_ENTER);
  PyList_SET_ITEM(__pyx_t_1, 91, __pyx_n_s_LIBOVR_BUTTON_ENTER);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_BACK);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_BACK);
  PyList_SET_ITEM(__pyx_t_1, 92, __pyx_n_s_LIBOVR_BUTTON_BACK);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_VOLUP);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_VOLUP);
  PyList_SET_ITEM(__pyx_t_1, 93, __pyx_n_s_LIBOVR_BUTTON_VOLUP);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_VOLDOWN);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_VOLDOWN);
  PyList_SET_ITEM(__pyx_t_1, 94, __pyx_n_s_LIBOVR_BUTTON_VOLDOWN);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_HOME);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_HOME);
  PyList_SET_ITEM(__pyx_t_1, 95, __pyx_n_s_LIBOVR_BUTTON_HOME);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_PRIVATE);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_PRIVATE);
  PyList_SET_ITEM(__pyx_t_1, 96, __pyx_n_s_LIBOVR_BUTTON_PRIVATE);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_RMASK);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_RMASK);
  PyList_SET_ITEM(__pyx_t_1, 97, __pyx_n_s_LIBOVR_BUTTON_RMASK);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_BUTTON_LMASK);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_BUTTON_LMASK);
  PyList_SET_ITEM(__pyx_t_1, 98, __pyx_n_s_LIBOVR_BUTTON_LMASK);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN0);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN0);
  PyList_SET_ITEM(__pyx_t_1, 99, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN0);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN1);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN1);
  PyList_SET_ITEM(__pyx_t_1, 100, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN1);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN2);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN2);
  PyList_SET_ITEM(__pyx_t_1, 101, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN2);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN3);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN3);
  PyList_SET_ITEM(__pyx_t_1, 102, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN3);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN4);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN4);
  PyList_SET_ITEM(__pyx_t_1, 103, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN4);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN5);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN5);
  PyList_SET_ITEM(__pyx_t_1, 104, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN5);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN6);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN6);
  PyList_SET_ITEM(__pyx_t_1, 105, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN6);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN7);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN7);
  PyList_SET_ITEM(__pyx_t_1, 106, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN7);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM);
  PyList_SET_ITEM(__pyx_t_1, 107, __pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM_SRG);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM_SRG);
  PyList_SET_ITEM(__pyx_t_1, 108, __pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM_SRG);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_FORMAT_R16G16B16A16_FLOAT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_FORMAT_R16G16B16A16_FLOAT);
  PyList_SET_ITEM(__pyx_t_1, 109, __pyx_n_s_LIBOVR_FORMAT_R16G16B16A16_FLOAT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_FORMAT_R11G11B10_FLOAT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_FORMAT_R11G11B10_FLOAT);
  PyList_SET_ITEM(__pyx_t_1, 110, __pyx_n_s_LIBOVR_FORMAT_R11G11B10_FLOAT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_FORMAT_D16_UNORM);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_FORMAT_D16_UNORM);
  PyList_SET_ITEM(__pyx_t_1, 111, __pyx_n_s_LIBOVR_FORMAT_D16_UNORM);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_FORMAT_D24_UNORM_S8_UINT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_FORMAT_D24_UNORM_S8_UINT);
  PyList_SET_ITEM(__pyx_t_1, 112, __pyx_n_s_LIBOVR_FORMAT_D24_UNORM_S8_UINT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_FORMAT_D32_FLOAT);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_FORMAT_D32_FLOAT);
  PyList_SET_ITEM(__pyx_t_1, 113, __pyx_n_s_LIBOVR_FORMAT_D32_FLOAT);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_MAX_PROVIDED_FRAME_STATS);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_MAX_PROVIDED_FRAME_STATS);
  PyList_SET_ITEM(__pyx_t_1, 114, __pyx_n_s_LIBOVR_MAX_PROVIDED_FRAME_STATS);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_HMD);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_HMD);
  PyList_SET_ITEM(__pyx_t_1, 115, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_HMD);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_LTOUC);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_LTOUC);
  PyList_SET_ITEM(__pyx_t_1, 116, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_LTOUC);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_RTOUC);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_RTOUC);
  PyList_SET_ITEM(__pyx_t_1, 117, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_RTOUC);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_TOUCH);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_TOUCH);
  PyList_SET_ITEM(__pyx_t_1, 118, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_TOUCH);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC);
  PyList_SET_ITEM(__pyx_t_1, 119, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_2);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_2);
  PyList_SET_ITEM(__pyx_t_1, 120, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_2);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_3);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_3);
  PyList_SET_ITEM(__pyx_t_1, 121, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_3);
  __Pyx_INCREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_4);
  __Pyx_GIVEREF(__pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_4);
  PyList_SET_ITEM(__pyx_t_1, 122, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_4);
  __Pyx_INCREF(__pyx_n_s_LibOVRPose);
  __Pyx_GIVEREF(__pyx_n_s_LibOVRPose);
  PyList_SET_ITEM(__pyx_t_1, 123, __pyx_n_s_LibOVRPose);
  __Pyx_INCREF(__pyx_n_s_LibOVRPoseState);
  __Pyx_GIVEREF(__pyx_n_s_LibOVRPoseState);
  PyList_SET_ITEM(__pyx_t_1, 124, __pyx_n_s_LibOVRPoseState);
  __Pyx_INCREF(__pyx_n_s_LibOVRTrackerInfo);
  __Pyx_GIVEREF(__pyx_n_s_LibOVRTrackerInfo);
  PyList_SET_ITEM(__pyx_t_1, 125, __pyx_n_s_LibOVRTrackerInfo);
  __Pyx_INCREF(__pyx_n_s_LibOVRSessionStatus);
  __Pyx_GIVEREF(__pyx_n_s_LibOVRSessionStatus);
  PyList_SET_ITEM(__pyx_t_1, 126, __pyx_n_s_LibOVRSessionStatus);
  __Pyx_INCREF(__pyx_n_s_LibOVRHmdInfo);
  __Pyx_GIVEREF(__pyx_n_s_LibOVRHmdInfo);
  PyList_SET_ITEM(__pyx_t_1, 127, __pyx_n_s_LibOVRHmdInfo);
  __Pyx_INCREF(__pyx_n_s_LibOVRFrameStat);
  __Pyx_GIVEREF(__pyx_n_s_LibOVRFrameStat);
  PyList_SET_ITEM(__pyx_t_1, 128, __pyx_n_s_LibOVRFrameStat);
  __Pyx_INCREF(__pyx_n_s_LibOVRTrackingState);
  __Pyx_GIVEREF(__pyx_n_s_LibOVRTrackingState);
  PyList_SET_ITEM(__pyx_t_1, 129, __pyx_n_s_LibOVRTrackingState);
  __Pyx_INCREF(__pyx_n_s_success);
  __Pyx_GIVEREF(__pyx_n_s_success);
  PyList_SET_ITEM(__pyx_t_1, 130, __pyx_n_s_success);
  __Pyx_INCREF(__pyx_n_s_unqualifedSuccess);
  __Pyx_GIVEREF(__pyx_n_s_unqualifedSuccess);
  PyList_SET_ITEM(__pyx_t_1, 131, __pyx_n_s_unqualifedSuccess);
  __Pyx_INCREF(__pyx_n_s_failure);
  __Pyx_GIVEREF(__pyx_n_s_failure);
  PyList_SET_ITEM(__pyx_t_1, 132, __pyx_n_s_failure);
  __Pyx_INCREF(__pyx_n_s_isOculusServiceRunning);
  __Pyx_GIVEREF(__pyx_n_s_isOculusServiceRunning);
  PyList_SET_ITEM(__pyx_t_1, 133, __pyx_n_s_isOculusServiceRunning);
  __Pyx_INCREF(__pyx_n_s_isHmdConnected);
  __Pyx_GIVEREF(__pyx_n_s_isHmdConnected);
  PyList_SET_ITEM(__pyx_t_1, 134, __pyx_n_s_isHmdConnected);
  __Pyx_INCREF(__pyx_n_s_getHmdInfo);
  __Pyx_GIVEREF(__pyx_n_s_getHmdInfo);
  PyList_SET_ITEM(__pyx_t_1, 135, __pyx_n_s_getHmdInfo);
  __Pyx_INCREF(__pyx_n_s_getUserHeight);
  __Pyx_GIVEREF(__pyx_n_s_getUserHeight);
  PyList_SET_ITEM(__pyx_t_1, 136, __pyx_n_s_getUserHeight);
  __Pyx_INCREF(__pyx_n_s_getEyeHeight);
  __Pyx_GIVEREF(__pyx_n_s_getEyeHeight);
  PyList_SET_ITEM(__pyx_t_1, 137, __pyx_n_s_getEyeHeight);
  __Pyx_INCREF(__pyx_n_s_getNeckEyeDist);
  __Pyx_GIVEREF(__pyx_n_s_getNeckEyeDist);
  PyList_SET_ITEM(__pyx_t_1, 138, __pyx_n_s_getNeckEyeDist);
  __Pyx_INCREF(__pyx_n_s_getEyeToNoseDist);
  __Pyx_GIVEREF(__pyx_n_s_getEyeToNoseDist);
  PyList_SET_ITEM(__pyx_t_1, 139, __pyx_n_s_getEyeToNoseDist);
  __Pyx_INCREF(__pyx_n_s_initialize);
  __Pyx_GIVEREF(__pyx_n_s_initialize);
  PyList_SET_ITEM(__pyx_t_1, 140, __pyx_n_s_initialize);
  __Pyx_INCREF(__pyx_n_s_create);
  __Pyx_GIVEREF(__pyx_n_s_create);
  PyList_SET_ITEM(__pyx_t_1, 141, __pyx_n_s_create);
  __Pyx_INCREF(__pyx_n_s_destroyTextureSwapChain);
  __Pyx_GIVEREF(__pyx_n_s_destroyTextureSwapChain);
  PyList_SET_ITEM(__pyx_t_1, 142, __pyx_n_s_destroyTextureSwapChain);
  __Pyx_INCREF(__pyx_n_s_destroyMirrorTexture);
  __Pyx_GIVEREF(__pyx_n_s_destroyMirrorTexture);
  PyList_SET_ITEM(__pyx_t_1, 143, __pyx_n_s_destroyMirrorTexture);
  __Pyx_INCREF(__pyx_n_s_destroy);
  __Pyx_GIVEREF(__pyx_n_s_destroy);
  PyList_SET_ITEM(__pyx_t_1, 144, __pyx_n_s_destroy);
  __Pyx_INCREF(__pyx_n_s_shutdown);
  __Pyx_GIVEREF(__pyx_n_s_shutdown);
  PyList_SET_ITEM(__pyx_t_1, 145, __pyx_n_s_shutdown);
  __Pyx_INCREF(__pyx_n_s_getGraphicsLUID);
  __Pyx_GIVEREF(__pyx_n_s_getGraphicsLUID);
  PyList_SET_ITEM(__pyx_t_1, 146, __pyx_n_s_getGraphicsLUID);
  __Pyx_INCREF(__pyx_n_s_setHighQuality);
  __Pyx_GIVEREF(__pyx_n_s_setHighQuality);
  PyList_SET_ITEM(__pyx_t_1, 147, __pyx_n_s_setHighQuality);
  __Pyx_INCREF(__pyx_n_s_setHeadLocked);
  __Pyx_GIVEREF(__pyx_n_s_setHeadLocked);
  PyList_SET_ITEM(__pyx_t_1, 148, __pyx_n_s_setHeadLocked);
  __Pyx_INCREF(__pyx_n_s_getPixelsPerTanAngleAtCenter);
  __Pyx_GIVEREF(__pyx_n_s_getPixelsPerTanAngleAtCenter);
  PyList_SET_ITEM(__pyx_t_1, 149, __pyx_n_s_getPixelsPerTanAngleAtCenter);
  __Pyx_INCREF(__pyx_n_s_getDistortedViewport);
  __Pyx_GIVEREF(__pyx_n_s_getDistortedViewport);
  PyList_SET_ITEM(__pyx_t_1, 150, __pyx_n_s_getDistortedViewport);
  __Pyx_INCREF(__pyx_n_s_getEyeRenderFov);
  __Pyx_GIVEREF(__pyx_n_s_getEyeRenderFov);
  PyList_SET_ITEM(__pyx_t_1, 151, __pyx_n_s_getEyeRenderFov);
  __Pyx_INCREF(__pyx_n_s_setEyeRenderFov);
  __Pyx_GIVEREF(__pyx_n_s_setEyeRenderFov);
  PyList_SET_ITEM(__pyx_t_1, 152, __pyx_n_s_setEyeRenderFov);
  __Pyx_INCREF(__pyx_n_s_calcEyeBufferSize);
  __Pyx_GIVEREF(__pyx_n_s_calcEyeBufferSize);
  PyList_SET_ITEM(__pyx_t_1, 153, __pyx_n_s_calcEyeBufferSize);
  __Pyx_INCREF(__pyx_n_s_getTextureSwapChainLengthGL);
  __Pyx_GIVEREF(__pyx_n_s_getTextureSwapChainLengthGL);
  PyList_SET_ITEM(__pyx_t_1, 154, __pyx_n_s_getTextureSwapChainLengthGL);
  __Pyx_INCREF(__pyx_n_s_getTextureSwapChainCurrentIndex);
  __Pyx_GIVEREF(__pyx_n_s_getTextureSwapChainCurrentIndex);
  PyList_SET_ITEM(__pyx_t_1, 155, __pyx_n_s_getTextureSwapChainCurrentIndex);
  __Pyx_INCREF(__pyx_n_s_getTextureSwapChainBufferGL);
  __Pyx_GIVEREF(__pyx_n_s_getTextureSwapChainBufferGL);
  PyList_SET_ITEM(__pyx_t_1, 156, __pyx_n_s_getTextureSwapChainBufferGL);
  __Pyx_INCREF(__pyx_n_s_createTextureSwapChainGL);
  __Pyx_GIVEREF(__pyx_n_s_createTextureSwapChainGL);
  PyList_SET_ITEM(__pyx_t_1, 157, __pyx_n_s_createTextureSwapChainGL);
  __Pyx_INCREF(__pyx_n_s_setEyeColorTextureSwapChain);
  __Pyx_GIVEREF(__pyx_n_s_setEyeColorTextureSwapChain);
  PyList_SET_ITEM(__pyx_t_1, 158, __pyx_n_s_setEyeColorTextureSwapChain);
  __Pyx_INCREF(__pyx_n_s_createMirrorTexture);
  __Pyx_GIVEREF(__pyx_n_s_createMirrorTexture);
  PyList_SET_ITEM(__pyx_t_1, 159, __pyx_n_s_createMirrorTexture);
  __Pyx_INCREF(__pyx_n_s_getMirrorTexture);
  __Pyx_GIVEREF(__pyx_n_s_getMirrorTexture);
  PyList_SET_ITEM(__pyx_t_1, 160, __pyx_n_s_getMirrorTexture);
  __Pyx_INCREF(__pyx_n_s_getTrackingState);
  __Pyx_GIVEREF(__pyx_n_s_getTrackingState);
  PyList_SET_ITEM(__pyx_t_1, 161, __pyx_n_s_getTrackingState);
  __Pyx_INCREF(__pyx_n_s_getDevicePoses);
  __Pyx_GIVEREF(__pyx_n_s_getDevicePoses);
  PyList_SET_ITEM(__pyx_t_1, 162, __pyx_n_s_getDevicePoses);
  __Pyx_INCREF(__pyx_n_s_calcEyePoses);
  __Pyx_GIVEREF(__pyx_n_s_calcEyePoses);
  PyList_SET_ITEM(__pyx_t_1, 163, __pyx_n_s_calcEyePoses);
  __Pyx_INCREF(__pyx_n_s_getHmdToEyePose);
  __Pyx_GIVEREF(__pyx_n_s_getHmdToEyePose);
  PyList_SET_ITEM(__pyx_t_1, 164, __pyx_n_s_getHmdToEyePose);
  __Pyx_INCREF(__pyx_n_s_setHmdToEyePose);
  __Pyx_GIVEREF(__pyx_n_s_setHmdToEyePose);
  PyList_SET_ITEM(__pyx_t_1, 165, __pyx_n_s_setHmdToEyePose);
  __Pyx_INCREF(__pyx_n_s_getEyeRenderPose);
  __Pyx_GIVEREF(__pyx_n_s_getEyeRenderPose);
  PyList_SET_ITEM(__pyx_t_1, 166, __pyx_n_s_getEyeRenderPose);
  __Pyx_INCREF(__pyx_n_s_setEyeRenderPose);
  __Pyx_GIVEREF(__pyx_n_s_setEyeRenderPose);
  PyList_SET_ITEM(__pyx_t_1, 167, __pyx_n_s_setEyeRenderPose);
  __Pyx_INCREF(__pyx_n_s_getEyeHorizontalFovRadians);
  __Pyx_GIVEREF(__pyx_n_s_getEyeHorizontalFovRadians);
  PyList_SET_ITEM(__pyx_t_1, 168, __pyx_n_s_getEyeHorizontalFovRadians);
  __Pyx_INCREF(__pyx_n_s_getEyeVerticalFovRadians);
  __Pyx_GIVEREF(__pyx_n_s_getEyeVerticalFovRadians);
  PyList_SET_ITEM(__pyx_t_1, 169, __pyx_n_s_getEyeVerticalFovRadians);
  __Pyx_INCREF(__pyx_n_s_getEyeFocalLength);
  __Pyx_GIVEREF(__pyx_n_s_getEyeFocalLength);
  PyList_SET_ITEM(__pyx_t_1, 170, __pyx_n_s_getEyeFocalLength);
  __Pyx_INCREF(__pyx_n_s_getEyeProjectionMatrix);
  __Pyx_GIVEREF(__pyx_n_s_getEyeProjectionMatrix);
  PyList_SET_ITEM(__pyx_t_1, 171, __pyx_n_s_getEyeProjectionMatrix);
  __Pyx_INCREF(__pyx_n_s_getEyeRenderViewport);
  __Pyx_GIVEREF(__pyx_n_s_getEyeRenderViewport);
  PyList_SET_ITEM(__pyx_t_1, 172, __pyx_n_s_getEyeRenderViewport);
  __Pyx_INCREF(__pyx_n_s_setEyeRenderViewport);
  __Pyx_GIVEREF(__pyx_n_s_setEyeRenderViewport);
  PyList_SET_ITEM(__pyx_t_1, 173, __pyx_n_s_setEyeRenderViewport);
  __Pyx_INCREF(__pyx_n_s_getEyeViewMatrix);
  __Pyx_GIVEREF(__pyx_n_s_getEyeViewMatrix);
  PyList_SET_ITEM(__pyx_t_1, 174, __pyx_n_s_getEyeViewMatrix);
  __Pyx_INCREF(__pyx_n_s_getPredictedDisplayTime);
  __Pyx_GIVEREF(__pyx_n_s_getPredictedDisplayTime);
  PyList_SET_ITEM(__pyx_t_1, 175, __pyx_n_s_getPredictedDisplayTime);
  __Pyx_INCREF(__pyx_n_s_timeInSeconds);
  __Pyx_GIVEREF(__pyx_n_s_timeInSeconds);
  PyList_SET_ITEM(__pyx_t_1, 176, __pyx_n_s_timeInSeconds);
  __Pyx_INCREF(__pyx_n_s_perfHudMode);
  __Pyx_GIVEREF(__pyx_n_s_perfHudMode);
  PyList_SET_ITEM(__pyx_t_1, 177, __pyx_n_s_perfHudMode);
  __Pyx_INCREF(__pyx_n_s_hidePerfHud);
  __Pyx_GIVEREF(__pyx_n_s_hidePerfHud);
  PyList_SET_ITEM(__pyx_t_1, 178, __pyx_n_s_hidePerfHud);
  __Pyx_INCREF(__pyx_n_s_perfHudModes);
  __Pyx_GIVEREF(__pyx_n_s_perfHudModes);
  PyList_SET_ITEM(__pyx_t_1, 179, __pyx_n_s_perfHudModes);
  __Pyx_INCREF(__pyx_n_s_waitToBeginFrame);
  __Pyx_GIVEREF(__pyx_n_s_waitToBeginFrame);
  PyList_SET_ITEM(__pyx_t_1, 180, __pyx_n_s_waitToBeginFrame);
  __Pyx_INCREF(__pyx_n_s_beginFrame);
  __Pyx_GIVEREF(__pyx_n_s_beginFrame);
  PyList_SET_ITEM(__pyx_t_1, 181, __pyx_n_s_beginFrame);
  __Pyx_INCREF(__pyx_n_s_commitTextureSwapChain);
  __Pyx_GIVEREF(__pyx_n_s_commitTextureSwapChain);
  PyList_SET_ITEM(__pyx_t_1, 182, __pyx_n_s_commitTextureSwapChain);
  __Pyx_INCREF(__pyx_n_s_endFrame);
  __Pyx_GIVEREF(__pyx_n_s_endFrame);
  PyList_SET_ITEM(__pyx_t_1, 183, __pyx_n_s_endFrame);
  __Pyx_INCREF(__pyx_n_s_resetFrameStats);
  __Pyx_GIVEREF(__pyx_n_s_resetFrameStats);
  PyList_SET_ITEM(__pyx_t_1, 184, __pyx_n_s_resetFrameStats);
  __Pyx_INCREF(__pyx_n_s_getTrackingOriginType);
  __Pyx_GIVEREF(__pyx_n_s_getTrackingOriginType);
  PyList_SET_ITEM(__pyx_t_1, 185, __pyx_n_s_getTrackingOriginType);
  __Pyx_INCREF(__pyx_n_s_setTrackingOriginType);
  __Pyx_GIVEREF(__pyx_n_s_setTrackingOriginType);
  PyList_SET_ITEM(__pyx_t_1, 186, __pyx_n_s_setTrackingOriginType);
  __Pyx_INCREF(__pyx_n_s_recenterTrackingOrigin);
  __Pyx_GIVEREF(__pyx_n_s_recenterTrackingOrigin);
  PyList_SET_ITEM(__pyx_t_1, 187, __pyx_n_s_recenterTrackingOrigin);
  __Pyx_INCREF(__pyx_n_s_specifyTrackingOrigin);
  __Pyx_GIVEREF(__pyx_n_s_specifyTrackingOrigin);
  PyList_SET_ITEM(__pyx_t_1, 188, __pyx_n_s_specifyTrackingOrigin);
  __Pyx_INCREF(__pyx_n_s_clearShouldRecenterFlag);
  __Pyx_GIVEREF(__pyx_n_s_clearShouldRecenterFlag);
  PyList_SET_ITEM(__pyx_t_1, 189, __pyx_n_s_clearShouldRecenterFlag);
  __Pyx_INCREF(__pyx_n_s_getTrackerCount);
  __Pyx_GIVEREF(__pyx_n_s_getTrackerCount);
  PyList_SET_ITEM(__pyx_t_1, 190, __pyx_n_s_getTrackerCount);
  __Pyx_INCREF(__pyx_n_s_getTrackerInfo);
  __Pyx_GIVEREF(__pyx_n_s_getTrackerInfo);
  PyList_SET_ITEM(__pyx_t_1, 191, __pyx_n_s_getTrackerInfo);
  __Pyx_INCREF(__pyx_n_s_refreshPerformanceStats);
  __Pyx_GIVEREF(__pyx_n_s_refreshPerformanceStats);
  PyList_SET_ITEM(__pyx_t_1, 192, __pyx_n_s_refreshPerformanceStats);
  __Pyx_INCREF(__pyx_n_s_updatePerfStats);
  __Pyx_GIVEREF(__pyx_n_s_updatePerfStats);
  PyList_SET_ITEM(__pyx_t_1, 193, __pyx_n_s_updatePerfStats);
  __Pyx_INCREF(__pyx_n_s_getAdaptiveGpuPerformanceScale);
  __Pyx_GIVEREF(__pyx_n_s_getAdaptiveGpuPerformanceScale);
  PyList_SET_ITEM(__pyx_t_1, 194, __pyx_n_s_getAdaptiveGpuPerformanceScale);
  __Pyx_INCREF(__pyx_n_s_getFrameStatsCount);
  __Pyx_GIVEREF(__pyx_n_s_getFrameStatsCount);
  PyList_SET_ITEM(__pyx_t_1, 195, __pyx_n_s_getFrameStatsCount);
  __Pyx_INCREF(__pyx_n_s_anyFrameStatsDropped);
  __Pyx_GIVEREF(__pyx_n_s_anyFrameStatsDropped);
  PyList_SET_ITEM(__pyx_t_1, 196, __pyx_n_s_anyFrameStatsDropped);
  __Pyx_INCREF(__pyx_n_s_checkAswIsAvailable);
  __Pyx_GIVEREF(__pyx_n_s_checkAswIsAvailable);
  PyList_SET_ITEM(__pyx_t_1, 197, __pyx_n_s_checkAswIsAvailable);
  __Pyx_INCREF(__pyx_n_s_getVisibleProcessId);
  __Pyx_GIVEREF(__pyx_n_s_getVisibleProcessId);
  PyList_SET_ITEM(__pyx_t_1, 198, __pyx_n_s_getVisibleProcessId);
  __Pyx_INCREF(__pyx_n_s_checkAppLastFrameDropped);
  __Pyx_GIVEREF(__pyx_n_s_checkAppLastFrameDropped);
  PyList_SET_ITEM(__pyx_t_1, 199, __pyx_n_s_checkAppLastFrameDropped);
  __Pyx_INCREF(__pyx_n_s_checkCompLastFrameDropped);
  __Pyx_GIVEREF(__pyx_n_s_checkCompLastFrameDropped);
  PyList_SET_ITEM(__pyx_t_1, 200, __pyx_n_s_checkCompLastFrameDropped);
  __Pyx_INCREF(__pyx_n_s_getFrameStats);
  __Pyx_GIVEREF(__pyx_n_s_getFrameStats);
  PyList_SET_ITEM(__pyx_t_1, 201, __pyx_n_s_getFrameStats);
  __Pyx_INCREF(__pyx_n_s_getLastErrorInfo);
  __Pyx_GIVEREF(__pyx_n_s_getLastErrorInfo);
  PyList_SET_ITEM(__pyx_t_1, 202, __pyx_n_s_getLastErrorInfo);
  __Pyx_INCREF(__pyx_n_s_setBoundaryColor);
  __Pyx_GIVEREF(__pyx_n_s_setBoundaryColor);
  PyList_SET_ITEM(__pyx_t_1, 203, __pyx_n_s_setBoundaryColor);
  __Pyx_INCREF(__pyx_n_s_resetBoundaryColor);
  __Pyx_GIVEREF(__pyx_n_s_resetBoundaryColor);
  PyList_SET_ITEM(__pyx_t_1, 204, __pyx_n_s_resetBoundaryColor);
  __Pyx_INCREF(__pyx_n_s_getBoundaryVisible);
  __Pyx_GIVEREF(__pyx_n_s_getBoundaryVisible);
  PyList_SET_ITEM(__pyx_t_1, 205, __pyx_n_s_getBoundaryVisible);
  __Pyx_INCREF(__pyx_n_s_showBoundary);
  __Pyx_GIVEREF(__pyx_n_s_showBoundary);
  PyList_SET_ITEM(__pyx_t_1, 206, __pyx_n_s_showBoundary);
  __Pyx_INCREF(__pyx_n_s_hideBoundary);
  __Pyx_GIVEREF(__pyx_n_s_hideBoundary);
  PyList_SET_ITEM(__pyx_t_1, 207, __pyx_n_s_hideBoundary);
  __Pyx_INCREF(__pyx_n_s_getBoundaryDimensions);
  __Pyx_GIVEREF(__pyx_n_s_getBoundaryDimensions);
  PyList_SET_ITEM(__pyx_t_1, 208, __pyx_n_s_getBoundaryDimensions);
  __Pyx_INCREF(__pyx_n_s_getConnectedControllerTypes);
  __Pyx_GIVEREF(__pyx_n_s_getConnectedControllerTypes);
  PyList_SET_ITEM(__pyx_t_1, 209, __pyx_n_s_getConnectedControllerTypes);
  __Pyx_INCREF(__pyx_n_s_updateInputState);
  __Pyx_GIVEREF(__pyx_n_s_updateInputState);
  PyList_SET_ITEM(__pyx_t_1, 210, __pyx_n_s_updateInputState);
  __Pyx_INCREF(__pyx_n_s_getButton);
  __Pyx_GIVEREF(__pyx_n_s_getButton);
  PyList_SET_ITEM(__pyx_t_1, 211, __pyx_n_s_getButton);
  __Pyx_INCREF(__pyx_n_s_getTouch);
  __Pyx_GIVEREF(__pyx_n_s_getTouch);
  PyList_SET_ITEM(__pyx_t_1, 212, __pyx_n_s_getTouch);
  __Pyx_INCREF(__pyx_n_s_getThumbstickValues);
  __Pyx_GIVEREF(__pyx_n_s_getThumbstickValues);
  PyList_SET_ITEM(__pyx_t_1, 213, __pyx_n_s_getThumbstickValues);
  __Pyx_INCREF(__pyx_n_s_getIndexTriggerValues);
  __Pyx_GIVEREF(__pyx_n_s_getIndexTriggerValues);
  PyList_SET_ITEM(__pyx_t_1, 214, __pyx_n_s_getIndexTriggerValues);
  __Pyx_INCREF(__pyx_n_s_getHandTriggerValues);
  __Pyx_GIVEREF(__pyx_n_s_getHandTriggerValues);
  PyList_SET_ITEM(__pyx_t_1, 215, __pyx_n_s_getHandTriggerValues);
  __Pyx_INCREF(__pyx_n_s_setControllerVibration);
  __Pyx_GIVEREF(__pyx_n_s_setControllerVibration);
  PyList_SET_ITEM(__pyx_t_1, 216, __pyx_n_s_setControllerVibration);
  __Pyx_INCREF(__pyx_n_s_getSessionStatus);
  __Pyx_GIVEREF(__pyx_n_s_getSessionStatus);
  PyList_SET_ITEM(__pyx_t_1, 217, __pyx_n_s_getSessionStatus);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":291
 * 
 * cimport numpy as np
 * import numpy as np             # <<<<<<<<<<<<<<
 * np.import_array()
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) __PYX_ERR(0, 291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":292
 * cimport numpy as np
 * import numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * # -----------------
 */
  __pyx_t_2 = __pyx_f_5numpy_import_array(); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 292, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":313
 * 
 * # prepare the render layer
 * _eyeLayer.Header.Type = libovr_capi.ovrLayerType_EyeFov             # <<<<<<<<<<<<<<
 * _eyeLayer.Header.Flags = \
 *     libovr_capi.ovrLayerFlag_TextureOriginAtBottomLeft | \
 */
  __pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Header.Type = ovrLayerType_EyeFov;

  /* "psychxr/libovr/_libovr.pyx":314
 * # prepare the render layer
 * _eyeLayer.Header.Type = libovr_capi.ovrLayerType_EyeFov
 * _eyeLayer.Header.Flags = \             # <<<<<<<<<<<<<<
 *     libovr_capi.ovrLayerFlag_TextureOriginAtBottomLeft | \
 *     libovr_capi.ovrLayerFlag_HighQuality
 */
  __pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.Header.Flags = (ovrLayerFlag_TextureOriginAtBottomLeft | ovrLayerFlag_HighQuality);

  /* "psychxr/libovr/_libovr.pyx":317
 *     libovr_capi.ovrLayerFlag_TextureOriginAtBottomLeft | \
 *     libovr_capi.ovrLayerFlag_HighQuality
 * _eyeLayer.ColorTexture[0] = _eyeLayer.ColorTexture[1] = NULL             # <<<<<<<<<<<<<<
 * 
 * # status and performance information
 */
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.ColorTexture[0]) = NULL;
  (__pyx_v_7psychxr_6libovr_7_libovr__eyeLayer.ColorTexture[1]) = NULL;

  /* "psychxr/libovr/_libovr.pyx":345
 * #
 * cdef libovr_capi.ovrErrorInfo _last_error_info_  # store our last error here
 * def check_result(result):             # <<<<<<<<<<<<<<
 *     if libovr_capi.OVR_FAILURE(result):
 *         libovr_capi.ovr_GetLastErrorInfo(&_last_error_info_)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_1check_result, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_check_result, __pyx_t_1) < 0) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":359
 * #
 * cdef dict _supported_texture_formats = {
 *     "R8G8B8A8_UNORM": libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM,             # <<<<<<<<<<<<<<
 *     "R8G8B8A8_UNORM_SRGB": libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM_SRGB,
 *     "R16G16B16A16_FLOAT": libovr_capi.OVR_FORMAT_R16G16B16A16_FLOAT,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_ovrTextureFormat(OVR_FORMAT_R8G8B8A8_UNORM); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_R8G8B8A8_UNORM, __pyx_t_3) < 0) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":360
 * cdef dict _supported_texture_formats = {
 *     "R8G8B8A8_UNORM": libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM,
 *     "R8G8B8A8_UNORM_SRGB": libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM_SRGB,             # <<<<<<<<<<<<<<
 *     "R16G16B16A16_FLOAT": libovr_capi.OVR_FORMAT_R16G16B16A16_FLOAT,
 *     "R11G11B10_FLOAT": libovr_capi.OVR_FORMAT_R11G11B10_FLOAT
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTextureFormat(OVR_FORMAT_R8G8B8A8_UNORM_SRGB); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_R8G8B8A8_UNORM_SRGB, __pyx_t_3) < 0) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":361
 *     "R8G8B8A8_UNORM": libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM,
 *     "R8G8B8A8_UNORM_SRGB": libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM_SRGB,
 *     "R16G16B16A16_FLOAT": libovr_capi.OVR_FORMAT_R16G16B16A16_FLOAT,             # <<<<<<<<<<<<<<
 *     "R11G11B10_FLOAT": libovr_capi.OVR_FORMAT_R11G11B10_FLOAT
 * }
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTextureFormat(OVR_FORMAT_R16G16B16A16_FLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_R16G16B16A16_FLOAT, __pyx_t_3) < 0) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":362
 *     "R8G8B8A8_UNORM_SRGB": libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM_SRGB,
 *     "R16G16B16A16_FLOAT": libovr_capi.OVR_FORMAT_R16G16B16A16_FLOAT,
 *     "R11G11B10_FLOAT": libovr_capi.OVR_FORMAT_R11G11B10_FLOAT             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTextureFormat(OVR_FORMAT_R11G11B10_FLOAT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_R11G11B10_FLOAT, __pyx_t_3) < 0) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_v_7psychxr_6libovr_7_libovr__supported_texture_formats);
  __Pyx_DECREF_SET(__pyx_v_7psychxr_6libovr_7_libovr__supported_texture_formats, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":368
 * #
 * cdef dict _performance_hud_modes = {
 *     "Off" : libovr_capi.ovrPerfHud_Off,             # <<<<<<<<<<<<<<
 *     "PerfSummary": libovr_capi.ovrPerfHud_PerfSummary,
 *     "AppRenderTiming" : libovr_capi.ovrPerfHud_AppRenderTiming,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_ovrPerfHudMode(ovrPerfHud_Off); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Off, __pyx_t_3) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":369
 * cdef dict _performance_hud_modes = {
 *     "Off" : libovr_capi.ovrPerfHud_Off,
 *     "PerfSummary": libovr_capi.ovrPerfHud_PerfSummary,             # <<<<<<<<<<<<<<
 *     "AppRenderTiming" : libovr_capi.ovrPerfHud_AppRenderTiming,
 *     "LatencyTiming" : libovr_capi.ovrPerfHud_LatencyTiming,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrPerfHudMode(ovrPerfHud_PerfSummary); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PerfSummary, __pyx_t_3) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":370
 *     "Off" : libovr_capi.ovrPerfHud_Off,
 *     "PerfSummary": libovr_capi.ovrPerfHud_PerfSummary,
 *     "AppRenderTiming" : libovr_capi.ovrPerfHud_AppRenderTiming,             # <<<<<<<<<<<<<<
 *     "LatencyTiming" : libovr_capi.ovrPerfHud_LatencyTiming,
 *     "CompRenderTiming" : libovr_capi.ovrPerfHud_CompRenderTiming,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrPerfHudMode(ovrPerfHud_AppRenderTiming); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AppRenderTiming, __pyx_t_3) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":371
 *     "PerfSummary": libovr_capi.ovrPerfHud_PerfSummary,
 *     "AppRenderTiming" : libovr_capi.ovrPerfHud_AppRenderTiming,
 *     "LatencyTiming" : libovr_capi.ovrPerfHud_LatencyTiming,             # <<<<<<<<<<<<<<
 *     "CompRenderTiming" : libovr_capi.ovrPerfHud_CompRenderTiming,
 *     "AswStats" : libovr_capi.ovrPerfHud_AswStats,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrPerfHudMode(ovrPerfHud_LatencyTiming); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LatencyTiming, __pyx_t_3) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":372
 *     "AppRenderTiming" : libovr_capi.ovrPerfHud_AppRenderTiming,
 *     "LatencyTiming" : libovr_capi.ovrPerfHud_LatencyTiming,
 *     "CompRenderTiming" : libovr_capi.ovrPerfHud_CompRenderTiming,             # <<<<<<<<<<<<<<
 *     "AswStats" : libovr_capi.ovrPerfHud_AswStats,
 *     "VersionInfo" : libovr_capi.ovrPerfHud_VersionInfo
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrPerfHudMode(ovrPerfHud_CompRenderTiming); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_CompRenderTiming, __pyx_t_3) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":373
 *     "LatencyTiming" : libovr_capi.ovrPerfHud_LatencyTiming,
 *     "CompRenderTiming" : libovr_capi.ovrPerfHud_CompRenderTiming,
 *     "AswStats" : libovr_capi.ovrPerfHud_AswStats,             # <<<<<<<<<<<<<<
 *     "VersionInfo" : libovr_capi.ovrPerfHud_VersionInfo
 * }
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrPerfHudMode(ovrPerfHud_AswStats); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_AswStats, __pyx_t_3) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":374
 *     "CompRenderTiming" : libovr_capi.ovrPerfHud_CompRenderTiming,
 *     "AswStats" : libovr_capi.ovrPerfHud_AswStats,
 *     "VersionInfo" : libovr_capi.ovrPerfHud_VersionInfo             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrPerfHudMode(ovrPerfHud_VersionInfo); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_VersionInfo, __pyx_t_3) < 0) __PYX_ERR(0, 368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_v_7psychxr_6libovr_7_libovr__performance_hud_modes);
  __Pyx_DECREF_SET(__pyx_v_7psychxr_6libovr_7_libovr__performance_hud_modes, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":380
 * #
 * cdef dict _mirror_texture_options = {
 *     "Default" : libovr_capi.ovrMirrorOption_Default,             # <<<<<<<<<<<<<<
 *     "PostDistortion" : libovr_capi.ovrMirrorOption_PostDistortion,
 *     "LeftEyeOnly" : libovr_capi.ovrMirrorOption_LeftEyeOnly,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_ovrMirrorOptions(ovrMirrorOption_Default); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Default, __pyx_t_3) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":381
 * cdef dict _mirror_texture_options = {
 *     "Default" : libovr_capi.ovrMirrorOption_Default,
 *     "PostDistortion" : libovr_capi.ovrMirrorOption_PostDistortion,             # <<<<<<<<<<<<<<
 *     "LeftEyeOnly" : libovr_capi.ovrMirrorOption_LeftEyeOnly,
 *     "RightEyeOnly" : libovr_capi.ovrMirrorOption_RightEyeOnly,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrMirrorOptions(ovrMirrorOption_PostDistortion); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_PostDistortion, __pyx_t_3) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":382
 *     "Default" : libovr_capi.ovrMirrorOption_Default,
 *     "PostDistortion" : libovr_capi.ovrMirrorOption_PostDistortion,
 *     "LeftEyeOnly" : libovr_capi.ovrMirrorOption_LeftEyeOnly,             # <<<<<<<<<<<<<<
 *     "RightEyeOnly" : libovr_capi.ovrMirrorOption_RightEyeOnly,
 *     "IncludeGuardian" : libovr_capi.ovrMirrorOption_IncludeGuardian,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrMirrorOptions(ovrMirrorOption_LeftEyeOnly); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LeftEyeOnly, __pyx_t_3) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":383
 *     "PostDistortion" : libovr_capi.ovrMirrorOption_PostDistortion,
 *     "LeftEyeOnly" : libovr_capi.ovrMirrorOption_LeftEyeOnly,
 *     "RightEyeOnly" : libovr_capi.ovrMirrorOption_RightEyeOnly,             # <<<<<<<<<<<<<<
 *     "IncludeGuardian" : libovr_capi.ovrMirrorOption_IncludeGuardian,
 *     "IncludeNotifications" : libovr_capi.ovrMirrorOption_IncludeNotifications,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrMirrorOptions(ovrMirrorOption_RightEyeOnly); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RightEyeOnly, __pyx_t_3) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":384
 *     "LeftEyeOnly" : libovr_capi.ovrMirrorOption_LeftEyeOnly,
 *     "RightEyeOnly" : libovr_capi.ovrMirrorOption_RightEyeOnly,
 *     "IncludeGuardian" : libovr_capi.ovrMirrorOption_IncludeGuardian,             # <<<<<<<<<<<<<<
 *     "IncludeNotifications" : libovr_capi.ovrMirrorOption_IncludeNotifications,
 *     "IncludeSystemGui" : libovr_capi.ovrMirrorOption_IncludeSystemGui
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrMirrorOptions(ovrMirrorOption_IncludeGuardian); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IncludeGuardian, __pyx_t_3) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":385
 *     "RightEyeOnly" : libovr_capi.ovrMirrorOption_RightEyeOnly,
 *     "IncludeGuardian" : libovr_capi.ovrMirrorOption_IncludeGuardian,
 *     "IncludeNotifications" : libovr_capi.ovrMirrorOption_IncludeNotifications,             # <<<<<<<<<<<<<<
 *     "IncludeSystemGui" : libovr_capi.ovrMirrorOption_IncludeSystemGui
 * }
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrMirrorOptions(ovrMirrorOption_IncludeNotifications); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IncludeNotifications, __pyx_t_3) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":386
 *     "IncludeGuardian" : libovr_capi.ovrMirrorOption_IncludeGuardian,
 *     "IncludeNotifications" : libovr_capi.ovrMirrorOption_IncludeNotifications,
 *     "IncludeSystemGui" : libovr_capi.ovrMirrorOption_IncludeSystemGui             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrMirrorOptions(ovrMirrorOption_IncludeSystemGui); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_IncludeSystemGui, __pyx_t_3) < 0) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_v_7psychxr_6libovr_7_libovr__mirror_texture_options);
  __Pyx_DECREF_SET(__pyx_v_7psychxr_6libovr_7_libovr__mirror_texture_options, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":392
 * #
 * cdef dict _controller_type_enum = {
 *     "Xbox": libovr_capi.ovrControllerType_XBox,             # <<<<<<<<<<<<<<
 *     "Remote": libovr_capi.ovrControllerType_Remote,
 *     "Touch": libovr_capi.ovrControllerType_Touch,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_XBox); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Xbox, __pyx_t_3) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":393
 * cdef dict _controller_type_enum = {
 *     "Xbox": libovr_capi.ovrControllerType_XBox,
 *     "Remote": libovr_capi.ovrControllerType_Remote,             # <<<<<<<<<<<<<<
 *     "Touch": libovr_capi.ovrControllerType_Touch,
 *     "LeftTouch": libovr_capi.ovrControllerType_LTouch,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_Remote); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Remote, __pyx_t_3) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":394
 *     "Xbox": libovr_capi.ovrControllerType_XBox,
 *     "Remote": libovr_capi.ovrControllerType_Remote,
 *     "Touch": libovr_capi.ovrControllerType_Touch,             # <<<<<<<<<<<<<<
 *     "LeftTouch": libovr_capi.ovrControllerType_LTouch,
 *     "RightTouch": libovr_capi.ovrControllerType_RTouch
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_Touch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Touch, __pyx_t_3) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":395
 *     "Remote": libovr_capi.ovrControllerType_Remote,
 *     "Touch": libovr_capi.ovrControllerType_Touch,
 *     "LeftTouch": libovr_capi.ovrControllerType_LTouch,             # <<<<<<<<<<<<<<
 *     "RightTouch": libovr_capi.ovrControllerType_RTouch
 * }
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_LTouch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LeftTouch, __pyx_t_3) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":396
 *     "Touch": libovr_capi.ovrControllerType_Touch,
 *     "LeftTouch": libovr_capi.ovrControllerType_LTouch,
 *     "RightTouch": libovr_capi.ovrControllerType_RTouch             # <<<<<<<<<<<<<<
 * }
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_RTouch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RightTouch, __pyx_t_3) < 0) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_v_7psychxr_6libovr_7_libovr__controller_type_enum);
  __Pyx_DECREF_SET(__pyx_v_7psychxr_6libovr_7_libovr__controller_type_enum, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":402
 * #
 * cdef dict _controller_buttons = {
 *     "A": libovr_capi.ovrButton_A,             # <<<<<<<<<<<<<<
 *     "B": libovr_capi.ovrButton_B,
 *     "RThumb": libovr_capi.ovrButton_RThumb,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(20); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_A); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_A, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":403
 * cdef dict _controller_buttons = {
 *     "A": libovr_capi.ovrButton_A,
 *     "B": libovr_capi.ovrButton_B,             # <<<<<<<<<<<<<<
 *     "RThumb": libovr_capi.ovrButton_RThumb,
 *     "RShoulder": libovr_capi.ovrButton_RShoulder,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_B, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":404
 *     "A": libovr_capi.ovrButton_A,
 *     "B": libovr_capi.ovrButton_B,
 *     "RThumb": libovr_capi.ovrButton_RThumb,             # <<<<<<<<<<<<<<
 *     "RShoulder": libovr_capi.ovrButton_RShoulder,
 *     "X": libovr_capi.ovrButton_X,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_RThumb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RThumb, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":405
 *     "B": libovr_capi.ovrButton_B,
 *     "RThumb": libovr_capi.ovrButton_RThumb,
 *     "RShoulder": libovr_capi.ovrButton_RShoulder,             # <<<<<<<<<<<<<<
 *     "X": libovr_capi.ovrButton_X,
 *     "Y": libovr_capi.ovrButton_Y,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_RShoulder); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RShoulder, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":406
 *     "RThumb": libovr_capi.ovrButton_RThumb,
 *     "RShoulder": libovr_capi.ovrButton_RShoulder,
 *     "X": libovr_capi.ovrButton_X,             # <<<<<<<<<<<<<<
 *     "Y": libovr_capi.ovrButton_Y,
 *     "LThumb": libovr_capi.ovrButton_LThumb,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_X); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_X, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":407
 *     "RShoulder": libovr_capi.ovrButton_RShoulder,
 *     "X": libovr_capi.ovrButton_X,
 *     "Y": libovr_capi.ovrButton_Y,             # <<<<<<<<<<<<<<
 *     "LThumb": libovr_capi.ovrButton_LThumb,
 *     "LShoulder": libovr_capi.ovrButton_LShoulder,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_Y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Y, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":408
 *     "X": libovr_capi.ovrButton_X,
 *     "Y": libovr_capi.ovrButton_Y,
 *     "LThumb": libovr_capi.ovrButton_LThumb,             # <<<<<<<<<<<<<<
 *     "LShoulder": libovr_capi.ovrButton_LShoulder,
 *     "Up": libovr_capi.ovrButton_Up,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_LThumb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LThumb, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":409
 *     "Y": libovr_capi.ovrButton_Y,
 *     "LThumb": libovr_capi.ovrButton_LThumb,
 *     "LShoulder": libovr_capi.ovrButton_LShoulder,             # <<<<<<<<<<<<<<
 *     "Up": libovr_capi.ovrButton_Up,
 *     "Down": libovr_capi.ovrButton_Down,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_LShoulder); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LShoulder, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":410
 *     "LThumb": libovr_capi.ovrButton_LThumb,
 *     "LShoulder": libovr_capi.ovrButton_LShoulder,
 *     "Up": libovr_capi.ovrButton_Up,             # <<<<<<<<<<<<<<
 *     "Down": libovr_capi.ovrButton_Down,
 *     "Left": libovr_capi.ovrButton_Left,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_Up); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Up, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":411
 *     "LShoulder": libovr_capi.ovrButton_LShoulder,
 *     "Up": libovr_capi.ovrButton_Up,
 *     "Down": libovr_capi.ovrButton_Down,             # <<<<<<<<<<<<<<
 *     "Left": libovr_capi.ovrButton_Left,
 *     "Right": libovr_capi.ovrButton_Right,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_Down); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Down, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":412
 *     "Up": libovr_capi.ovrButton_Up,
 *     "Down": libovr_capi.ovrButton_Down,
 *     "Left": libovr_capi.ovrButton_Left,             # <<<<<<<<<<<<<<
 *     "Right": libovr_capi.ovrButton_Right,
 *     "Enter": libovr_capi.ovrButton_Enter,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_Left); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Left, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":413
 *     "Down": libovr_capi.ovrButton_Down,
 *     "Left": libovr_capi.ovrButton_Left,
 *     "Right": libovr_capi.ovrButton_Right,             # <<<<<<<<<<<<<<
 *     "Enter": libovr_capi.ovrButton_Enter,
 *     "Back": libovr_capi.ovrButton_Back,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_Right); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Right, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":414
 *     "Left": libovr_capi.ovrButton_Left,
 *     "Right": libovr_capi.ovrButton_Right,
 *     "Enter": libovr_capi.ovrButton_Enter,             # <<<<<<<<<<<<<<
 *     "Back": libovr_capi.ovrButton_Back,
 *     "VolUp": libovr_capi.ovrButton_VolUp,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_Enter); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Enter, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":415
 *     "Right": libovr_capi.ovrButton_Right,
 *     "Enter": libovr_capi.ovrButton_Enter,
 *     "Back": libovr_capi.ovrButton_Back,             # <<<<<<<<<<<<<<
 *     "VolUp": libovr_capi.ovrButton_VolUp,
 *     "VolDown": libovr_capi.ovrButton_VolDown,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_Back); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Back, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":416
 *     "Enter": libovr_capi.ovrButton_Enter,
 *     "Back": libovr_capi.ovrButton_Back,
 *     "VolUp": libovr_capi.ovrButton_VolUp,             # <<<<<<<<<<<<<<
 *     "VolDown": libovr_capi.ovrButton_VolDown,
 *     "Home": libovr_capi.ovrButton_Home,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_VolUp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_VolUp, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":417
 *     "Back": libovr_capi.ovrButton_Back,
 *     "VolUp": libovr_capi.ovrButton_VolUp,
 *     "VolDown": libovr_capi.ovrButton_VolDown,             # <<<<<<<<<<<<<<
 *     "Home": libovr_capi.ovrButton_Home,
 *     "Private": libovr_capi.ovrButton_Private,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_VolDown); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_VolDown, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":418
 *     "VolUp": libovr_capi.ovrButton_VolUp,
 *     "VolDown": libovr_capi.ovrButton_VolDown,
 *     "Home": libovr_capi.ovrButton_Home,             # <<<<<<<<<<<<<<
 *     "Private": libovr_capi.ovrButton_Private,
 *     "RMask": libovr_capi.ovrButton_RMask,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_Home); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Home, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":419
 *     "VolDown": libovr_capi.ovrButton_VolDown,
 *     "Home": libovr_capi.ovrButton_Home,
 *     "Private": libovr_capi.ovrButton_Private,             # <<<<<<<<<<<<<<
 *     "RMask": libovr_capi.ovrButton_RMask,
 *     "LMask": libovr_capi.ovrButton_LMask}
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_Private); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Private, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":420
 *     "Home": libovr_capi.ovrButton_Home,
 *     "Private": libovr_capi.ovrButton_Private,
 *     "RMask": libovr_capi.ovrButton_RMask,             # <<<<<<<<<<<<<<
 *     "LMask": libovr_capi.ovrButton_LMask}
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_RMask); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RMask, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":421
 *     "Private": libovr_capi.ovrButton_Private,
 *     "RMask": libovr_capi.ovrButton_RMask,
 *     "LMask": libovr_capi.ovrButton_LMask}             # <<<<<<<<<<<<<<
 * 
 * LIBOVR_BUTTON_A = libovr_capi.ovrButton_A
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrButton(ovrButton_LMask); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LMask, __pyx_t_3) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_v_7psychxr_6libovr_7_libovr__controller_buttons);
  __Pyx_DECREF_SET(__pyx_v_7psychxr_6libovr_7_libovr__controller_buttons, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":423
 *     "LMask": libovr_capi.ovrButton_LMask}
 * 
 * LIBOVR_BUTTON_A = libovr_capi.ovrButton_A             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_B = libovr_capi.ovrButton_B
 * LIBOVR_BUTTON_RTHUMB = libovr_capi.ovrButton_RThumb
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_A, __pyx_t_1) < 0) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":424
 * 
 * LIBOVR_BUTTON_A = libovr_capi.ovrButton_A
 * LIBOVR_BUTTON_B = libovr_capi.ovrButton_B             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_RTHUMB = libovr_capi.ovrButton_RThumb
 * LIBOVR_BUTTON_RSHOULDER = libovr_capi.ovrButton_RShoulder
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_B); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_B, __pyx_t_1) < 0) __PYX_ERR(0, 424, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":425
 * LIBOVR_BUTTON_A = libovr_capi.ovrButton_A
 * LIBOVR_BUTTON_B = libovr_capi.ovrButton_B
 * LIBOVR_BUTTON_RTHUMB = libovr_capi.ovrButton_RThumb             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_RSHOULDER = libovr_capi.ovrButton_RShoulder
 * LIBOVR_BUTTON_X = libovr_capi.ovrButton_X
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_RThumb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_RTHUMB, __pyx_t_1) < 0) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":426
 * LIBOVR_BUTTON_B = libovr_capi.ovrButton_B
 * LIBOVR_BUTTON_RTHUMB = libovr_capi.ovrButton_RThumb
 * LIBOVR_BUTTON_RSHOULDER = libovr_capi.ovrButton_RShoulder             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_X = libovr_capi.ovrButton_X
 * LIBOVR_BUTTON_Y = libovr_capi.ovrButton_Y
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_RShoulder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_RSHOULDER, __pyx_t_1) < 0) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":427
 * LIBOVR_BUTTON_RTHUMB = libovr_capi.ovrButton_RThumb
 * LIBOVR_BUTTON_RSHOULDER = libovr_capi.ovrButton_RShoulder
 * LIBOVR_BUTTON_X = libovr_capi.ovrButton_X             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_Y = libovr_capi.ovrButton_Y
 * LIBOVR_BUTTON_LTHUMB = libovr_capi.ovrButton_LThumb
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_X, __pyx_t_1) < 0) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":428
 * LIBOVR_BUTTON_RSHOULDER = libovr_capi.ovrButton_RShoulder
 * LIBOVR_BUTTON_X = libovr_capi.ovrButton_X
 * LIBOVR_BUTTON_Y = libovr_capi.ovrButton_Y             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_LTHUMB = libovr_capi.ovrButton_LThumb
 * LIBOVR_BUTTON_LSHOULDER = libovr_capi.ovrButton_LShoulder
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_Y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_Y, __pyx_t_1) < 0) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":429
 * LIBOVR_BUTTON_X = libovr_capi.ovrButton_X
 * LIBOVR_BUTTON_Y = libovr_capi.ovrButton_Y
 * LIBOVR_BUTTON_LTHUMB = libovr_capi.ovrButton_LThumb             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_LSHOULDER = libovr_capi.ovrButton_LShoulder
 * LIBOVR_BUTTON_UP = libovr_capi.ovrButton_Up
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_LThumb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_LTHUMB, __pyx_t_1) < 0) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":430
 * LIBOVR_BUTTON_Y = libovr_capi.ovrButton_Y
 * LIBOVR_BUTTON_LTHUMB = libovr_capi.ovrButton_LThumb
 * LIBOVR_BUTTON_LSHOULDER = libovr_capi.ovrButton_LShoulder             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_UP = libovr_capi.ovrButton_Up
 * LIBOVR_BUTTON_DOWN = libovr_capi.ovrButton_Down
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_LShoulder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_LSHOULDER, __pyx_t_1) < 0) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":431
 * LIBOVR_BUTTON_LTHUMB = libovr_capi.ovrButton_LThumb
 * LIBOVR_BUTTON_LSHOULDER = libovr_capi.ovrButton_LShoulder
 * LIBOVR_BUTTON_UP = libovr_capi.ovrButton_Up             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_DOWN = libovr_capi.ovrButton_Down
 * LIBOVR_BUTTON_LEFT = libovr_capi.ovrButton_Left
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_Up); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_UP, __pyx_t_1) < 0) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":432
 * LIBOVR_BUTTON_LSHOULDER = libovr_capi.ovrButton_LShoulder
 * LIBOVR_BUTTON_UP = libovr_capi.ovrButton_Up
 * LIBOVR_BUTTON_DOWN = libovr_capi.ovrButton_Down             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_LEFT = libovr_capi.ovrButton_Left
 * LIBOVR_BUTTON_RIGHT = libovr_capi.ovrButton_Right
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_Down); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_DOWN, __pyx_t_1) < 0) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":433
 * LIBOVR_BUTTON_UP = libovr_capi.ovrButton_Up
 * LIBOVR_BUTTON_DOWN = libovr_capi.ovrButton_Down
 * LIBOVR_BUTTON_LEFT = libovr_capi.ovrButton_Left             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_RIGHT = libovr_capi.ovrButton_Right
 * LIBOVR_BUTTON_ENTER = libovr_capi.ovrButton_Enter
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_Left); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":434
 * LIBOVR_BUTTON_DOWN = libovr_capi.ovrButton_Down
 * LIBOVR_BUTTON_LEFT = libovr_capi.ovrButton_Left
 * LIBOVR_BUTTON_RIGHT = libovr_capi.ovrButton_Right             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_ENTER = libovr_capi.ovrButton_Enter
 * LIBOVR_BUTTON_BACK = libovr_capi.ovrButton_Back
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_Right); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":435
 * LIBOVR_BUTTON_LEFT = libovr_capi.ovrButton_Left
 * LIBOVR_BUTTON_RIGHT = libovr_capi.ovrButton_Right
 * LIBOVR_BUTTON_ENTER = libovr_capi.ovrButton_Enter             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_BACK = libovr_capi.ovrButton_Back
 * LIBOVR_BUTTON_VOLUP = libovr_capi.ovrButton_VolUp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_Enter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_ENTER, __pyx_t_1) < 0) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":436
 * LIBOVR_BUTTON_RIGHT = libovr_capi.ovrButton_Right
 * LIBOVR_BUTTON_ENTER = libovr_capi.ovrButton_Enter
 * LIBOVR_BUTTON_BACK = libovr_capi.ovrButton_Back             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_VOLUP = libovr_capi.ovrButton_VolUp
 * LIBOVR_BUTTON_VOLDOWN = libovr_capi.ovrButton_VolDown
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_Back); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_BACK, __pyx_t_1) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":437
 * LIBOVR_BUTTON_ENTER = libovr_capi.ovrButton_Enter
 * LIBOVR_BUTTON_BACK = libovr_capi.ovrButton_Back
 * LIBOVR_BUTTON_VOLUP = libovr_capi.ovrButton_VolUp             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_VOLDOWN = libovr_capi.ovrButton_VolDown
 * LIBOVR_BUTTON_HOME = libovr_capi.ovrButton_Home
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_VolUp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_VOLUP, __pyx_t_1) < 0) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":438
 * LIBOVR_BUTTON_BACK = libovr_capi.ovrButton_Back
 * LIBOVR_BUTTON_VOLUP = libovr_capi.ovrButton_VolUp
 * LIBOVR_BUTTON_VOLDOWN = libovr_capi.ovrButton_VolDown             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_HOME = libovr_capi.ovrButton_Home
 * LIBOVR_BUTTON_PRIVATE = libovr_capi.ovrButton_Private
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_VolDown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_VOLDOWN, __pyx_t_1) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":439
 * LIBOVR_BUTTON_VOLUP = libovr_capi.ovrButton_VolUp
 * LIBOVR_BUTTON_VOLDOWN = libovr_capi.ovrButton_VolDown
 * LIBOVR_BUTTON_HOME = libovr_capi.ovrButton_Home             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_PRIVATE = libovr_capi.ovrButton_Private
 * LIBOVR_BUTTON_RMASK = libovr_capi.ovrButton_RMask
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_Home); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_HOME, __pyx_t_1) < 0) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":440
 * LIBOVR_BUTTON_VOLDOWN = libovr_capi.ovrButton_VolDown
 * LIBOVR_BUTTON_HOME = libovr_capi.ovrButton_Home
 * LIBOVR_BUTTON_PRIVATE = libovr_capi.ovrButton_Private             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_RMASK = libovr_capi.ovrButton_RMask
 * LIBOVR_BUTTON_LMASK = libovr_capi.ovrButton_LMask
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_Private); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_PRIVATE, __pyx_t_1) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":441
 * LIBOVR_BUTTON_HOME = libovr_capi.ovrButton_Home
 * LIBOVR_BUTTON_PRIVATE = libovr_capi.ovrButton_Private
 * LIBOVR_BUTTON_RMASK = libovr_capi.ovrButton_RMask             # <<<<<<<<<<<<<<
 * LIBOVR_BUTTON_LMASK = libovr_capi.ovrButton_LMask
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_RMask); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_RMASK, __pyx_t_1) < 0) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":442
 * LIBOVR_BUTTON_PRIVATE = libovr_capi.ovrButton_Private
 * LIBOVR_BUTTON_RMASK = libovr_capi.ovrButton_RMask
 * LIBOVR_BUTTON_LMASK = libovr_capi.ovrButton_LMask             # <<<<<<<<<<<<<<
 * 
 * # Touch states
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrButton(ovrButton_LMask); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_BUTTON_LMASK, __pyx_t_1) < 0) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":447
 * #
 * cdef dict _touch_states = {
 *     "A": libovr_capi.ovrTouch_A,             # <<<<<<<<<<<<<<
 *     "B": libovr_capi.ovrTouch_B,
 *     "RThumb": libovr_capi.ovrTouch_RThumb,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_A); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_A, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":448
 * cdef dict _touch_states = {
 *     "A": libovr_capi.ovrTouch_A,
 *     "B": libovr_capi.ovrTouch_B,             # <<<<<<<<<<<<<<
 *     "RThumb": libovr_capi.ovrTouch_RThumb,
 *     "RThumbRest": libovr_capi.ovrTouch_RThumbRest,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_B); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_B, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":449
 *     "A": libovr_capi.ovrTouch_A,
 *     "B": libovr_capi.ovrTouch_B,
 *     "RThumb": libovr_capi.ovrTouch_RThumb,             # <<<<<<<<<<<<<<
 *     "RThumbRest": libovr_capi.ovrTouch_RThumbRest,
 *     "RIndexTrigger": libovr_capi.ovrTouch_RThumb,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_RThumb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RThumb, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":450
 *     "B": libovr_capi.ovrTouch_B,
 *     "RThumb": libovr_capi.ovrTouch_RThumb,
 *     "RThumbRest": libovr_capi.ovrTouch_RThumbRest,             # <<<<<<<<<<<<<<
 *     "RIndexTrigger": libovr_capi.ovrTouch_RThumb,
 *     "X": libovr_capi.ovrTouch_X,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_RThumbRest); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RThumbRest, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":451
 *     "RThumb": libovr_capi.ovrTouch_RThumb,
 *     "RThumbRest": libovr_capi.ovrTouch_RThumbRest,
 *     "RIndexTrigger": libovr_capi.ovrTouch_RThumb,             # <<<<<<<<<<<<<<
 *     "X": libovr_capi.ovrTouch_X,
 *     "Y": libovr_capi.ovrTouch_Y,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_RThumb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RIndexTrigger, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":452
 *     "RThumbRest": libovr_capi.ovrTouch_RThumbRest,
 *     "RIndexTrigger": libovr_capi.ovrTouch_RThumb,
 *     "X": libovr_capi.ovrTouch_X,             # <<<<<<<<<<<<<<
 *     "Y": libovr_capi.ovrTouch_Y,
 *     "LThumb": libovr_capi.ovrTouch_LThumb,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_X); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_X, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":453
 *     "RIndexTrigger": libovr_capi.ovrTouch_RThumb,
 *     "X": libovr_capi.ovrTouch_X,
 *     "Y": libovr_capi.ovrTouch_Y,             # <<<<<<<<<<<<<<
 *     "LThumb": libovr_capi.ovrTouch_LThumb,
 *     "LThumbRest": libovr_capi.ovrTouch_LThumbRest,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_Y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Y, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":454
 *     "X": libovr_capi.ovrTouch_X,
 *     "Y": libovr_capi.ovrTouch_Y,
 *     "LThumb": libovr_capi.ovrTouch_LThumb,             # <<<<<<<<<<<<<<
 *     "LThumbRest": libovr_capi.ovrTouch_LThumbRest,
 *     "LIndexTrigger": libovr_capi.ovrTouch_LIndexTrigger,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_LThumb); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LThumb, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":455
 *     "Y": libovr_capi.ovrTouch_Y,
 *     "LThumb": libovr_capi.ovrTouch_LThumb,
 *     "LThumbRest": libovr_capi.ovrTouch_LThumbRest,             # <<<<<<<<<<<<<<
 *     "LIndexTrigger": libovr_capi.ovrTouch_LIndexTrigger,
 *     "RIndexPointing": libovr_capi.ovrTouch_RIndexPointing,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_LThumbRest); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LThumbRest, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":456
 *     "LThumb": libovr_capi.ovrTouch_LThumb,
 *     "LThumbRest": libovr_capi.ovrTouch_LThumbRest,
 *     "LIndexTrigger": libovr_capi.ovrTouch_LIndexTrigger,             # <<<<<<<<<<<<<<
 *     "RIndexPointing": libovr_capi.ovrTouch_RIndexPointing,
 *     "RThumbUp": libovr_capi.ovrTouch_RThumbUp,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_LIndexTrigger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LIndexTrigger, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":457
 *     "LThumbRest": libovr_capi.ovrTouch_LThumbRest,
 *     "LIndexTrigger": libovr_capi.ovrTouch_LIndexTrigger,
 *     "RIndexPointing": libovr_capi.ovrTouch_RIndexPointing,             # <<<<<<<<<<<<<<
 *     "RThumbUp": libovr_capi.ovrTouch_RThumbUp,
 *     "LIndexPointing": libovr_capi.ovrTouch_LIndexPointing,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_RIndexPointing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RIndexPointing, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":458
 *     "LIndexTrigger": libovr_capi.ovrTouch_LIndexTrigger,
 *     "RIndexPointing": libovr_capi.ovrTouch_RIndexPointing,
 *     "RThumbUp": libovr_capi.ovrTouch_RThumbUp,             # <<<<<<<<<<<<<<
 *     "LIndexPointing": libovr_capi.ovrTouch_LIndexPointing,
 *     "LThumbUp": libovr_capi.ovrTouch_LThumbUp}
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_RThumbUp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RThumbUp, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":459
 *     "RIndexPointing": libovr_capi.ovrTouch_RIndexPointing,
 *     "RThumbUp": libovr_capi.ovrTouch_RThumbUp,
 *     "LIndexPointing": libovr_capi.ovrTouch_LIndexPointing,             # <<<<<<<<<<<<<<
 *     "LThumbUp": libovr_capi.ovrTouch_LThumbUp}
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_LIndexPointing); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 459, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LIndexPointing, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":460
 *     "RThumbUp": libovr_capi.ovrTouch_RThumbUp,
 *     "LIndexPointing": libovr_capi.ovrTouch_LIndexPointing,
 *     "LThumbUp": libovr_capi.ovrTouch_LThumbUp}             # <<<<<<<<<<<<<<
 * 
 * LIBOVR_TOUCH_A = libovr_capi.ovrTouch_A
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrTouch(ovrTouch_LThumbUp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LThumbUp, __pyx_t_3) < 0) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_v_7psychxr_6libovr_7_libovr__touch_states);
  __Pyx_DECREF_SET(__pyx_v_7psychxr_6libovr_7_libovr__touch_states, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":462
 *     "LThumbUp": libovr_capi.ovrTouch_LThumbUp}
 * 
 * LIBOVR_TOUCH_A = libovr_capi.ovrTouch_A             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_B = libovr_capi.ovrTouch_B
 * LIBOVR_TOUCH_RTHUMB = libovr_capi.ovrTouch_RThumb
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_A); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_A, __pyx_t_1) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":463
 * 
 * LIBOVR_TOUCH_A = libovr_capi.ovrTouch_A
 * LIBOVR_TOUCH_B = libovr_capi.ovrTouch_B             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_RTHUMB = libovr_capi.ovrTouch_RThumb
 * LIBOVR_TOUCH_RTHUMBREST = libovr_capi.ovrTouch_RThumbRest
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_B); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_B, __pyx_t_1) < 0) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":464
 * LIBOVR_TOUCH_A = libovr_capi.ovrTouch_A
 * LIBOVR_TOUCH_B = libovr_capi.ovrTouch_B
 * LIBOVR_TOUCH_RTHUMB = libovr_capi.ovrTouch_RThumb             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_RTHUMBREST = libovr_capi.ovrTouch_RThumbRest
 * LIBOVR_TOUCH_X = libovr_capi.ovrTouch_X
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_RThumb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_RTHUMB, __pyx_t_1) < 0) __PYX_ERR(0, 464, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":465
 * LIBOVR_TOUCH_B = libovr_capi.ovrTouch_B
 * LIBOVR_TOUCH_RTHUMB = libovr_capi.ovrTouch_RThumb
 * LIBOVR_TOUCH_RTHUMBREST = libovr_capi.ovrTouch_RThumbRest             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_X = libovr_capi.ovrTouch_X
 * LIBOVR_TOUCH_Y = libovr_capi.ovrTouch_Y
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_RThumbRest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_RTHUMBREST, __pyx_t_1) < 0) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":466
 * LIBOVR_TOUCH_RTHUMB = libovr_capi.ovrTouch_RThumb
 * LIBOVR_TOUCH_RTHUMBREST = libovr_capi.ovrTouch_RThumbRest
 * LIBOVR_TOUCH_X = libovr_capi.ovrTouch_X             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_Y = libovr_capi.ovrTouch_Y
 * LIBOVR_TOUCH_LTHUMB = libovr_capi.ovrTouch_LThumb
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_X); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_X, __pyx_t_1) < 0) __PYX_ERR(0, 466, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":467
 * LIBOVR_TOUCH_RTHUMBREST = libovr_capi.ovrTouch_RThumbRest
 * LIBOVR_TOUCH_X = libovr_capi.ovrTouch_X
 * LIBOVR_TOUCH_Y = libovr_capi.ovrTouch_Y             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_LTHUMB = libovr_capi.ovrTouch_LThumb
 * LIBOVR_TOUCH_RTHUMBREST = libovr_capi.ovrTouch_LThumbRest
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_Y); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_Y, __pyx_t_1) < 0) __PYX_ERR(0, 467, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":468
 * LIBOVR_TOUCH_X = libovr_capi.ovrTouch_X
 * LIBOVR_TOUCH_Y = libovr_capi.ovrTouch_Y
 * LIBOVR_TOUCH_LTHUMB = libovr_capi.ovrTouch_LThumb             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_RTHUMBREST = libovr_capi.ovrTouch_LThumbRest
 * LIBOVR_TOUCH_LINDEXTRIGGER = libovr_capi.ovrTouch_LIndexTrigger
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_LThumb); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_LTHUMB, __pyx_t_1) < 0) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":469
 * LIBOVR_TOUCH_Y = libovr_capi.ovrTouch_Y
 * LIBOVR_TOUCH_LTHUMB = libovr_capi.ovrTouch_LThumb
 * LIBOVR_TOUCH_RTHUMBREST = libovr_capi.ovrTouch_LThumbRest             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_LINDEXTRIGGER = libovr_capi.ovrTouch_LIndexTrigger
 * LIBOVR_TOUCH_RINDEXPOINTING = libovr_capi.ovrTouch_RIndexPointing
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_LThumbRest); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_RTHUMBREST, __pyx_t_1) < 0) __PYX_ERR(0, 469, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":470
 * LIBOVR_TOUCH_LTHUMB = libovr_capi.ovrTouch_LThumb
 * LIBOVR_TOUCH_RTHUMBREST = libovr_capi.ovrTouch_LThumbRest
 * LIBOVR_TOUCH_LINDEXTRIGGER = libovr_capi.ovrTouch_LIndexTrigger             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_RINDEXPOINTING = libovr_capi.ovrTouch_RIndexPointing
 * LIBOVR_TOUCH_RTHUMBUP = libovr_capi.ovrTouch_RThumbUp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_LIndexTrigger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_LINDEXTRIGGER, __pyx_t_1) < 0) __PYX_ERR(0, 470, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":471
 * LIBOVR_TOUCH_RTHUMBREST = libovr_capi.ovrTouch_LThumbRest
 * LIBOVR_TOUCH_LINDEXTRIGGER = libovr_capi.ovrTouch_LIndexTrigger
 * LIBOVR_TOUCH_RINDEXPOINTING = libovr_capi.ovrTouch_RIndexPointing             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_RTHUMBUP = libovr_capi.ovrTouch_RThumbUp
 * LIBOVR_TOUCH_LINDEXPOINTING = libovr_capi.ovrTouch_LIndexPointing
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_RIndexPointing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_RINDEXPOINTING, __pyx_t_1) < 0) __PYX_ERR(0, 471, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":472
 * LIBOVR_TOUCH_LINDEXTRIGGER = libovr_capi.ovrTouch_LIndexTrigger
 * LIBOVR_TOUCH_RINDEXPOINTING = libovr_capi.ovrTouch_RIndexPointing
 * LIBOVR_TOUCH_RTHUMBUP = libovr_capi.ovrTouch_RThumbUp             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_LINDEXPOINTING = libovr_capi.ovrTouch_LIndexPointing
 * LIBOVR_TOUCH_LTHUMBUP = libovr_capi.ovrTouch_LThumbUp
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_RThumbUp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_RTHUMBUP, __pyx_t_1) < 0) __PYX_ERR(0, 472, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":473
 * LIBOVR_TOUCH_RINDEXPOINTING = libovr_capi.ovrTouch_RIndexPointing
 * LIBOVR_TOUCH_RTHUMBUP = libovr_capi.ovrTouch_RThumbUp
 * LIBOVR_TOUCH_LINDEXPOINTING = libovr_capi.ovrTouch_LIndexPointing             # <<<<<<<<<<<<<<
 * LIBOVR_TOUCH_LTHUMBUP = libovr_capi.ovrTouch_LThumbUp
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_LIndexPointing); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_LINDEXPOINTING, __pyx_t_1) < 0) __PYX_ERR(0, 473, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":474
 * LIBOVR_TOUCH_RTHUMBUP = libovr_capi.ovrTouch_RThumbUp
 * LIBOVR_TOUCH_LINDEXPOINTING = libovr_capi.ovrTouch_LIndexPointing
 * LIBOVR_TOUCH_LTHUMBUP = libovr_capi.ovrTouch_LThumbUp             # <<<<<<<<<<<<<<
 * 
 * # Controller types
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTouch(ovrTouch_LThumbUp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TOUCH_LTHUMBUP, __pyx_t_1) < 0) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":479
 * #
 * cdef dict _controller_types = {
 *     'Xbox' : libovr_capi.ovrControllerType_XBox,             # <<<<<<<<<<<<<<
 *     'Remote' : libovr_capi.ovrControllerType_Remote,
 *     'Touch' : libovr_capi.ovrControllerType_Touch,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_XBox); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Xbox, __pyx_t_3) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":480
 * cdef dict _controller_types = {
 *     'Xbox' : libovr_capi.ovrControllerType_XBox,
 *     'Remote' : libovr_capi.ovrControllerType_Remote,             # <<<<<<<<<<<<<<
 *     'Touch' : libovr_capi.ovrControllerType_Touch,
 *     'LeftTouch' : libovr_capi.ovrControllerType_LTouch,
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_Remote); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Remote, __pyx_t_3) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":481
 *     'Xbox' : libovr_capi.ovrControllerType_XBox,
 *     'Remote' : libovr_capi.ovrControllerType_Remote,
 *     'Touch' : libovr_capi.ovrControllerType_Touch,             # <<<<<<<<<<<<<<
 *     'LeftTouch' : libovr_capi.ovrControllerType_LTouch,
 *     'RightTouch' : libovr_capi.ovrControllerType_RTouch}
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_Touch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Touch, __pyx_t_3) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":482
 *     'Remote' : libovr_capi.ovrControllerType_Remote,
 *     'Touch' : libovr_capi.ovrControllerType_Touch,
 *     'LeftTouch' : libovr_capi.ovrControllerType_LTouch,             # <<<<<<<<<<<<<<
 *     'RightTouch' : libovr_capi.ovrControllerType_RTouch}
 * 
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_LTouch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_LeftTouch, __pyx_t_3) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "psychxr/libovr/_libovr.pyx":483
 *     'Touch' : libovr_capi.ovrControllerType_Touch,
 *     'LeftTouch' : libovr_capi.ovrControllerType_LTouch,
 *     'RightTouch' : libovr_capi.ovrControllerType_RTouch}             # <<<<<<<<<<<<<<
 * 
 * # ---------
 */
  __pyx_t_3 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_RTouch); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_RightTouch, __pyx_t_3) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_v_7psychxr_6libovr_7_libovr__controller_types);
  __Pyx_DECREF_SET(__pyx_v_7psychxr_6libovr_7_libovr__controller_types, ((PyObject*)__pyx_t_1));
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":490
 * #
 * # controller types
 * LIBOVR_CONTROLLER_TYPE_XBOX = libovr_capi.ovrControllerType_XBox             # <<<<<<<<<<<<<<
 * LIBOVR_CONTROLLER_TYPE_REMOTE = libovr_capi.ovrControllerType_Remote
 * LIBOVR_CONTROLLER_TYPE_TOUCH = libovr_capi.ovrControllerType_Touch
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_XBox); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_XBOX, __pyx_t_1) < 0) __PYX_ERR(0, 490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":491
 * # controller types
 * LIBOVR_CONTROLLER_TYPE_XBOX = libovr_capi.ovrControllerType_XBox
 * LIBOVR_CONTROLLER_TYPE_REMOTE = libovr_capi.ovrControllerType_Remote             # <<<<<<<<<<<<<<
 * LIBOVR_CONTROLLER_TYPE_TOUCH = libovr_capi.ovrControllerType_Touch
 * LIBOVR_CONTROLLER_TYPE_LTOUCH = libovr_capi.ovrControllerType_LTouch
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_Remote); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_REMOTE, __pyx_t_1) < 0) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":492
 * LIBOVR_CONTROLLER_TYPE_XBOX = libovr_capi.ovrControllerType_XBox
 * LIBOVR_CONTROLLER_TYPE_REMOTE = libovr_capi.ovrControllerType_Remote
 * LIBOVR_CONTROLLER_TYPE_TOUCH = libovr_capi.ovrControllerType_Touch             # <<<<<<<<<<<<<<
 * LIBOVR_CONTROLLER_TYPE_LTOUCH = libovr_capi.ovrControllerType_LTouch
 * LIBOVR_CONTROLLER_TYPE_RTOUCH = libovr_capi.ovrControllerType_RTouch
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_Touch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_TOUCH, __pyx_t_1) < 0) __PYX_ERR(0, 492, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":493
 * LIBOVR_CONTROLLER_TYPE_REMOTE = libovr_capi.ovrControllerType_Remote
 * LIBOVR_CONTROLLER_TYPE_TOUCH = libovr_capi.ovrControllerType_Touch
 * LIBOVR_CONTROLLER_TYPE_LTOUCH = libovr_capi.ovrControllerType_LTouch             # <<<<<<<<<<<<<<
 * LIBOVR_CONTROLLER_TYPE_RTOUCH = libovr_capi.ovrControllerType_RTouch
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_LTouch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_LTOUCH, __pyx_t_1) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":494
 * LIBOVR_CONTROLLER_TYPE_TOUCH = libovr_capi.ovrControllerType_Touch
 * LIBOVR_CONTROLLER_TYPE_LTOUCH = libovr_capi.ovrControllerType_LTouch
 * LIBOVR_CONTROLLER_TYPE_RTOUCH = libovr_capi.ovrControllerType_RTouch             # <<<<<<<<<<<<<<
 * 
 * # return success codes, values other than 'LIBOVR_SUCCESS' are conditional
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrControllerType(ovrControllerType_RTouch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_CONTROLLER_TYPE_RTOUCH, __pyx_t_1) < 0) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":497
 * 
 * # return success codes, values other than 'LIBOVR_SUCCESS' are conditional
 * LIBOVR_SUCCESS = libovr_capi.ovrSuccess             # <<<<<<<<<<<<<<
 * LIBOVR_SUCCESS_NOT_VISIBLE = libovr_capi.ovrSuccess_NotVisible
 * LIBOVR_SUCCESS_DEVICE_UNAVAILABLE = libovr_capi.ovrSuccess_DeviceUnavailable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrSuccessType(ovrSuccess); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_SUCCESS, __pyx_t_1) < 0) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":498
 * # return success codes, values other than 'LIBOVR_SUCCESS' are conditional
 * LIBOVR_SUCCESS = libovr_capi.ovrSuccess
 * LIBOVR_SUCCESS_NOT_VISIBLE = libovr_capi.ovrSuccess_NotVisible             # <<<<<<<<<<<<<<
 * LIBOVR_SUCCESS_DEVICE_UNAVAILABLE = libovr_capi.ovrSuccess_DeviceUnavailable
 * LIBOVR_SUCCESS_BOUNDARY_INVALID = libovr_capi.ovrSuccess_BoundaryInvalid
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrSuccessTypes(ovrSuccess_NotVisible); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_SUCCESS_NOT_VISIBLE, __pyx_t_1) < 0) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":499
 * LIBOVR_SUCCESS = libovr_capi.ovrSuccess
 * LIBOVR_SUCCESS_NOT_VISIBLE = libovr_capi.ovrSuccess_NotVisible
 * LIBOVR_SUCCESS_DEVICE_UNAVAILABLE = libovr_capi.ovrSuccess_DeviceUnavailable             # <<<<<<<<<<<<<<
 * LIBOVR_SUCCESS_BOUNDARY_INVALID = libovr_capi.ovrSuccess_BoundaryInvalid
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrSuccessTypes(ovrSuccess_DeviceUnavailable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_SUCCESS_DEVICE_UNAVAILABL, __pyx_t_1) < 0) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":500
 * LIBOVR_SUCCESS_NOT_VISIBLE = libovr_capi.ovrSuccess_NotVisible
 * LIBOVR_SUCCESS_DEVICE_UNAVAILABLE = libovr_capi.ovrSuccess_DeviceUnavailable
 * LIBOVR_SUCCESS_BOUNDARY_INVALID = libovr_capi.ovrSuccess_BoundaryInvalid             # <<<<<<<<<<<<<<
 * 
 * # return error code, not all of these are applicable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrSuccessTypes(ovrSuccess_BoundaryInvalid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_SUCCESS_BOUNDARY_INVALID, __pyx_t_1) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":503
 * 
 * # return error code, not all of these are applicable
 * LIBOVR_ERROR_MEMORY_ALLOCATION_FAILURE = libovr_capi.ovrError_MemoryAllocationFailure             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_INVALID_SESSION = libovr_capi.ovrError_InvalidSession
 * LIBOVR_ERROR_TIMEOUT = libovr_capi.ovrError_Timeout
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_MemoryAllocationFailure); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_MEMORY_ALLOCATION_F, __pyx_t_1) < 0) __PYX_ERR(0, 503, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":504
 * # return error code, not all of these are applicable
 * LIBOVR_ERROR_MEMORY_ALLOCATION_FAILURE = libovr_capi.ovrError_MemoryAllocationFailure
 * LIBOVR_ERROR_INVALID_SESSION = libovr_capi.ovrError_InvalidSession             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_TIMEOUT = libovr_capi.ovrError_Timeout
 * LIBOVR_ERROR_NOT_INITIALIZED = libovr_capi.ovrError_NotInitialized
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_InvalidSession); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_INVALID_SESSION, __pyx_t_1) < 0) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":505
 * LIBOVR_ERROR_MEMORY_ALLOCATION_FAILURE = libovr_capi.ovrError_MemoryAllocationFailure
 * LIBOVR_ERROR_INVALID_SESSION = libovr_capi.ovrError_InvalidSession
 * LIBOVR_ERROR_TIMEOUT = libovr_capi.ovrError_Timeout             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_NOT_INITIALIZED = libovr_capi.ovrError_NotInitialized
 * LIBOVR_ERROR_INVALID_PARAMETER = libovr_capi.ovrError_InvalidParameter
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_Timeout); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_TIMEOUT, __pyx_t_1) < 0) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":506
 * LIBOVR_ERROR_INVALID_SESSION = libovr_capi.ovrError_InvalidSession
 * LIBOVR_ERROR_TIMEOUT = libovr_capi.ovrError_Timeout
 * LIBOVR_ERROR_NOT_INITIALIZED = libovr_capi.ovrError_NotInitialized             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_INVALID_PARAMETER = libovr_capi.ovrError_InvalidParameter
 * LIBOVR_ERROR_SERVICE_ERROR = libovr_capi.ovrError_ServiceError
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_NotInitialized); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_NOT_INITIALIZED, __pyx_t_1) < 0) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":507
 * LIBOVR_ERROR_TIMEOUT = libovr_capi.ovrError_Timeout
 * LIBOVR_ERROR_NOT_INITIALIZED = libovr_capi.ovrError_NotInitialized
 * LIBOVR_ERROR_INVALID_PARAMETER = libovr_capi.ovrError_InvalidParameter             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_SERVICE_ERROR = libovr_capi.ovrError_ServiceError
 * LIBOVR_ERROR_NO_HMD = libovr_capi.ovrError_NoHmd
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_InvalidParameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_INVALID_PARAMETER, __pyx_t_1) < 0) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":508
 * LIBOVR_ERROR_NOT_INITIALIZED = libovr_capi.ovrError_NotInitialized
 * LIBOVR_ERROR_INVALID_PARAMETER = libovr_capi.ovrError_InvalidParameter
 * LIBOVR_ERROR_SERVICE_ERROR = libovr_capi.ovrError_ServiceError             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_NO_HMD = libovr_capi.ovrError_NoHmd
 * LIBOVR_ERROR_UNSUPPORTED = libovr_capi.ovrError_Unsupported
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ServiceError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_SERVICE_ERROR, __pyx_t_1) < 0) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":509
 * LIBOVR_ERROR_INVALID_PARAMETER = libovr_capi.ovrError_InvalidParameter
 * LIBOVR_ERROR_SERVICE_ERROR = libovr_capi.ovrError_ServiceError
 * LIBOVR_ERROR_NO_HMD = libovr_capi.ovrError_NoHmd             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_UNSUPPORTED = libovr_capi.ovrError_Unsupported
 * LIBOVR_ERROR_DEVICE_UNAVAILABLE = libovr_capi.ovrError_DeviceUnavailable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_NoHmd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_NO_HMD, __pyx_t_1) < 0) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":510
 * LIBOVR_ERROR_SERVICE_ERROR = libovr_capi.ovrError_ServiceError
 * LIBOVR_ERROR_NO_HMD = libovr_capi.ovrError_NoHmd
 * LIBOVR_ERROR_UNSUPPORTED = libovr_capi.ovrError_Unsupported             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_DEVICE_UNAVAILABLE = libovr_capi.ovrError_DeviceUnavailable
 * LIBOVR_ERROR_INVALID_HEADSET_ORIENTATION = libovr_capi.ovrError_InvalidHeadsetOrientation
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_Unsupported); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_UNSUPPORTED, __pyx_t_1) < 0) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":511
 * LIBOVR_ERROR_NO_HMD = libovr_capi.ovrError_NoHmd
 * LIBOVR_ERROR_UNSUPPORTED = libovr_capi.ovrError_Unsupported
 * LIBOVR_ERROR_DEVICE_UNAVAILABLE = libovr_capi.ovrError_DeviceUnavailable             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_INVALID_HEADSET_ORIENTATION = libovr_capi.ovrError_InvalidHeadsetOrientation
 * LIBOVR_ERROR_CLIENT_SKIPPED_DESTROY = libovr_capi.ovrError_ClientSkippedDestroy
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_DeviceUnavailable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_DEVICE_UNAVAILABLE, __pyx_t_1) < 0) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":512
 * LIBOVR_ERROR_UNSUPPORTED = libovr_capi.ovrError_Unsupported
 * LIBOVR_ERROR_DEVICE_UNAVAILABLE = libovr_capi.ovrError_DeviceUnavailable
 * LIBOVR_ERROR_INVALID_HEADSET_ORIENTATION = libovr_capi.ovrError_InvalidHeadsetOrientation             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_CLIENT_SKIPPED_DESTROY = libovr_capi.ovrError_ClientSkippedDestroy
 * LIBOVR_ERROR_CLIENT_SKIPPED_SHUTDOWN = libovr_capi.ovrError_ClientSkippedShutdown
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_InvalidHeadsetOrientation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_INVALID_HEADSET_ORI, __pyx_t_1) < 0) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":513
 * LIBOVR_ERROR_DEVICE_UNAVAILABLE = libovr_capi.ovrError_DeviceUnavailable
 * LIBOVR_ERROR_INVALID_HEADSET_ORIENTATION = libovr_capi.ovrError_InvalidHeadsetOrientation
 * LIBOVR_ERROR_CLIENT_SKIPPED_DESTROY = libovr_capi.ovrError_ClientSkippedDestroy             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_CLIENT_SKIPPED_SHUTDOWN = libovr_capi.ovrError_ClientSkippedShutdown
 * LIBOVR_ERROR_SERVICE_DEADLOCK_DETECTED = libovr_capi.ovrError_ServiceDeadlockDetected
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ClientSkippedDestroy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_DEST, __pyx_t_1) < 0) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":514
 * LIBOVR_ERROR_INVALID_HEADSET_ORIENTATION = libovr_capi.ovrError_InvalidHeadsetOrientation
 * LIBOVR_ERROR_CLIENT_SKIPPED_DESTROY = libovr_capi.ovrError_ClientSkippedDestroy
 * LIBOVR_ERROR_CLIENT_SKIPPED_SHUTDOWN = libovr_capi.ovrError_ClientSkippedShutdown             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_SERVICE_DEADLOCK_DETECTED = libovr_capi.ovrError_ServiceDeadlockDetected
 * LIBOVR_ERROR_INVALID_OPERATION = libovr_capi.ovrError_InvalidOperation
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ClientSkippedShutdown); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_CLIENT_SKIPPED_SHUT, __pyx_t_1) < 0) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":515
 * LIBOVR_ERROR_CLIENT_SKIPPED_DESTROY = libovr_capi.ovrError_ClientSkippedDestroy
 * LIBOVR_ERROR_CLIENT_SKIPPED_SHUTDOWN = libovr_capi.ovrError_ClientSkippedShutdown
 * LIBOVR_ERROR_SERVICE_DEADLOCK_DETECTED = libovr_capi.ovrError_ServiceDeadlockDetected             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_INVALID_OPERATION = libovr_capi.ovrError_InvalidOperation
 * LIBOVR_ERROR_INSUFFICENT_ARRAY_SIZE = libovr_capi.ovrError_InsufficientArraySize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ServiceDeadlockDetected); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_SERVICE_DEADLOCK_DE, __pyx_t_1) < 0) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":516
 * LIBOVR_ERROR_CLIENT_SKIPPED_SHUTDOWN = libovr_capi.ovrError_ClientSkippedShutdown
 * LIBOVR_ERROR_SERVICE_DEADLOCK_DETECTED = libovr_capi.ovrError_ServiceDeadlockDetected
 * LIBOVR_ERROR_INVALID_OPERATION = libovr_capi.ovrError_InvalidOperation             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_INSUFFICENT_ARRAY_SIZE = libovr_capi.ovrError_InsufficientArraySize
 * LIBOVR_ERROR_NO_EXTERNAL_CAMERA_INFO = libovr_capi.ovrError_NoExternalCameraInfo
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_InvalidOperation); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_INVALID_OPERATION, __pyx_t_1) < 0) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":517
 * LIBOVR_ERROR_SERVICE_DEADLOCK_DETECTED = libovr_capi.ovrError_ServiceDeadlockDetected
 * LIBOVR_ERROR_INVALID_OPERATION = libovr_capi.ovrError_InvalidOperation
 * LIBOVR_ERROR_INSUFFICENT_ARRAY_SIZE = libovr_capi.ovrError_InsufficientArraySize             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_NO_EXTERNAL_CAMERA_INFO = libovr_capi.ovrError_NoExternalCameraInfo
 * LIBOVR_ERROR_LOST_TRACKING = libovr_capi.ovrError_LostTracking
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_InsufficientArraySize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_INSUFFICENT_ARRAY_S, __pyx_t_1) < 0) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":518
 * LIBOVR_ERROR_INVALID_OPERATION = libovr_capi.ovrError_InvalidOperation
 * LIBOVR_ERROR_INSUFFICENT_ARRAY_SIZE = libovr_capi.ovrError_InsufficientArraySize
 * LIBOVR_ERROR_NO_EXTERNAL_CAMERA_INFO = libovr_capi.ovrError_NoExternalCameraInfo             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_LOST_TRACKING = libovr_capi.ovrError_LostTracking
 * LIBOVR_ERROR_EXTERNAL_CAMERA_INITIALIZED_FAILED = libovr_capi.ovrError_ExternalCameraInitializedFailed
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_NoExternalCameraInfo); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_NO_EXTERNAL_CAMERA, __pyx_t_1) < 0) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":519
 * LIBOVR_ERROR_INSUFFICENT_ARRAY_SIZE = libovr_capi.ovrError_InsufficientArraySize
 * LIBOVR_ERROR_NO_EXTERNAL_CAMERA_INFO = libovr_capi.ovrError_NoExternalCameraInfo
 * LIBOVR_ERROR_LOST_TRACKING = libovr_capi.ovrError_LostTracking             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_EXTERNAL_CAMERA_INITIALIZED_FAILED = libovr_capi.ovrError_ExternalCameraInitializedFailed
 * LIBOVR_ERROR_EXTERNAL_CAMERA_CAPTURE_FAILED = libovr_capi.ovrError_ExternalCameraCaptureFailed
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_LostTracking); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_LOST_TRACKING, __pyx_t_1) < 0) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":520
 * LIBOVR_ERROR_NO_EXTERNAL_CAMERA_INFO = libovr_capi.ovrError_NoExternalCameraInfo
 * LIBOVR_ERROR_LOST_TRACKING = libovr_capi.ovrError_LostTracking
 * LIBOVR_ERROR_EXTERNAL_CAMERA_INITIALIZED_FAILED = libovr_capi.ovrError_ExternalCameraInitializedFailed             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_EXTERNAL_CAMERA_CAPTURE_FAILED = libovr_capi.ovrError_ExternalCameraCaptureFailed
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_BUFFER_SIZE = libovr_capi.ovrError_ExternalCameraNameListsBufferSize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ExternalCameraInitializedFailed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_INI, __pyx_t_1) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":521
 * LIBOVR_ERROR_LOST_TRACKING = libovr_capi.ovrError_LostTracking
 * LIBOVR_ERROR_EXTERNAL_CAMERA_INITIALIZED_FAILED = libovr_capi.ovrError_ExternalCameraInitializedFailed
 * LIBOVR_ERROR_EXTERNAL_CAMERA_CAPTURE_FAILED = libovr_capi.ovrError_ExternalCameraCaptureFailed             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_BUFFER_SIZE = libovr_capi.ovrError_ExternalCameraNameListsBufferSize
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_MISMATCH = libovr_capi.ovrError_ExternalCameraNameListsMistmatch
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ExternalCameraCaptureFailed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_CAP, __pyx_t_1) < 0) __PYX_ERR(0, 521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":522
 * LIBOVR_ERROR_EXTERNAL_CAMERA_INITIALIZED_FAILED = libovr_capi.ovrError_ExternalCameraInitializedFailed
 * LIBOVR_ERROR_EXTERNAL_CAMERA_CAPTURE_FAILED = libovr_capi.ovrError_ExternalCameraCaptureFailed
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_BUFFER_SIZE = libovr_capi.ovrError_ExternalCameraNameListsBufferSize             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_MISMATCH = libovr_capi.ovrError_ExternalCameraNameListsMistmatch
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NOT_CALIBRATED = libovr_capi.ovrError_ExternalCameraNotCalibrated
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ExternalCameraNameListsBufferSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM, __pyx_t_1) < 0) __PYX_ERR(0, 522, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":523
 * LIBOVR_ERROR_EXTERNAL_CAMERA_CAPTURE_FAILED = libovr_capi.ovrError_ExternalCameraCaptureFailed
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_BUFFER_SIZE = libovr_capi.ovrError_ExternalCameraNameListsBufferSize
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_MISMATCH = libovr_capi.ovrError_ExternalCameraNameListsMistmatch             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NOT_CALIBRATED = libovr_capi.ovrError_ExternalCameraNotCalibrated
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_WRONG_SIZE = libovr_capi.ovrError_ExternalCameraNameWrongSize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ExternalCameraNameListsMistmatch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_2, __pyx_t_1) < 0) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":524
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_BUFFER_SIZE = libovr_capi.ovrError_ExternalCameraNameListsBufferSize
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_MISMATCH = libovr_capi.ovrError_ExternalCameraNameListsMistmatch
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NOT_CALIBRATED = libovr_capi.ovrError_ExternalCameraNotCalibrated             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_WRONG_SIZE = libovr_capi.ovrError_ExternalCameraNameWrongSize
 * LIBOVR_ERROR_AUDIO_DEVICE_NOT_FOUND = libovr_capi.ovrError_AudioDeviceNotFound
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ExternalCameraNotCalibrated); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NOT, __pyx_t_1) < 0) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":525
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_LISTS_MISMATCH = libovr_capi.ovrError_ExternalCameraNameListsMistmatch
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NOT_CALIBRATED = libovr_capi.ovrError_ExternalCameraNotCalibrated
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_WRONG_SIZE = libovr_capi.ovrError_ExternalCameraNameWrongSize             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_AUDIO_DEVICE_NOT_FOUND = libovr_capi.ovrError_AudioDeviceNotFound
 * LIBOVR_ERROR_AUDIO_COM_ERROR = libovr_capi.ovrError_AudioComError
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ExternalCameraNameWrongSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_EXTERNAL_CAMERA_NAM_3, __pyx_t_1) < 0) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":526
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NOT_CALIBRATED = libovr_capi.ovrError_ExternalCameraNotCalibrated
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_WRONG_SIZE = libovr_capi.ovrError_ExternalCameraNameWrongSize
 * LIBOVR_ERROR_AUDIO_DEVICE_NOT_FOUND = libovr_capi.ovrError_AudioDeviceNotFound             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_AUDIO_COM_ERROR = libovr_capi.ovrError_AudioComError
 * LIBOVR_ERROR_INITIALIZE = libovr_capi.ovrError_Initialize
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_AudioDeviceNotFound); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_AUDIO_DEVICE_NOT_FO, __pyx_t_1) < 0) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":527
 * LIBOVR_ERROR_EXTERNAL_CAMERA_NAME_WRONG_SIZE = libovr_capi.ovrError_ExternalCameraNameWrongSize
 * LIBOVR_ERROR_AUDIO_DEVICE_NOT_FOUND = libovr_capi.ovrError_AudioDeviceNotFound
 * LIBOVR_ERROR_AUDIO_COM_ERROR = libovr_capi.ovrError_AudioComError             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_INITIALIZE = libovr_capi.ovrError_Initialize
 * LIBOVR_ERROR_LIB_LOAD = libovr_capi.ovrError_LibLoad
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_AudioComError); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_AUDIO_COM_ERROR, __pyx_t_1) < 0) __PYX_ERR(0, 527, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":528
 * LIBOVR_ERROR_AUDIO_DEVICE_NOT_FOUND = libovr_capi.ovrError_AudioDeviceNotFound
 * LIBOVR_ERROR_AUDIO_COM_ERROR = libovr_capi.ovrError_AudioComError
 * LIBOVR_ERROR_INITIALIZE = libovr_capi.ovrError_Initialize             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_LIB_LOAD = libovr_capi.ovrError_LibLoad
 * LIBOVR_ERROR_SERVICE_CONNECTION = libovr_capi.ovrError_ServiceConnection
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_Initialize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_INITIALIZE, __pyx_t_1) < 0) __PYX_ERR(0, 528, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":529
 * LIBOVR_ERROR_AUDIO_COM_ERROR = libovr_capi.ovrError_AudioComError
 * LIBOVR_ERROR_INITIALIZE = libovr_capi.ovrError_Initialize
 * LIBOVR_ERROR_LIB_LOAD = libovr_capi.ovrError_LibLoad             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_SERVICE_CONNECTION = libovr_capi.ovrError_ServiceConnection
 * LIBOVR_ERROR_SERVICE_VERSION = libovr_capi.ovrError_ServiceVersion
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_LibLoad); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_LIB_LOAD, __pyx_t_1) < 0) __PYX_ERR(0, 529, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":530
 * LIBOVR_ERROR_INITIALIZE = libovr_capi.ovrError_Initialize
 * LIBOVR_ERROR_LIB_LOAD = libovr_capi.ovrError_LibLoad
 * LIBOVR_ERROR_SERVICE_CONNECTION = libovr_capi.ovrError_ServiceConnection             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_SERVICE_VERSION = libovr_capi.ovrError_ServiceVersion
 * LIBOVR_ERROR_INCOMPATIBLE_OS = libovr_capi.ovrError_IncompatibleOS
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ServiceConnection); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_SERVICE_CONNECTION, __pyx_t_1) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":531
 * LIBOVR_ERROR_LIB_LOAD = libovr_capi.ovrError_LibLoad
 * LIBOVR_ERROR_SERVICE_CONNECTION = libovr_capi.ovrError_ServiceConnection
 * LIBOVR_ERROR_SERVICE_VERSION = libovr_capi.ovrError_ServiceVersion             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_INCOMPATIBLE_OS = libovr_capi.ovrError_IncompatibleOS
 * LIBOVR_ERROR_DISPLAY_INIT = libovr_capi.ovrError_DisplayInit
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ServiceVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_SERVICE_VERSION, __pyx_t_1) < 0) __PYX_ERR(0, 531, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":532
 * LIBOVR_ERROR_SERVICE_CONNECTION = libovr_capi.ovrError_ServiceConnection
 * LIBOVR_ERROR_SERVICE_VERSION = libovr_capi.ovrError_ServiceVersion
 * LIBOVR_ERROR_INCOMPATIBLE_OS = libovr_capi.ovrError_IncompatibleOS             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_DISPLAY_INIT = libovr_capi.ovrError_DisplayInit
 * LIBOVR_ERROR_SERVER_START = libovr_capi.ovrError_ServerStart
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_IncompatibleOS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_INCOMPATIBLE_OS, __pyx_t_1) < 0) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":533
 * LIBOVR_ERROR_SERVICE_VERSION = libovr_capi.ovrError_ServiceVersion
 * LIBOVR_ERROR_INCOMPATIBLE_OS = libovr_capi.ovrError_IncompatibleOS
 * LIBOVR_ERROR_DISPLAY_INIT = libovr_capi.ovrError_DisplayInit             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_SERVER_START = libovr_capi.ovrError_ServerStart
 * LIBOVR_ERROR_REINITIALIZATION = libovr_capi.ovrError_Reinitialization
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_DisplayInit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_DISPLAY_INIT, __pyx_t_1) < 0) __PYX_ERR(0, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":534
 * LIBOVR_ERROR_INCOMPATIBLE_OS = libovr_capi.ovrError_IncompatibleOS
 * LIBOVR_ERROR_DISPLAY_INIT = libovr_capi.ovrError_DisplayInit
 * LIBOVR_ERROR_SERVER_START = libovr_capi.ovrError_ServerStart             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_REINITIALIZATION = libovr_capi.ovrError_Reinitialization
 * LIBOVR_ERROR_MISMATCHED_ADAPTERS = libovr_capi.ovrError_MismatchedAdapters
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ServerStart); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_SERVER_START, __pyx_t_1) < 0) __PYX_ERR(0, 534, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":535
 * LIBOVR_ERROR_DISPLAY_INIT = libovr_capi.ovrError_DisplayInit
 * LIBOVR_ERROR_SERVER_START = libovr_capi.ovrError_ServerStart
 * LIBOVR_ERROR_REINITIALIZATION = libovr_capi.ovrError_Reinitialization             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_MISMATCHED_ADAPTERS = libovr_capi.ovrError_MismatchedAdapters
 * LIBOVR_ERROR_LEAKING_RESOURCES = libovr_capi.ovrError_LeakingResources
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_Reinitialization); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_REINITIALIZATION, __pyx_t_1) < 0) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":536
 * LIBOVR_ERROR_SERVER_START = libovr_capi.ovrError_ServerStart
 * LIBOVR_ERROR_REINITIALIZATION = libovr_capi.ovrError_Reinitialization
 * LIBOVR_ERROR_MISMATCHED_ADAPTERS = libovr_capi.ovrError_MismatchedAdapters             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_LEAKING_RESOURCES = libovr_capi.ovrError_LeakingResources
 * LIBOVR_ERROR_CLIENT_VERSION = libovr_capi.ovrError_ClientVersion
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_MismatchedAdapters); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_MISMATCHED_ADAPTERS, __pyx_t_1) < 0) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":537
 * LIBOVR_ERROR_REINITIALIZATION = libovr_capi.ovrError_Reinitialization
 * LIBOVR_ERROR_MISMATCHED_ADAPTERS = libovr_capi.ovrError_MismatchedAdapters
 * LIBOVR_ERROR_LEAKING_RESOURCES = libovr_capi.ovrError_LeakingResources             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_CLIENT_VERSION = libovr_capi.ovrError_ClientVersion
 * LIBOVR_ERROR_OUT_OF_DATE_OS = libovr_capi.ovrError_OutOfDateOS
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_LeakingResources); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_LEAKING_RESOURCES, __pyx_t_1) < 0) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":538
 * LIBOVR_ERROR_MISMATCHED_ADAPTERS = libovr_capi.ovrError_MismatchedAdapters
 * LIBOVR_ERROR_LEAKING_RESOURCES = libovr_capi.ovrError_LeakingResources
 * LIBOVR_ERROR_CLIENT_VERSION = libovr_capi.ovrError_ClientVersion             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_OUT_OF_DATE_OS = libovr_capi.ovrError_OutOfDateOS
 * LIBOVR_ERROR_OUT_OF_DATE_GFX_DRIVER = libovr_capi.ovrError_OutOfDateGfxDriver
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ClientVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_CLIENT_VERSION, __pyx_t_1) < 0) __PYX_ERR(0, 538, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":539
 * LIBOVR_ERROR_LEAKING_RESOURCES = libovr_capi.ovrError_LeakingResources
 * LIBOVR_ERROR_CLIENT_VERSION = libovr_capi.ovrError_ClientVersion
 * LIBOVR_ERROR_OUT_OF_DATE_OS = libovr_capi.ovrError_OutOfDateOS             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_OUT_OF_DATE_GFX_DRIVER = libovr_capi.ovrError_OutOfDateGfxDriver
 * LIBOVR_ERROR_INCOMPATIBLE_OS = libovr_capi.ovrError_IncompatibleGPU
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_OutOfDateOS); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_OS, __pyx_t_1) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":540
 * LIBOVR_ERROR_CLIENT_VERSION = libovr_capi.ovrError_ClientVersion
 * LIBOVR_ERROR_OUT_OF_DATE_OS = libovr_capi.ovrError_OutOfDateOS
 * LIBOVR_ERROR_OUT_OF_DATE_GFX_DRIVER = libovr_capi.ovrError_OutOfDateGfxDriver             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_INCOMPATIBLE_OS = libovr_capi.ovrError_IncompatibleGPU
 * LIBOVR_ERROR_NO_VALID_VR_DISPLAY_SYSTEM = libovr_capi.ovrError_NoValidVRDisplaySystem
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_OutOfDateGfxDriver); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_OUT_OF_DATE_GFX_DRI, __pyx_t_1) < 0) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":541
 * LIBOVR_ERROR_OUT_OF_DATE_OS = libovr_capi.ovrError_OutOfDateOS
 * LIBOVR_ERROR_OUT_OF_DATE_GFX_DRIVER = libovr_capi.ovrError_OutOfDateGfxDriver
 * LIBOVR_ERROR_INCOMPATIBLE_OS = libovr_capi.ovrError_IncompatibleGPU             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_NO_VALID_VR_DISPLAY_SYSTEM = libovr_capi.ovrError_NoValidVRDisplaySystem
 * LIBOVR_ERROR_OBSOLETE = libovr_capi.ovrError_Obsolete
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_IncompatibleGPU); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_INCOMPATIBLE_OS, __pyx_t_1) < 0) __PYX_ERR(0, 541, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":542
 * LIBOVR_ERROR_OUT_OF_DATE_GFX_DRIVER = libovr_capi.ovrError_OutOfDateGfxDriver
 * LIBOVR_ERROR_INCOMPATIBLE_OS = libovr_capi.ovrError_IncompatibleGPU
 * LIBOVR_ERROR_NO_VALID_VR_DISPLAY_SYSTEM = libovr_capi.ovrError_NoValidVRDisplaySystem             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_OBSOLETE = libovr_capi.ovrError_Obsolete
 * LIBOVR_ERROR_DISABLED_OR_DEFAULT_ADAPTER = libovr_capi.ovrError_DisabledOrDefaultAdapter
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_NoValidVRDisplaySystem); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_NO_VALID_VR_DISPLAY, __pyx_t_1) < 0) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":543
 * LIBOVR_ERROR_INCOMPATIBLE_OS = libovr_capi.ovrError_IncompatibleGPU
 * LIBOVR_ERROR_NO_VALID_VR_DISPLAY_SYSTEM = libovr_capi.ovrError_NoValidVRDisplaySystem
 * LIBOVR_ERROR_OBSOLETE = libovr_capi.ovrError_Obsolete             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_DISABLED_OR_DEFAULT_ADAPTER = libovr_capi.ovrError_DisabledOrDefaultAdapter
 * LIBOVR_ERROR_HYBRID_GRAPHICS_NOT_SUPPORTED = libovr_capi.ovrError_HybridGraphicsNotSupported
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_Obsolete); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_OBSOLETE, __pyx_t_1) < 0) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":544
 * LIBOVR_ERROR_NO_VALID_VR_DISPLAY_SYSTEM = libovr_capi.ovrError_NoValidVRDisplaySystem
 * LIBOVR_ERROR_OBSOLETE = libovr_capi.ovrError_Obsolete
 * LIBOVR_ERROR_DISABLED_OR_DEFAULT_ADAPTER = libovr_capi.ovrError_DisabledOrDefaultAdapter             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_HYBRID_GRAPHICS_NOT_SUPPORTED = libovr_capi.ovrError_HybridGraphicsNotSupported
 * LIBOVR_ERROR_DISPLAY_MANAGER_INIT = libovr_capi.ovrError_DisplayManagerInit
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_DisabledOrDefaultAdapter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_DISABLED_OR_DEFAULT, __pyx_t_1) < 0) __PYX_ERR(0, 544, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":545
 * LIBOVR_ERROR_OBSOLETE = libovr_capi.ovrError_Obsolete
 * LIBOVR_ERROR_DISABLED_OR_DEFAULT_ADAPTER = libovr_capi.ovrError_DisabledOrDefaultAdapter
 * LIBOVR_ERROR_HYBRID_GRAPHICS_NOT_SUPPORTED = libovr_capi.ovrError_HybridGraphicsNotSupported             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_DISPLAY_MANAGER_INIT = libovr_capi.ovrError_DisplayManagerInit
 * LIBOVR_ERROR_TRACKER_DRIVER_INIT = libovr_capi.ovrError_TrackerDriverInit
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_HybridGraphicsNotSupported); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_HYBRID_GRAPHICS_NOT, __pyx_t_1) < 0) __PYX_ERR(0, 545, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":546
 * LIBOVR_ERROR_DISABLED_OR_DEFAULT_ADAPTER = libovr_capi.ovrError_DisabledOrDefaultAdapter
 * LIBOVR_ERROR_HYBRID_GRAPHICS_NOT_SUPPORTED = libovr_capi.ovrError_HybridGraphicsNotSupported
 * LIBOVR_ERROR_DISPLAY_MANAGER_INIT = libovr_capi.ovrError_DisplayManagerInit             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_TRACKER_DRIVER_INIT = libovr_capi.ovrError_TrackerDriverInit
 * LIBOVR_ERROR_LIB_SIGN_CHECK = libovr_capi.ovrError_LibSignCheck
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_DisplayManagerInit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_DISPLAY_MANAGER_INI, __pyx_t_1) < 0) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":547
 * LIBOVR_ERROR_HYBRID_GRAPHICS_NOT_SUPPORTED = libovr_capi.ovrError_HybridGraphicsNotSupported
 * LIBOVR_ERROR_DISPLAY_MANAGER_INIT = libovr_capi.ovrError_DisplayManagerInit
 * LIBOVR_ERROR_TRACKER_DRIVER_INIT = libovr_capi.ovrError_TrackerDriverInit             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_LIB_SIGN_CHECK = libovr_capi.ovrError_LibSignCheck
 * LIBOVR_ERROR_LIB_PATH = libovr_capi.ovrError_LibPath
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_TrackerDriverInit); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_TRACKER_DRIVER_INIT, __pyx_t_1) < 0) __PYX_ERR(0, 547, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":548
 * LIBOVR_ERROR_DISPLAY_MANAGER_INIT = libovr_capi.ovrError_DisplayManagerInit
 * LIBOVR_ERROR_TRACKER_DRIVER_INIT = libovr_capi.ovrError_TrackerDriverInit
 * LIBOVR_ERROR_LIB_SIGN_CHECK = libovr_capi.ovrError_LibSignCheck             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_LIB_PATH = libovr_capi.ovrError_LibPath
 * LIBOVR_ERROR_LIB_SYMBOLS = libovr_capi.ovrError_LibSymbols
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_LibSignCheck); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_LIB_SIGN_CHECK, __pyx_t_1) < 0) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":549
 * LIBOVR_ERROR_TRACKER_DRIVER_INIT = libovr_capi.ovrError_TrackerDriverInit
 * LIBOVR_ERROR_LIB_SIGN_CHECK = libovr_capi.ovrError_LibSignCheck
 * LIBOVR_ERROR_LIB_PATH = libovr_capi.ovrError_LibPath             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_LIB_SYMBOLS = libovr_capi.ovrError_LibSymbols
 * LIBOVR_ERROR_REMOTE_SESSION = libovr_capi.ovrError_RemoteSession
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_LibPath); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_LIB_PATH, __pyx_t_1) < 0) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":550
 * LIBOVR_ERROR_LIB_SIGN_CHECK = libovr_capi.ovrError_LibSignCheck
 * LIBOVR_ERROR_LIB_PATH = libovr_capi.ovrError_LibPath
 * LIBOVR_ERROR_LIB_SYMBOLS = libovr_capi.ovrError_LibSymbols             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_REMOTE_SESSION = libovr_capi.ovrError_RemoteSession
 * LIBOVR_ERROR_INITIALIZE_VULKAN = libovr_capi.ovrError_InitializeVulkan
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_LibSymbols); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_LIB_SYMBOLS, __pyx_t_1) < 0) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":551
 * LIBOVR_ERROR_LIB_PATH = libovr_capi.ovrError_LibPath
 * LIBOVR_ERROR_LIB_SYMBOLS = libovr_capi.ovrError_LibSymbols
 * LIBOVR_ERROR_REMOTE_SESSION = libovr_capi.ovrError_RemoteSession             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_INITIALIZE_VULKAN = libovr_capi.ovrError_InitializeVulkan
 * LIBOVR_ERROR_BLACKLISTED_GFX_DRIVER = libovr_capi.ovrError_BlacklistedGfxDriver
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_RemoteSession); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_REMOTE_SESSION, __pyx_t_1) < 0) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":552
 * LIBOVR_ERROR_LIB_SYMBOLS = libovr_capi.ovrError_LibSymbols
 * LIBOVR_ERROR_REMOTE_SESSION = libovr_capi.ovrError_RemoteSession
 * LIBOVR_ERROR_INITIALIZE_VULKAN = libovr_capi.ovrError_InitializeVulkan             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_BLACKLISTED_GFX_DRIVER = libovr_capi.ovrError_BlacklistedGfxDriver
 * LIBOVR_ERROR_DISPLAY_LOST = libovr_capi.ovrError_DisplayLost
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_InitializeVulkan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_INITIALIZE_VULKAN, __pyx_t_1) < 0) __PYX_ERR(0, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":553
 * LIBOVR_ERROR_REMOTE_SESSION = libovr_capi.ovrError_RemoteSession
 * LIBOVR_ERROR_INITIALIZE_VULKAN = libovr_capi.ovrError_InitializeVulkan
 * LIBOVR_ERROR_BLACKLISTED_GFX_DRIVER = libovr_capi.ovrError_BlacklistedGfxDriver             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_DISPLAY_LOST = libovr_capi.ovrError_DisplayLost
 * LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_FULL = libovr_capi.ovrError_TextureSwapChainFull
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_BlacklistedGfxDriver); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_BLACKLISTED_GFX_DRI, __pyx_t_1) < 0) __PYX_ERR(0, 553, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":554
 * LIBOVR_ERROR_INITIALIZE_VULKAN = libovr_capi.ovrError_InitializeVulkan
 * LIBOVR_ERROR_BLACKLISTED_GFX_DRIVER = libovr_capi.ovrError_BlacklistedGfxDriver
 * LIBOVR_ERROR_DISPLAY_LOST = libovr_capi.ovrError_DisplayLost             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_FULL = libovr_capi.ovrError_TextureSwapChainFull
 * LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_INVALID = libovr_capi.ovrError_TextureSwapChainInvalid
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_DisplayLost); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_DISPLAY_LOST, __pyx_t_1) < 0) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":555
 * LIBOVR_ERROR_BLACKLISTED_GFX_DRIVER = libovr_capi.ovrError_BlacklistedGfxDriver
 * LIBOVR_ERROR_DISPLAY_LOST = libovr_capi.ovrError_DisplayLost
 * LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_FULL = libovr_capi.ovrError_TextureSwapChainFull             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_INVALID = libovr_capi.ovrError_TextureSwapChainInvalid
 * LIBOVR_ERROR_GRAPHICS_DEVICE_RESET = libovr_capi.ovrError_GraphicsDeviceReset
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_TextureSwapChainFull); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN, __pyx_t_1) < 0) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":556
 * LIBOVR_ERROR_DISPLAY_LOST = libovr_capi.ovrError_DisplayLost
 * LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_FULL = libovr_capi.ovrError_TextureSwapChainFull
 * LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_INVALID = libovr_capi.ovrError_TextureSwapChainInvalid             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_GRAPHICS_DEVICE_RESET = libovr_capi.ovrError_GraphicsDeviceReset
 * LIBOVR_ERROR_DISPLAY_REMOVED = libovr_capi.ovrError_DisplayRemoved
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_TextureSwapChainInvalid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_2, __pyx_t_1) < 0) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":557
 * LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_FULL = libovr_capi.ovrError_TextureSwapChainFull
 * LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_INVALID = libovr_capi.ovrError_TextureSwapChainInvalid
 * LIBOVR_ERROR_GRAPHICS_DEVICE_RESET = libovr_capi.ovrError_GraphicsDeviceReset             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_DISPLAY_REMOVED = libovr_capi.ovrError_DisplayRemoved
 * LIBOVR_ERROR_CONTENT_PROTECTION_NOT_AVAILABLE = libovr_capi.ovrError_ContentProtectionNotAvailable
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_GraphicsDeviceReset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_GRAPHICS_DEVICE_RES, __pyx_t_1) < 0) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":558
 * LIBOVR_ERROR_TEXTURE_SWAP_CHAIN_INVALID = libovr_capi.ovrError_TextureSwapChainInvalid
 * LIBOVR_ERROR_GRAPHICS_DEVICE_RESET = libovr_capi.ovrError_GraphicsDeviceReset
 * LIBOVR_ERROR_DISPLAY_REMOVED = libovr_capi.ovrError_DisplayRemoved             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_CONTENT_PROTECTION_NOT_AVAILABLE = libovr_capi.ovrError_ContentProtectionNotAvailable
 * LIBOVR_ERROR_APPLICATION_VISIBLE = libovr_capi.ovrError_ApplicationInvisible
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_DisplayRemoved); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_DISPLAY_REMOVED, __pyx_t_1) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":559
 * LIBOVR_ERROR_GRAPHICS_DEVICE_RESET = libovr_capi.ovrError_GraphicsDeviceReset
 * LIBOVR_ERROR_DISPLAY_REMOVED = libovr_capi.ovrError_DisplayRemoved
 * LIBOVR_ERROR_CONTENT_PROTECTION_NOT_AVAILABLE = libovr_capi.ovrError_ContentProtectionNotAvailable             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_APPLICATION_VISIBLE = libovr_capi.ovrError_ApplicationInvisible
 * LIBOVR_ERROR_DISALLOWED = libovr_capi.ovrError_Disallowed
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ContentProtectionNotAvailable); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_CONTENT_PROTECTION, __pyx_t_1) < 0) __PYX_ERR(0, 559, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":560
 * LIBOVR_ERROR_DISPLAY_REMOVED = libovr_capi.ovrError_DisplayRemoved
 * LIBOVR_ERROR_CONTENT_PROTECTION_NOT_AVAILABLE = libovr_capi.ovrError_ContentProtectionNotAvailable
 * LIBOVR_ERROR_APPLICATION_VISIBLE = libovr_capi.ovrError_ApplicationInvisible             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_DISALLOWED = libovr_capi.ovrError_Disallowed
 * LIBOVR_ERROR_DISPLAY_PLUGGED_INCORRECTY = libovr_capi.ovrError_DisplayPluggedIncorrectly
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_ApplicationInvisible); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_APPLICATION_VISIBLE, __pyx_t_1) < 0) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":561
 * LIBOVR_ERROR_CONTENT_PROTECTION_NOT_AVAILABLE = libovr_capi.ovrError_ContentProtectionNotAvailable
 * LIBOVR_ERROR_APPLICATION_VISIBLE = libovr_capi.ovrError_ApplicationInvisible
 * LIBOVR_ERROR_DISALLOWED = libovr_capi.ovrError_Disallowed             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_DISPLAY_PLUGGED_INCORRECTY = libovr_capi.ovrError_DisplayPluggedIncorrectly
 * LIBOVR_ERROR_DISPLAY_LIMIT_REACHED = libovr_capi.ovrError_DisplayLimitReached
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_Disallowed); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_DISALLOWED, __pyx_t_1) < 0) __PYX_ERR(0, 561, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":562
 * LIBOVR_ERROR_APPLICATION_VISIBLE = libovr_capi.ovrError_ApplicationInvisible
 * LIBOVR_ERROR_DISALLOWED = libovr_capi.ovrError_Disallowed
 * LIBOVR_ERROR_DISPLAY_PLUGGED_INCORRECTY = libovr_capi.ovrError_DisplayPluggedIncorrectly             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_DISPLAY_LIMIT_REACHED = libovr_capi.ovrError_DisplayLimitReached
 * LIBOVR_ERROR_RUNTIME_EXCEPTION = libovr_capi.ovrError_RuntimeException
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_DisplayPluggedIncorrectly); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_DISPLAY_PLUGGED_INC, __pyx_t_1) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":563
 * LIBOVR_ERROR_DISALLOWED = libovr_capi.ovrError_Disallowed
 * LIBOVR_ERROR_DISPLAY_PLUGGED_INCORRECTY = libovr_capi.ovrError_DisplayPluggedIncorrectly
 * LIBOVR_ERROR_DISPLAY_LIMIT_REACHED = libovr_capi.ovrError_DisplayLimitReached             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_RUNTIME_EXCEPTION = libovr_capi.ovrError_RuntimeException
 * LIBOVR_ERROR_NO_CALIBRATION = libovr_capi.ovrError_NoCalibration
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_DisplayLimitReached); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_DISPLAY_LIMIT_REACH, __pyx_t_1) < 0) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":564
 * LIBOVR_ERROR_DISPLAY_PLUGGED_INCORRECTY = libovr_capi.ovrError_DisplayPluggedIncorrectly
 * LIBOVR_ERROR_DISPLAY_LIMIT_REACHED = libovr_capi.ovrError_DisplayLimitReached
 * LIBOVR_ERROR_RUNTIME_EXCEPTION = libovr_capi.ovrError_RuntimeException             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_NO_CALIBRATION = libovr_capi.ovrError_NoCalibration
 * LIBOVR_ERROR_OLD_VERSION = libovr_capi.ovrError_OldVersion
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_RuntimeException); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_RUNTIME_EXCEPTION, __pyx_t_1) < 0) __PYX_ERR(0, 564, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":565
 * LIBOVR_ERROR_DISPLAY_LIMIT_REACHED = libovr_capi.ovrError_DisplayLimitReached
 * LIBOVR_ERROR_RUNTIME_EXCEPTION = libovr_capi.ovrError_RuntimeException
 * LIBOVR_ERROR_NO_CALIBRATION = libovr_capi.ovrError_NoCalibration             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_OLD_VERSION = libovr_capi.ovrError_OldVersion
 * LIBOVR_ERROR_MISFORMATTED_BLOCK = libovr_capi.ovrError_MisformattedBlock
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_NoCalibration); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_NO_CALIBRATION, __pyx_t_1) < 0) __PYX_ERR(0, 565, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":566
 * LIBOVR_ERROR_RUNTIME_EXCEPTION = libovr_capi.ovrError_RuntimeException
 * LIBOVR_ERROR_NO_CALIBRATION = libovr_capi.ovrError_NoCalibration
 * LIBOVR_ERROR_OLD_VERSION = libovr_capi.ovrError_OldVersion             # <<<<<<<<<<<<<<
 * LIBOVR_ERROR_MISFORMATTED_BLOCK = libovr_capi.ovrError_MisformattedBlock
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_OldVersion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_OLD_VERSION, __pyx_t_1) < 0) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":567
 * LIBOVR_ERROR_NO_CALIBRATION = libovr_capi.ovrError_NoCalibration
 * LIBOVR_ERROR_OLD_VERSION = libovr_capi.ovrError_OldVersion
 * LIBOVR_ERROR_MISFORMATTED_BLOCK = libovr_capi.ovrError_MisformattedBlock             # <<<<<<<<<<<<<<
 * 
 * # misc constants
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrErrorType(ovrError_MisformattedBlock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_ERROR_MISFORMATTED_BLOCK, __pyx_t_1) < 0) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":570
 * 
 * # misc constants
 * LIBOVR_EYE_LEFT = libovr_capi.ovrEye_Left             # <<<<<<<<<<<<<<
 * LIBOVR_EYE_RIGHT = libovr_capi.ovrEye_Right
 * LIBOVR_EYE_COUNT = libovr_capi.ovrEye_Count
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrEyeType(ovrEye_Left); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_EYE_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":571
 * # misc constants
 * LIBOVR_EYE_LEFT = libovr_capi.ovrEye_Left
 * LIBOVR_EYE_RIGHT = libovr_capi.ovrEye_Right             # <<<<<<<<<<<<<<
 * LIBOVR_EYE_COUNT = libovr_capi.ovrEye_Count
 * LIBOVR_HAND_LEFT = libovr_capi.ovrHand_Left
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrEyeType(ovrEye_Right); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_EYE_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 571, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":572
 * LIBOVR_EYE_LEFT = libovr_capi.ovrEye_Left
 * LIBOVR_EYE_RIGHT = libovr_capi.ovrEye_Right
 * LIBOVR_EYE_COUNT = libovr_capi.ovrEye_Count             # <<<<<<<<<<<<<<
 * LIBOVR_HAND_LEFT = libovr_capi.ovrHand_Left
 * LIBOVR_HAND_RIGHT = libovr_capi.ovrHand_Right
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrEyeType(ovrEye_Count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_EYE_COUNT, __pyx_t_1) < 0) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":573
 * LIBOVR_EYE_RIGHT = libovr_capi.ovrEye_Right
 * LIBOVR_EYE_COUNT = libovr_capi.ovrEye_Count
 * LIBOVR_HAND_LEFT = libovr_capi.ovrHand_Left             # <<<<<<<<<<<<<<
 * LIBOVR_HAND_RIGHT = libovr_capi.ovrHand_Right
 * LIBOVR_HAND_COUNT = libovr_capi.ovrHand_Count
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrHandType(ovrHand_Left); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_HAND_LEFT, __pyx_t_1) < 0) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":574
 * LIBOVR_EYE_COUNT = libovr_capi.ovrEye_Count
 * LIBOVR_HAND_LEFT = libovr_capi.ovrHand_Left
 * LIBOVR_HAND_RIGHT = libovr_capi.ovrHand_Right             # <<<<<<<<<<<<<<
 * LIBOVR_HAND_COUNT = libovr_capi.ovrHand_Count
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrHandType(ovrHand_Right); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_HAND_RIGHT, __pyx_t_1) < 0) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":575
 * LIBOVR_HAND_LEFT = libovr_capi.ovrHand_Left
 * LIBOVR_HAND_RIGHT = libovr_capi.ovrHand_Right
 * LIBOVR_HAND_COUNT = libovr_capi.ovrHand_Count             # <<<<<<<<<<<<<<
 * 
 * # swapchain handles, more than enough for now
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrHandType(ovrHand_Count); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_HAND_COUNT, __pyx_t_1) < 0) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":578
 * 
 * # swapchain handles, more than enough for now
 * LIBOVR_TEXTURE_SWAP_CHAIN0 = 0             # <<<<<<<<<<<<<<
 * LIBOVR_TEXTURE_SWAP_CHAIN1 = 1
 * LIBOVR_TEXTURE_SWAP_CHAIN2 = 2
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN0, __pyx_int_0) < 0) __PYX_ERR(0, 578, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":579
 * # swapchain handles, more than enough for now
 * LIBOVR_TEXTURE_SWAP_CHAIN0 = 0
 * LIBOVR_TEXTURE_SWAP_CHAIN1 = 1             # <<<<<<<<<<<<<<
 * LIBOVR_TEXTURE_SWAP_CHAIN2 = 2
 * LIBOVR_TEXTURE_SWAP_CHAIN3 = 3
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN1, __pyx_int_1) < 0) __PYX_ERR(0, 579, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":580
 * LIBOVR_TEXTURE_SWAP_CHAIN0 = 0
 * LIBOVR_TEXTURE_SWAP_CHAIN1 = 1
 * LIBOVR_TEXTURE_SWAP_CHAIN2 = 2             # <<<<<<<<<<<<<<
 * LIBOVR_TEXTURE_SWAP_CHAIN3 = 3
 * LIBOVR_TEXTURE_SWAP_CHAIN4 = 4
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN2, __pyx_int_2) < 0) __PYX_ERR(0, 580, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":581
 * LIBOVR_TEXTURE_SWAP_CHAIN1 = 1
 * LIBOVR_TEXTURE_SWAP_CHAIN2 = 2
 * LIBOVR_TEXTURE_SWAP_CHAIN3 = 3             # <<<<<<<<<<<<<<
 * LIBOVR_TEXTURE_SWAP_CHAIN4 = 4
 * LIBOVR_TEXTURE_SWAP_CHAIN5 = 5
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN3, __pyx_int_3) < 0) __PYX_ERR(0, 581, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":582
 * LIBOVR_TEXTURE_SWAP_CHAIN2 = 2
 * LIBOVR_TEXTURE_SWAP_CHAIN3 = 3
 * LIBOVR_TEXTURE_SWAP_CHAIN4 = 4             # <<<<<<<<<<<<<<
 * LIBOVR_TEXTURE_SWAP_CHAIN5 = 5
 * LIBOVR_TEXTURE_SWAP_CHAIN6 = 6
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN4, __pyx_int_4) < 0) __PYX_ERR(0, 582, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":583
 * LIBOVR_TEXTURE_SWAP_CHAIN3 = 3
 * LIBOVR_TEXTURE_SWAP_CHAIN4 = 4
 * LIBOVR_TEXTURE_SWAP_CHAIN5 = 5             # <<<<<<<<<<<<<<
 * LIBOVR_TEXTURE_SWAP_CHAIN6 = 6
 * LIBOVR_TEXTURE_SWAP_CHAIN7 = 7
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN5, __pyx_int_5) < 0) __PYX_ERR(0, 583, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":584
 * LIBOVR_TEXTURE_SWAP_CHAIN4 = 4
 * LIBOVR_TEXTURE_SWAP_CHAIN5 = 5
 * LIBOVR_TEXTURE_SWAP_CHAIN6 = 6             # <<<<<<<<<<<<<<
 * LIBOVR_TEXTURE_SWAP_CHAIN7 = 7
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN6, __pyx_int_6) < 0) __PYX_ERR(0, 584, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":585
 * LIBOVR_TEXTURE_SWAP_CHAIN5 = 5
 * LIBOVR_TEXTURE_SWAP_CHAIN6 = 6
 * LIBOVR_TEXTURE_SWAP_CHAIN7 = 7             # <<<<<<<<<<<<<<
 * 
 * # texture formats, color and depth
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TEXTURE_SWAP_CHAIN7, __pyx_int_7) < 0) __PYX_ERR(0, 585, __pyx_L1_error)

  /* "psychxr/libovr/_libovr.pyx":588
 * 
 * # texture formats, color and depth
 * LIBOVR_FORMAT_R8G8B8A8_UNORM = libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM             # <<<<<<<<<<<<<<
 * LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB = libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM_SRGB
 * LIBOVR_FORMAT_R16G16B16A16_FLOAT =  libovr_capi.OVR_FORMAT_R16G16B16A16_FLOAT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTextureFormat(OVR_FORMAT_R8G8B8A8_UNORM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM, __pyx_t_1) < 0) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":589
 * # texture formats, color and depth
 * LIBOVR_FORMAT_R8G8B8A8_UNORM = libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM
 * LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB = libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM_SRGB             # <<<<<<<<<<<<<<
 * LIBOVR_FORMAT_R16G16B16A16_FLOAT =  libovr_capi.OVR_FORMAT_R16G16B16A16_FLOAT
 * LIBOVR_FORMAT_R11G11B10_FLOAT = libovr_capi.OVR_FORMAT_R11G11B10_FLOAT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTextureFormat(OVR_FORMAT_R8G8B8A8_UNORM_SRGB); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM_SRG, __pyx_t_1) < 0) __PYX_ERR(0, 589, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":590
 * LIBOVR_FORMAT_R8G8B8A8_UNORM = libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM
 * LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB = libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM_SRGB
 * LIBOVR_FORMAT_R16G16B16A16_FLOAT =  libovr_capi.OVR_FORMAT_R16G16B16A16_FLOAT             # <<<<<<<<<<<<<<
 * LIBOVR_FORMAT_R11G11B10_FLOAT = libovr_capi.OVR_FORMAT_R11G11B10_FLOAT
 * LIBOVR_FORMAT_D16_UNORM = libovr_capi.OVR_FORMAT_D16_UNORM
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTextureFormat(OVR_FORMAT_R16G16B16A16_FLOAT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_FORMAT_R16G16B16A16_FLOAT, __pyx_t_1) < 0) __PYX_ERR(0, 590, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":591
 * LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB = libovr_capi.OVR_FORMAT_R8G8B8A8_UNORM_SRGB
 * LIBOVR_FORMAT_R16G16B16A16_FLOAT =  libovr_capi.OVR_FORMAT_R16G16B16A16_FLOAT
 * LIBOVR_FORMAT_R11G11B10_FLOAT = libovr_capi.OVR_FORMAT_R11G11B10_FLOAT             # <<<<<<<<<<<<<<
 * LIBOVR_FORMAT_D16_UNORM = libovr_capi.OVR_FORMAT_D16_UNORM
 * LIBOVR_FORMAT_D24_UNORM_S8_UINT = libovr_capi.OVR_FORMAT_D24_UNORM_S8_UINT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTextureFormat(OVR_FORMAT_R11G11B10_FLOAT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_FORMAT_R11G11B10_FLOAT, __pyx_t_1) < 0) __PYX_ERR(0, 591, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":592
 * LIBOVR_FORMAT_R16G16B16A16_FLOAT =  libovr_capi.OVR_FORMAT_R16G16B16A16_FLOAT
 * LIBOVR_FORMAT_R11G11B10_FLOAT = libovr_capi.OVR_FORMAT_R11G11B10_FLOAT
 * LIBOVR_FORMAT_D16_UNORM = libovr_capi.OVR_FORMAT_D16_UNORM             # <<<<<<<<<<<<<<
 * LIBOVR_FORMAT_D24_UNORM_S8_UINT = libovr_capi.OVR_FORMAT_D24_UNORM_S8_UINT
 * LIBOVR_FORMAT_D32_FLOAT = libovr_capi.OVR_FORMAT_D32_FLOAT
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTextureFormat(OVR_FORMAT_D16_UNORM); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_FORMAT_D16_UNORM, __pyx_t_1) < 0) __PYX_ERR(0, 592, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":593
 * LIBOVR_FORMAT_R11G11B10_FLOAT = libovr_capi.OVR_FORMAT_R11G11B10_FLOAT
 * LIBOVR_FORMAT_D16_UNORM = libovr_capi.OVR_FORMAT_D16_UNORM
 * LIBOVR_FORMAT_D24_UNORM_S8_UINT = libovr_capi.OVR_FORMAT_D24_UNORM_S8_UINT             # <<<<<<<<<<<<<<
 * LIBOVR_FORMAT_D32_FLOAT = libovr_capi.OVR_FORMAT_D32_FLOAT
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTextureFormat(OVR_FORMAT_D24_UNORM_S8_UINT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_FORMAT_D24_UNORM_S8_UINT, __pyx_t_1) < 0) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":594
 * LIBOVR_FORMAT_D16_UNORM = libovr_capi.OVR_FORMAT_D16_UNORM
 * LIBOVR_FORMAT_D24_UNORM_S8_UINT = libovr_capi.OVR_FORMAT_D24_UNORM_S8_UINT
 * LIBOVR_FORMAT_D32_FLOAT = libovr_capi.OVR_FORMAT_D32_FLOAT             # <<<<<<<<<<<<<<
 * 
 * # performance
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTextureFormat(OVR_FORMAT_D32_FLOAT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_FORMAT_D32_FLOAT, __pyx_t_1) < 0) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":597
 * 
 * # performance
 * LIBOVR_MAX_PROVIDED_FRAME_STATS = libovr_capi.ovrMaxProvidedFrameStats             # <<<<<<<<<<<<<<
 * 
 * # tracked device types
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(ovrMaxProvidedFrameStats); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_MAX_PROVIDED_FRAME_STATS, __pyx_t_1) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":600
 * 
 * # tracked device types
 * LIBOVR_TRACKED_DEVICE_TYPE_HMD = libovr_capi.ovrTrackedDevice_HMD             # <<<<<<<<<<<<<<
 * LIBOVR_TRACKED_DEVICE_TYPE_LTOUCH = libovr_capi.ovrTrackedDevice_LTouch
 * LIBOVR_TRACKED_DEVICE_TYPE_RTOUCH = libovr_capi.ovrTrackedDevice_RTouch
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTrackedDeviceType(ovrTrackedDevice_HMD); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_HMD, __pyx_t_1) < 0) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":601
 * # tracked device types
 * LIBOVR_TRACKED_DEVICE_TYPE_HMD = libovr_capi.ovrTrackedDevice_HMD
 * LIBOVR_TRACKED_DEVICE_TYPE_LTOUCH = libovr_capi.ovrTrackedDevice_LTouch             # <<<<<<<<<<<<<<
 * LIBOVR_TRACKED_DEVICE_TYPE_RTOUCH = libovr_capi.ovrTrackedDevice_RTouch
 * LIBOVR_TRACKED_DEVICE_TYPE_TOUCH = libovr_capi.ovrTrackedDevice_Touch
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTrackedDeviceType(ovrTrackedDevice_LTouch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_LTOUC, __pyx_t_1) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":602
 * LIBOVR_TRACKED_DEVICE_TYPE_HMD = libovr_capi.ovrTrackedDevice_HMD
 * LIBOVR_TRACKED_DEVICE_TYPE_LTOUCH = libovr_capi.ovrTrackedDevice_LTouch
 * LIBOVR_TRACKED_DEVICE_TYPE_RTOUCH = libovr_capi.ovrTrackedDevice_RTouch             # <<<<<<<<<<<<<<
 * LIBOVR_TRACKED_DEVICE_TYPE_TOUCH = libovr_capi.ovrTrackedDevice_Touch
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT0 = libovr_capi.ovrTrackedDevice_Object0
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTrackedDeviceType(ovrTrackedDevice_RTouch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_RTOUC, __pyx_t_1) < 0) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":603
 * LIBOVR_TRACKED_DEVICE_TYPE_LTOUCH = libovr_capi.ovrTrackedDevice_LTouch
 * LIBOVR_TRACKED_DEVICE_TYPE_RTOUCH = libovr_capi.ovrTrackedDevice_RTouch
 * LIBOVR_TRACKED_DEVICE_TYPE_TOUCH = libovr_capi.ovrTrackedDevice_Touch             # <<<<<<<<<<<<<<
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT0 = libovr_capi.ovrTrackedDevice_Object0
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT1 = libovr_capi.ovrTrackedDevice_Object1
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTrackedDeviceType(ovrTrackedDevice_Touch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_TOUCH, __pyx_t_1) < 0) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":604
 * LIBOVR_TRACKED_DEVICE_TYPE_RTOUCH = libovr_capi.ovrTrackedDevice_RTouch
 * LIBOVR_TRACKED_DEVICE_TYPE_TOUCH = libovr_capi.ovrTrackedDevice_Touch
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT0 = libovr_capi.ovrTrackedDevice_Object0             # <<<<<<<<<<<<<<
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT1 = libovr_capi.ovrTrackedDevice_Object1
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT2 = libovr_capi.ovrTrackedDevice_Object2
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTrackedDeviceType(ovrTrackedDevice_Object0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC, __pyx_t_1) < 0) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":605
 * LIBOVR_TRACKED_DEVICE_TYPE_TOUCH = libovr_capi.ovrTrackedDevice_Touch
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT0 = libovr_capi.ovrTrackedDevice_Object0
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT1 = libovr_capi.ovrTrackedDevice_Object1             # <<<<<<<<<<<<<<
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT2 = libovr_capi.ovrTrackedDevice_Object2
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT3 = libovr_capi.ovrTrackedDevice_Object3
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTrackedDeviceType(ovrTrackedDevice_Object1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_2, __pyx_t_1) < 0) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":606
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT0 = libovr_capi.ovrTrackedDevice_Object0
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT1 = libovr_capi.ovrTrackedDevice_Object1
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT2 = libovr_capi.ovrTrackedDevice_Object2             # <<<<<<<<<<<<<<
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT3 = libovr_capi.ovrTrackedDevice_Object3
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTrackedDeviceType(ovrTrackedDevice_Object2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_3, __pyx_t_1) < 0) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":607
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT1 = libovr_capi.ovrTrackedDevice_Object1
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT2 = libovr_capi.ovrTrackedDevice_Object2
 * LIBOVR_TRACKED_DEVICE_TYPE_OBJECT3 = libovr_capi.ovrTrackedDevice_Object3             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_ovrTrackedDeviceType(ovrTrackedDevice_Object3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIBOVR_TRACKED_DEVICE_TYPE_OBJEC_4, __pyx_t_1) < 0) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":613
 * # Wrapper factory functions
 * #
 * cdef np.npy_intp[1] VEC3_SHAPE = [3]             # <<<<<<<<<<<<<<
 * cdef np.npy_intp[1] QUAT_SHAPE = [4]
 * cdef np.npy_intp[2] MAT4_SHAPE = [4, 4]
 */
  __pyx_t_4[0] = 3;
  memcpy(&(__pyx_v_7psychxr_6libovr_7_libovr_VEC3_SHAPE[0]), __pyx_t_4, sizeof(__pyx_v_7psychxr_6libovr_7_libovr_VEC3_SHAPE[0]) * (1));

  /* "psychxr/libovr/_libovr.pyx":614
 * #
 * cdef np.npy_intp[1] VEC3_SHAPE = [3]
 * cdef np.npy_intp[1] QUAT_SHAPE = [4]             # <<<<<<<<<<<<<<
 * cdef np.npy_intp[2] MAT4_SHAPE = [4, 4]
 * 
 */
  __pyx_t_5[0] = 4;
  memcpy(&(__pyx_v_7psychxr_6libovr_7_libovr_QUAT_SHAPE[0]), __pyx_t_5, sizeof(__pyx_v_7psychxr_6libovr_7_libovr_QUAT_SHAPE[0]) * (1));

  /* "psychxr/libovr/_libovr.pyx":615
 * cdef np.npy_intp[1] VEC3_SHAPE = [3]
 * cdef np.npy_intp[1] QUAT_SHAPE = [4]
 * cdef np.npy_intp[2] MAT4_SHAPE = [4, 4]             # <<<<<<<<<<<<<<
 * 
 * cdef np.ndarray _wrap_ovrVector3f_as_ndarray(libovr_capi.ovrVector3f* prtVec):
 */
  __pyx_t_6[0] = 4;
  __pyx_t_6[1] = 4;
  memcpy(&(__pyx_v_7psychxr_6libovr_7_libovr_MAT4_SHAPE[0]), __pyx_t_6, sizeof(__pyx_v_7psychxr_6libovr_7_libovr_MAT4_SHAPE[0]) * (2));

  /* "psychxr/libovr/_libovr.pyx":2283
 * 
 * 
 * def success(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates success."""
 *     return <bint>libovr_capi.OVR_SUCCESS(result)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_3success, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_success, __pyx_t_1) < 0) __PYX_ERR(0, 2283, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2287
 *     return <bint>libovr_capi.OVR_SUCCESS(result)
 * 
 * def unqualifedSuccess(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates unqualified success."""
 *     return <bint>libovr_capi.OVR_UNQUALIFIED_SUCCESS(result)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_5unqualifedSuccess, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_unqualifedSuccess, __pyx_t_1) < 0) __PYX_ERR(0, 2287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2291
 *     return <bint>libovr_capi.OVR_UNQUALIFIED_SUCCESS(result)
 * 
 * def failure(int result):             # <<<<<<<<<<<<<<
 *     """Check if an API return indicates failure (error)."""
 *     return <bint>libovr_capi.OVR_FAILURE(result)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_7failure, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_failure, __pyx_t_1) < 0) __PYX_ERR(0, 2291, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2295
 *     return <bint>libovr_capi.OVR_FAILURE(result)
 * 
 * def isOculusServiceRunning(int timeoutMS=100):             # <<<<<<<<<<<<<<
 *     """Check if the Oculus Runtime is loaded and running.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_9isOculusServiceRunning, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isOculusServiceRunning, __pyx_t_1) < 0) __PYX_ERR(0, 2295, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2313
 *     return <bint>result.IsOculusServiceRunning
 * 
 * def isHmdConnected(int timeout_ms=100):             # <<<<<<<<<<<<<<
 *     """Check if an HMD is connected.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_11isHmdConnected, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isHmdConnected, __pyx_t_1) < 0) __PYX_ERR(0, 2313, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2331
 *     return <bint>result.IsOculusHMDConnected
 * 
 * def getHmdInfo():             # <<<<<<<<<<<<<<
 *     """Get HMD information.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_13getHmdInfo, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getHmdInfo, __pyx_t_1) < 0) __PYX_ERR(0, 2331, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2346
 *     return toReturn
 * 
 * def getUserHeight():             # <<<<<<<<<<<<<<
 *     """User's calibrated height in meters.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_15getUserHeight, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getUserHeight, __pyx_t_1) < 0) __PYX_ERR(0, 2346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2364
 *     return to_return
 * 
 * def getEyeHeight():             # <<<<<<<<<<<<<<
 *     """Calibrated eye height from floor in meters.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_17getEyeHeight, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getEyeHeight, __pyx_t_1) < 0) __PYX_ERR(0, 2364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2381
 *     return to_return
 * 
 * def getNeckEyeDist():             # <<<<<<<<<<<<<<
 *     """Distance from the neck to eyes in meters.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_19getNeckEyeDist, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getNeckEyeDist, __pyx_t_1) < 0) __PYX_ERR(0, 2381, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2401
 *     return <float> vals[0], <float> vals[1]
 * 
 * def getEyeToNoseDist():             # <<<<<<<<<<<<<<
 *     """Distance between the nose and eyes in meters.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_21getEyeToNoseDist, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getEyeToNoseDist, __pyx_t_1) < 0) __PYX_ERR(0, 2401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2421
 *     return <float>vals[0], <float> vals[1]
 * 
 * def initialize(bint focusAware=False, int connectionTimeout=0):             # <<<<<<<<<<<<<<
 *     """Initialize the session.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_23initialize, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_initialize, __pyx_t_1) < 0) __PYX_ERR(0, 2421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2465
 *     return result  # failed to initalize, return error code
 * 
 * def create():             # <<<<<<<<<<<<<<
 *     """Create a new session. Control is handed over to the application from
 *     Oculus Home.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_25create, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_create, __pyx_t_1) < 0) __PYX_ERR(0, 2465, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2507
 *     return result
 * 
 * def destroyTextureSwapChain(int swapChain):             # <<<<<<<<<<<<<<
 *     """Destroy a texture swap chain."""
 *     global _ptrSession
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_27destroyTextureSwapChain, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_destroyTextureSwapChain, __pyx_t_1) < 0) __PYX_ERR(0, 2507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2514
 *     _swapChains[swapChain] = NULL
 * 
 * def destroyMirrorTexture():             # <<<<<<<<<<<<<<
 *     """Destroy the mirror texture."""
 *     global _ptrSession
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_29destroyMirrorTexture, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_destroyMirrorTexture, __pyx_t_1) < 0) __PYX_ERR(0, 2514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2521
 *         libovr_capi.ovr_DestroyMirrorTexture(_ptrSession, _mirrorTexture)
 * 
 * def destroy():             # <<<<<<<<<<<<<<
 *     """Destroy a session.
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_31destroy, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_destroy, __pyx_t_1) < 0) __PYX_ERR(0, 2521, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2532
 *     libovr_capi.ovr_Destroy(_ptrSession)
 * 
 * def shutdown():             # <<<<<<<<<<<<<<
 *     """End the current session.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_33shutdown, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_shutdown, __pyx_t_1) < 0) __PYX_ERR(0, 2532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2542
 *     libovr_capi.ovr_Shutdown()
 * 
 * def getGraphicsLUID():             # <<<<<<<<<<<<<<
 *     """The graphics device LUID."""
 *     global _gfxLuid
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_35getGraphicsLUID, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getGraphicsLUID, __pyx_t_1) < 0) __PYX_ERR(0, 2542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2547
 *     return _gfxLuid.Reserved.decode('utf-8')
 * 
 * def setHighQuality(bint enable):             # <<<<<<<<<<<<<<
 *     """Enable high quality mode.
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_37setHighQuality, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setHighQuality, __pyx_t_1) < 0) __PYX_ERR(0, 2547, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2556
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HighQuality
 * 
 * def setHeadLocked(bint enable):             # <<<<<<<<<<<<<<
 *     """True when head-locked mode is enabled.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_39setHeadLocked, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setHeadLocked, __pyx_t_1) < 0) __PYX_ERR(0, 2556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2569
 *         _eyeLayer.Header.Flags &= ~libovr_capi.ovrLayerFlag_HeadLocked
 * 
 * def getPixelsPerTanAngleAtCenter(int eye):             # <<<<<<<<<<<<<<
 *     """Get pixels per tan angle at te center of the display.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_41getPixelsPerTanAngleAtCenter, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getPixelsPerTanAngleAtCenter, __pyx_t_1) < 0) __PYX_ERR(0, 2569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2594
 *     return toReturn.x, toReturn.y
 * 
 * def getDistortedViewport(int eye):             # <<<<<<<<<<<<<<
 *     """Get the distorted viewport.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_43getDistortedViewport, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getDistortedViewport, __pyx_t_1) < 0) __PYX_ERR(0, 2594, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2617
 *     return toReturn
 * 
 * def getEyeRenderFov(int eye):             # <<<<<<<<<<<<<<
 *     """Get the field-of-view to use for rendering.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_45getEyeRenderFov, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getEyeRenderFov, __pyx_t_1) < 0) __PYX_ERR(0, 2617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2656
 *     return to_return
 * 
 * def setEyeRenderFov(int eye, object fov):             # <<<<<<<<<<<<<<
 *     """Set the field-of-view of a given eye. This is used to compute the
 *     projection matrix.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_47setEyeRenderFov, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setEyeRenderFov, __pyx_t_1) < 0) __PYX_ERR(0, 2656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2700
 *     _eyeLayer.Fov[eye] = _eyeRenderDesc[eye].Fov
 * 
 * def getEyeAspectRatio(int eye):             # <<<<<<<<<<<<<<
 *     """Get the aspect ratio of an eye.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_49getEyeAspectRatio, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getEyeAspectRatio, __pyx_t_1) < 0) __PYX_ERR(0, 2700, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2721
 *            (fovPort.UpTan + fovPort.DownTan)
 * 
 * def getEyeHorizontalFovRadians(int eye):             # <<<<<<<<<<<<<<
 *     """Get the angle of the horizontal field-of-view (FOV) for a given eye.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_51getEyeHorizontalFovRadians, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getEyeHorizontalFovRadians, __pyx_t_1) < 0) __PYX_ERR(0, 2721, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2741
 *     return fovPort.GetHorizontalFovRadians()
 * 
 * def getEyeVerticalFovRadians(int eye):             # <<<<<<<<<<<<<<
 *     """Get the angle of the vertical field-of-view (FOV) for a given eye.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_53getEyeVerticalFovRadians, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getEyeVerticalFovRadians, __pyx_t_1) < 0) __PYX_ERR(0, 2741, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2761
 *     return fovPort.GetVerticalFovRadians()
 * 
 * def getEyeFocalLength(int eye):             # <<<<<<<<<<<<<<
 *     """Get the focal length of the eye's frustum.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_55getEyeFocalLength, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getEyeFocalLength, __pyx_t_1) < 0) __PYX_ERR(0, 2761, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2778
 *     return 1.0 / tan(getEyeHorizontalFovRadians(eye) / 2.0)
 * 
 * def calcEyeBufferSize(int eye, float texelsPerPixel=1.0):             # <<<<<<<<<<<<<<
 *     """Get the recommended buffer (texture) sizes for eye buffers.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_57calcEyeBufferSize, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEyeBufferSize, __pyx_t_1) < 0) __PYX_ERR(0, 2778, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2834
 *     return buffSize.w, buffSize.h
 * 
 * def getTextureSwapChainLengthGL(int swapChain):             # <<<<<<<<<<<<<<
 *     """Get the length of a specified swap chain.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_59getTextureSwapChainLengthGL, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getTextureSwapChainLengthGL, __pyx_t_1) < 0) __PYX_ERR(0, 2834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2867
 *     return result, outLength
 * 
 * def getTextureSwapChainCurrentIndex(int swapChain):             # <<<<<<<<<<<<<<
 *     """Get the current buffer index within the swap chain.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_61getTextureSwapChainCurrentIndex, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getTextureSwapChainCurrentIndex, __pyx_t_1) < 0) __PYX_ERR(0, 2867, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2900
 *     return result, current_idx
 * 
 * def getTextureSwapChainBufferGL(int swapChain, int index):             # <<<<<<<<<<<<<<
 *     """Get the texture buffer as an OpenGL name at a specific index in the
 *     swap chain for a given swapChain.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_63getTextureSwapChainBufferGL, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getTextureSwapChainBufferGL, __pyx_t_1) < 0) __PYX_ERR(0, 2900, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":2946
 *     return result, tex_id
 * 
 * def createTextureSwapChainGL(int swapChain, int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB, int levels=1):             # <<<<<<<<<<<<<<
 *     """Create a texture swap chain for eye image buffers.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM_SRG); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 2946, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__26 = __pyx_t_2;
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_65createTextureSwapChainGL, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_createTextureSwapChainGL, __pyx_t_1) < 0) __PYX_ERR(0, 2946, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3019
 *     return result
 * 
 * def setEyeColorTextureSwapChain(int eye, int swapChain):             # <<<<<<<<<<<<<<
 *     """Set the color texture swap chain for a given eye.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_67setEyeColorTextureSwapChain, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setEyeColorTextureSwapChain, __pyx_t_1) < 0) __PYX_ERR(0, 3019, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3065
 *     _eyeLayer.ColorTexture[eye] = _swapChains[swapChain]
 * 
 * def createMirrorTexture(int width, int height, int textureFormat=LIBOVR_FORMAT_R8G8B8A8_UNORM_SRGB):             # <<<<<<<<<<<<<<
 *     """Create a mirror texture.
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_LIBOVR_FORMAT_R8G8B8A8_UNORM_SRG); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 3065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__27 = __pyx_t_2;
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_69createMirrorTexture, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_createMirrorTexture, __pyx_t_1) < 0) __PYX_ERR(0, 3065, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3128
 *     return <int>result
 * 
 * def getMirrorTexture():             # <<<<<<<<<<<<<<
 *     """Mirror texture ID.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_71getMirrorTexture, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getMirrorTexture, __pyx_t_1) < 0) __PYX_ERR(0, 3128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3170
 * 
 * 
 * def getTrackingState(double absTime, bint latencyMarker=True):             # <<<<<<<<<<<<<<
 *     """Get the current poses of the head and hands.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_73getTrackingState, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getTrackingState, __pyx_t_1) < 0) __PYX_ERR(0, 3170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3273
 * #     return result, devicePose
 * 
 * def getDevicePoses(object deviceTypes, double absTime, bint latencyMarker=True):             # <<<<<<<<<<<<<<
 *     """Get tracked device poses.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_75getDevicePoses, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getDevicePoses, __pyx_t_1) < 0) __PYX_ERR(0, 3273, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3385
 *     return result, outPoses
 * 
 * def calcEyePoses(LibOVRPose headPose):             # <<<<<<<<<<<<<<
 *     """Calculate eye poses using a given pose state.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_77calcEyePoses, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_calcEyePoses, __pyx_t_1) < 0) __PYX_ERR(0, 3385, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3465
 *             _eyeProjectionMatrix[eye] * _eyeViewMatrix[eye]
 * 
 * def getHmdToEyePose(int eye):             # <<<<<<<<<<<<<<
 *     """HMD to eye poses.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_79getHmdToEyePose, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getHmdToEyePose, __pyx_t_1) < 0) __PYX_ERR(0, 3465, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3496
 *     return LibOVRPose.fromPtr(&_eyeRenderDesc[eye].HmdToEyePose)
 * 
 * def setHmdToEyePose(int eye, LibOVRPose eyePose):             # <<<<<<<<<<<<<<
 *     """Set the HMD eye poses.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_81setHmdToEyePose, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setHmdToEyePose, __pyx_t_1) < 0) __PYX_ERR(0, 3496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3508
 *     _eyeRenderDesc[0].HmdToEyePose = eyePose.c_data[0]
 * 
 * def getEyeRenderPose(int eye):             # <<<<<<<<<<<<<<
 *     """Get eye render poses.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_83getEyeRenderPose, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getEyeRenderPose, __pyx_t_1) < 0) __PYX_ERR(0, 3508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3536
 *     return LibOVRPose.fromPtr(&_eyeLayer.RenderPose[eye])
 * 
 * def setEyeRenderPose(int eye, LibOVRPose value):             # <<<<<<<<<<<<<<
 *     """Set eye render poses.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_85setEyeRenderPose, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setEyeRenderPose, __pyx_t_1) < 0) __PYX_ERR(0, 3536, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3572
 *         _eyeProjectionMatrix[eye] * _eyeViewMatrix[eye]
 * 
 * def getEyeProjectionMatrix(int eye, float nearClip=0.01, float farClip=1000.0, object outMatrix=None):             # <<<<<<<<<<<<<<
 *     """Compute the projection matrix.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_87getEyeProjectionMatrix, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getEyeProjectionMatrix, __pyx_t_1) < 0) __PYX_ERR(0, 3572, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3627
 *         return to_return
 * 
 * def getEyeRenderViewport(int eye, object outRect=None):             # <<<<<<<<<<<<<<
 *     """Get the eye render viewport.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_89getEyeRenderViewport, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getEyeRenderViewport, __pyx_t_1) < 0) __PYX_ERR(0, 3627, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3663
 *         return to_return
 * 
 * def setEyeRenderViewport(int eye, object values):             # <<<<<<<<<<<<<<
 *     """Set the eye render viewport.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_91setEyeRenderViewport, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setEyeRenderViewport, __pyx_t_1) < 0) __PYX_ERR(0, 3663, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3701
 *     _eyeLayer.Viewport[eye].Size.h = <int>values[3]
 * 
 * def getEyeViewMatrix(int eye, object outMatrix=None):             # <<<<<<<<<<<<<<
 *     """Compute a view matrix for a specified eye.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_93getEyeViewMatrix, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getEyeViewMatrix, __pyx_t_1) < 0) __PYX_ERR(0, 3701, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3739
 *         return to_return
 * 
 * def getPredictedDisplayTime(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Get the predicted time a frame will be displayed.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_95getPredictedDisplayTime, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getPredictedDisplayTime, __pyx_t_1) < 0) __PYX_ERR(0, 3739, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3760
 *     return t_sec
 * 
 * def timeInSeconds():             # <<<<<<<<<<<<<<
 *     """Absolute time in seconds.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_97timeInSeconds, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_timeInSeconds, __pyx_t_1) < 0) __PYX_ERR(0, 3760, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3773
 *     return t_sec
 * 
 * def perfHudMode(str mode):             # <<<<<<<<<<<<<<
 *     """Display a performance information HUD.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_99perfHudMode, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_perfHudMode, __pyx_t_1) < 0) __PYX_ERR(0, 3773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3801
 *         _ptrSession, b"PerfHudMode", perfHudMode)
 * 
 * def hidePerfHud():             # <<<<<<<<<<<<<<
 *     """Hide the performance HUD.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_101hidePerfHud, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hidePerfHud, __pyx_t_1) < 0) __PYX_ERR(0, 3801, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3812
 *         _ptrSession, b"PerfHudMode", libovr_capi.ovrPerfHud_Off)
 * 
 * def perfHudModes():             # <<<<<<<<<<<<<<
 *     """List of valid performance HUD modes."""
 *     return [*_performance_hud_modes]
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_103perfHudModes, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_perfHudModes, __pyx_t_1) < 0) __PYX_ERR(0, 3812, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3858
 * #     _eyeLayer.Viewport[eye] = viewportRect
 * 
 * def waitToBeginFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Wait until a buffer is available and frame rendering can begin. Must
 *     be called before 'beginFrame'.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_105waitToBeginFrame, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_waitToBeginFrame, __pyx_t_1) < 0) __PYX_ERR(0, 3858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3882
 *     return <int>result
 * 
 * def beginFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Begin rendering the frame. Must be called prior to drawing and
 *     'endFrame'.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_107beginFrame, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_beginFrame, __pyx_t_1) < 0) __PYX_ERR(0, 3882, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3903
 *     return <int>result
 * 
 * def commitTextureSwapChain(int eye):             # <<<<<<<<<<<<<<
 *     """Commit changes to a given eye's texture swap chain. When called, the
 *     runtime is notified that the texture is ready for use, and the swap
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_109commitTextureSwapChain, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_commitTextureSwapChain, __pyx_t_1) < 0) __PYX_ERR(0, 3903, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3936
 *     return <int>result
 * 
 * def endFrame(unsigned int frameIndex=0):             # <<<<<<<<<<<<<<
 *     """Call when rendering a frame has completed. Buffers which have been
 *     committed are passed to the compositor for distortion.
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_111endFrame, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_endFrame, __pyx_t_1) < 0) __PYX_ERR(0, 3936, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3973
 *     return result
 * 
 * def resetFrameStats():             # <<<<<<<<<<<<<<
 *     """Reset frame statistics.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_113resetFrameStats, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_resetFrameStats, __pyx_t_1) < 0) __PYX_ERR(0, 3973, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":3987
 *     return result
 * 
 * def getTrackingOriginType():             # <<<<<<<<<<<<<<
 *     """Tracking origin type.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_115getTrackingOriginType, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getTrackingOriginType, __pyx_t_1) < 0) __PYX_ERR(0, 3987, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4004
 *         return 'eye'
 * 
 * def setTrackingOriginType(str value):             # <<<<<<<<<<<<<<
 *     cdef libovr_capi.ovrResult result
 *     global _ptrSession
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_117setTrackingOriginType, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setTrackingOriginType, __pyx_t_1) < 0) __PYX_ERR(0, 4004, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4016
 *     return result
 * 
 * def recenterTrackingOrigin():             # <<<<<<<<<<<<<<
 *     """Recenter the tracking origin.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_119recenterTrackingOrigin, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_recenterTrackingOrigin, __pyx_t_1) < 0) __PYX_ERR(0, 4016, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4030
 *     return result
 * 
 * def specifyTrackingOrigin(LibOVRPose newOrigin):             # <<<<<<<<<<<<<<
 *     """Specify a new tracking origin.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_121specifyTrackingOrigin, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_specifyTrackingOrigin, __pyx_t_1) < 0) __PYX_ERR(0, 4030, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4046
 *     return result
 * 
 * def clearShouldRecenterFlag():             # <<<<<<<<<<<<<<
 *     """Clear the `shouldRecenter` flag.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_123clearShouldRecenterFlag, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_clearShouldRecenterFlag, __pyx_t_1) < 0) __PYX_ERR(0, 4046, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4053
 *     libovr_capi.ovr_ClearShouldRecenterFlag(_ptrSession)
 * 
 * def getTrackerCount():             # <<<<<<<<<<<<<<
 *     """Get the number of attached trackers."""
 *     global _ptrSession
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_125getTrackerCount, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getTrackerCount, __pyx_t_1) < 0) __PYX_ERR(0, 4053, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4061
 *     return <int>trackerCount
 * 
 * def getTrackerInfo(int trackerIndex):             # <<<<<<<<<<<<<<
 *     """Get information about a given tracker.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_127getTrackerInfo, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getTrackerInfo, __pyx_t_1) < 0) __PYX_ERR(0, 4061, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4086
 *     return to_return
 * 
 * def refreshPerformanceStats():             # <<<<<<<<<<<<<<
 *     """Refresh performance statistics.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_129refreshPerformanceStats, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_refreshPerformanceStats, __pyx_t_1) < 0) __PYX_ERR(0, 4086, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4110
 *     return result
 * 
 * def updatePerfStats():             # <<<<<<<<<<<<<<
 *     """Update performance stats.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_131updatePerfStats, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_updatePerfStats, __pyx_t_1) < 0) __PYX_ERR(0, 4110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4133
 *     return result
 * 
 * def getAdaptiveGpuPerformanceScale():             # <<<<<<<<<<<<<<
 *     """Get the adaptive GPU performance scale.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_133getAdaptiveGpuPerformanceScale, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getAdaptiveGpuPerformanceScale, __pyx_t_1) < 0) __PYX_ERR(0, 4133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4144
 *     return _frameStats.AdaptiveGpuPerformanceScale
 * 
 * def getFrameStatsCount():             # <<<<<<<<<<<<<<
 *     """Get the number of queued compositor statistics.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_135getFrameStatsCount, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getFrameStatsCount, __pyx_t_1) < 0) __PYX_ERR(0, 4144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4155
 *     return _frameStats.FrameStatsCount
 * 
 * def anyFrameStatsDropped():             # <<<<<<<<<<<<<<
 *     """Check if frame stats were dropped.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_137anyFrameStatsDropped, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_anyFrameStatsDropped, __pyx_t_1) < 0) __PYX_ERR(0, 4155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4169
 *     return <bint>_frameStats.AnyFrameStatsDropped
 * 
 * def checkAswIsAvailable():             # <<<<<<<<<<<<<<
 *     """Check if ASW is available.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_139checkAswIsAvailable, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_checkAswIsAvailable, __pyx_t_1) < 0) __PYX_ERR(0, 4169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4180
 *     return <bint>_frameStats.AswIsAvailable
 * 
 * def getVisibleProcessId():             # <<<<<<<<<<<<<<
 *     """Process ID which the performance stats are currently being polled.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_141getVisibleProcessId, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getVisibleProcessId, __pyx_t_1) < 0) __PYX_ERR(0, 4180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4192
 *     return <int>_frameStats.VisibleProcessId
 * 
 * def checkAppLastFrameDropped():             # <<<<<<<<<<<<<<
 *     """Check if the application dropped a frame.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_143checkAppLastFrameDropped, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_checkAppLastFrameDropped, __pyx_t_1) < 0) __PYX_ERR(0, 4192, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4211
 *     return False
 * 
 * def checkCompLastFrameDropped():             # <<<<<<<<<<<<<<
 *     """Check if the compositor dropped a frame.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_145checkCompLastFrameDropped, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_checkCompLastFrameDropped, __pyx_t_1) < 0) __PYX_ERR(0, 4211, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4245
 * #     return toReturn
 * 
 * def getFrameStats(int frameStatIndex=0):             # <<<<<<<<<<<<<<
 *     """Get detailed compositor frame statistics.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_147getFrameStats, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getFrameStats, __pyx_t_1) < 0) __PYX_ERR(0, 4245, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4275
 *     return stat
 * 
 * def getLastErrorInfo():             # <<<<<<<<<<<<<<
 *     """Get the last error code and information string reported by the API.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_149getLastErrorInfo, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4275, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getLastErrorInfo, __pyx_t_1) < 0) __PYX_ERR(0, 4275, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4294
 *     return <int>result, errorString
 * 
 * def setBoundaryColor(float red, float green, float blue):             # <<<<<<<<<<<<<<
 *     """Set the boundary color.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_151setBoundaryColor, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setBoundaryColor, __pyx_t_1) < 0) __PYX_ERR(0, 4294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4326
 *     return result
 * 
 * def resetBoundaryColor():             # <<<<<<<<<<<<<<
 *     """Reset the boundary color to system default.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_153resetBoundaryColor, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_resetBoundaryColor, __pyx_t_1) < 0) __PYX_ERR(0, 4326, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4336
 *     return result
 * 
 * def getBoundaryVisible():             # <<<<<<<<<<<<<<
 *     """Check if the Guardian boundary is visible.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_155getBoundaryVisible, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getBoundaryVisible, __pyx_t_1) < 0) __PYX_ERR(0, 4336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4355
 *     return result, is_visible
 * 
 * def showBoundary():             # <<<<<<<<<<<<<<
 *     """Show the boundary.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_157showBoundary, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_showBoundary, __pyx_t_1) < 0) __PYX_ERR(0, 4355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4368
 *     return result
 * 
 * def hideBoundary():             # <<<<<<<<<<<<<<
 *     """Hide the boundry."""
 *     global _ptrSession
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_159hideBoundary, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4368, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_hideBoundary, __pyx_t_1) < 0) __PYX_ERR(0, 4368, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4376
 *     return result
 * 
 * def getBoundaryDimensions(str boundaryType='PlayArea'):             # <<<<<<<<<<<<<<
 *     """Get the dimensions of the boundary.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_161getBoundaryDimensions, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getBoundaryDimensions, __pyx_t_1) < 0) __PYX_ERR(0, 4376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4412
 * #    pass  # TODO: make this work.
 * 
 * def getConnectedControllerTypes():             # <<<<<<<<<<<<<<
 *     """Get connected controller types.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_163getConnectedControllerTypes, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getConnectedControllerTypes, __pyx_t_1) < 0) __PYX_ERR(0, 4412, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4462
 *     return toReturn
 * 
 * def updateInputState(int controller):             # <<<<<<<<<<<<<<
 *     """Refresh the input state of a controller.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_165updateInputState, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_updateInputState, __pyx_t_1) < 0) __PYX_ERR(0, 4462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4512
 *     return result, currentInputState.TimeInSeconds
 * 
 * def getButton(int controller, int button, str testState='continuous'):             # <<<<<<<<<<<<<<
 *     """Get the state of a specified button for a given controller.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_167getButton, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getButton, __pyx_t_1) < 0) __PYX_ERR(0, 4512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4628
 *     return stateResult, t_sec
 * 
 * def getTouch(str controller, object touch, str testState='continuous'):             # <<<<<<<<<<<<<<
 *     """Get touches for a specified device.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_169getTouch, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getTouch, __pyx_t_1) < 0) __PYX_ERR(0, 4628, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4727
 *     return stateResult, t_sec
 * 
 * def getThumbstickValues(int controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get analog thumbstick values.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_171getThumbstickValues, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getThumbstickValues, __pyx_t_1) < 0) __PYX_ERR(0, 4727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4802
 *            np.array((thumbstick_x1, thumbstick_y1), dtype=np.float32)
 * 
 * def getIndexTriggerValues(int controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get analog index trigger values.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_173getIndexTriggerValues, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getIndexTriggerValues, __pyx_t_1) < 0) __PYX_ERR(0, 4802, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4859
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)
 * 
 * def getHandTriggerValues(str controller, bint deadzone=False):             # <<<<<<<<<<<<<<
 *     """Get hand trigger values."""
 *     global _inputStates
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_175getHandTriggerValues, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getHandTriggerValues, __pyx_t_1) < 0) __PYX_ERR(0, 4859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4893
 *     return np.array((triggerLeft, triggerRight), dtype=np.float32)
 * 
 * def setControllerVibration(int controller, str frequency, float amplitude):             # <<<<<<<<<<<<<<
 *     """Vibrate a controller.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_177setControllerVibration, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setControllerVibration, __pyx_t_1) < 0) __PYX_ERR(0, 4893, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":4948
 *     return result
 * 
 * def getSessionStatus():             # <<<<<<<<<<<<<<
 *     """Get the current session status.
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_7psychxr_6libovr_7_libovr_179getSessionStatus, NULL, __pyx_n_s_psychxr_libovr__libovr); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_getSessionStatus, __pyx_t_1) < 0) __PYX_ERR(0, 4948, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "psychxr/libovr/_libovr.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * #  =============================================================================
 * #  Python Interface Module for LibOVR
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":209
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_array_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_array_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_array_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 209, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_array_type);

  /* "View.MemoryView":286
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__229, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":287
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__230, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":288
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__231, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":291
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__232, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":292
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__233, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":316
 * 
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":317
 * DEF THREAD_LOCKS_PREALLOCATED = 8
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[THREAD_LOCKS_PREALLOCATED] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_7[0] = PyThread_allocate_lock();
  __pyx_t_7[1] = PyThread_allocate_lock();
  __pyx_t_7[2] = PyThread_allocate_lock();
  __pyx_t_7[3] = PyThread_allocate_lock();
  __pyx_t_7[4] = PyThread_allocate_lock();
  __pyx_t_7[5] = PyThread_allocate_lock();
  __pyx_t_7[6] = PyThread_allocate_lock();
  __pyx_t_7[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_7, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":545
 *         info.obj = self
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_memoryview_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 545, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryview_type);

  /* "View.MemoryView":991
 *         return self.from_object
 * 
 *     __pyx_getbuffer = capsule(<void *> &__pyx_memoryview_getbuffer, "getbuffer(obj, view, flags)")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __pyx_capsule_create(((void *)(&__pyx_memoryview_getbuffer)), ((char *)"getbuffer(obj, view, flags)")); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_memoryviewslice_type->tp_dict, __pyx_n_s_pyx_getbuffer, __pyx_t_1) < 0) __PYX_ERR(1, 991, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_memoryviewslice_type);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init psychxr.libovr._libovr", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init psychxr.libovr._libovr");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, int nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* decode_c_string */
static CYTHON_INLINE PyObject* __Pyx_decode_c_string(
         const char* cstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    Py_ssize_t length;
    if (unlikely((start < 0) | (stop < 0))) {
        size_t slen = strlen(cstring);
        if (unlikely(slen > (size_t) PY_SSIZE_T_MAX)) {
            PyErr_SetString(PyExc_OverflowError,
                            "c-string too long to convert to Python");
            return NULL;
        }
        length = (Py_ssize_t) slen;
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    length = stop - start;
    if (unlikely(length <= 0))
        return PyUnicode_FromUnicode(NULL, 0);
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
    return 0;
}

/* PyObjectCallNoArg */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, NULL, 0);
    }
#endif
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || __Pyx_CyFunction_Check(func)))
#else
    if (likely(PyCFunction_Check(func)))
#endif
    {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* SliceObject */
static CYTHON_INLINE int __Pyx_PyObject_SetSlice(PyObject* obj, PyObject* value,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_ass_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_ass_slice(obj, cstart, cstop, value);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_ass_subscript))
#endif
    {
        int result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_ass_subscript(obj, py_slice, value);
#else
        result = value ? PyObject_SetItem(obj, py_slice, value) : PyObject_DelItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object does not support slice %.10s",
        Py_TYPE(obj)->tp_name, value ? "assignment" : "deletion");
bad:
    return -1;
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return dict ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
        dictptr = (offset > 0) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (!dict || tp_dict_version != __PYX_GET_DICT_VERSION(dict))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* BufferGetAndValidate */
  static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (unlikely(info->buf == NULL)) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}
static void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static int __Pyx__GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  buf->buf = NULL;
  if (unlikely(__Pyx_GetBuffer(obj, buf, flags) == -1)) {
    __Pyx_ZeroBuffer(buf);
    return -1;
  }
  if (unlikely(buf->ndim != nd)) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if (unlikely((size_t)buf->itemsize != dtype->size)) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_SafeReleaseBuffer(buf);
  return -1;
}

/* BufferFallbackError */
  static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

/* BufferIndexError */
  static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

/* MemviewSliceInit */
  static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (memviewslice->memview || memviewslice->data) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#ifdef HAVE_STDARG_PROTOTYPES
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    int first_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview || (PyObject *) memview == Py_None)
        return;
    if (__pyx_get_slice_count(memview) < 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    first_time = __pyx_add_acquisition_count(memview) == 0;
    if (first_time) {
        if (have_gil) {
            Py_INCREF((PyObject *) memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_INCREF((PyObject *) memview);
            PyGILState_Release(_gilstate);
        }
    }
}
static CYTHON_INLINE void __Pyx_XDEC_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    int last_time;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (!memview ) {
        return;
    } else if ((PyObject *) memview == Py_None) {
        memslice->memview = NULL;
        return;
    }
    if (__pyx_get_slice_count(memview) <= 0)
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         __pyx_get_slice_count(memview), lineno);
    last_time = __pyx_sub_acquisition_count(memview) == 1;
    memslice->data = NULL;
    if (last_time) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        memslice->memview = NULL;
    }
}

/* PyObjectCall2Args */
  static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyFloatBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_DivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? __Pyx_PyNumber_InPlaceDivide(op1, op2) : __Pyx_PyNumber_Divide(op1, op2));
    }
        
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* DictGetItem */
    #if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* GetTopmostException */
    #if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
    #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* BytesEquals */
    static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
    static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* RaiseTooManyValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
    static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
    static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* None */
    static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* GetAttr */
    static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* ObjectGetItem */
    #if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* GetAttr3 */
    static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r = __Pyx_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* SwapException */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PyIntBinop */
    #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* None */
    static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* None */
    static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ImportFrom */
    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
    static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* PyObject_GenericGetAttrNoDict */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
    #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
    static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* SetupReduce */
    static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_cython); if (unlikely(!reduce_cython)) goto BAD;
            ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto BAD;
            ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto BAD;
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate_cython); if (unlikely(!setstate_cython)) goto BAD;
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto BAD;
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto GOOD;
BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
    #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
        else if (__Pyx_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view);
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


    /* MemviewSliceIsContig */
    static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
    static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* Capsule */
    static CYTHON_INLINE PyObject *
__pyx_capsule_create(void *p, CYTHON_UNUSED const char *sig)
{
    PyObject *cobj;
#if PY_VERSION_HEX >= 0x02070000
    cobj = PyCapsule_New(p, sig, NULL);
#else
    cobj = PyCObject_FromVoidPtr(p, NULL);
#endif
    return cobj;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrTextureFormat(ovrTextureFormat value) {
    const ovrTextureFormat neg_one = (ovrTextureFormat) ((ovrTextureFormat) 0 - (ovrTextureFormat) 1), const_zero = (ovrTextureFormat) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrTextureFormat) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrTextureFormat) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrTextureFormat) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrTextureFormat) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrTextureFormat) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrTextureFormat),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrPerfHudMode(ovrPerfHudMode value) {
    const ovrPerfHudMode neg_one = (ovrPerfHudMode) ((ovrPerfHudMode) 0 - (ovrPerfHudMode) 1), const_zero = (ovrPerfHudMode) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrPerfHudMode) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrPerfHudMode) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrPerfHudMode) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrPerfHudMode) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrPerfHudMode) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrPerfHudMode),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrMirrorOptions(ovrMirrorOptions value) {
    const ovrMirrorOptions neg_one = (ovrMirrorOptions) ((ovrMirrorOptions) 0 - (ovrMirrorOptions) 1), const_zero = (ovrMirrorOptions) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrMirrorOptions) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrMirrorOptions) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrMirrorOptions) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrMirrorOptions) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrMirrorOptions) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrMirrorOptions),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrControllerType(ovrControllerType value) {
    const ovrControllerType neg_one = (ovrControllerType) ((ovrControllerType) 0 - (ovrControllerType) 1), const_zero = (ovrControllerType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrControllerType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrControllerType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrControllerType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrControllerType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrControllerType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrControllerType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrButton(ovrButton value) {
    const ovrButton neg_one = (ovrButton) ((ovrButton) 0 - (ovrButton) 1), const_zero = (ovrButton) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrButton) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrButton) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrButton) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrButton) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrButton) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrButton),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrTouch(ovrTouch value) {
    const ovrTouch neg_one = (ovrTouch) ((ovrTouch) 0 - (ovrTouch) 1), const_zero = (ovrTouch) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrTouch) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrTouch) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrTouch) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrTouch) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrTouch) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrTouch),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrSuccessType(ovrSuccessType value) {
    const ovrSuccessType neg_one = (ovrSuccessType) ((ovrSuccessType) 0 - (ovrSuccessType) 1), const_zero = (ovrSuccessType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrSuccessType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrSuccessType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrSuccessType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrSuccessType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrSuccessType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrSuccessType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrSuccessTypes(ovrSuccessTypes value) {
    const ovrSuccessTypes neg_one = (ovrSuccessTypes) ((ovrSuccessTypes) 0 - (ovrSuccessTypes) 1), const_zero = (ovrSuccessTypes) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrSuccessTypes) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrSuccessTypes) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrSuccessTypes) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrSuccessTypes) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrSuccessTypes) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrSuccessTypes),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrErrorType(ovrErrorType value) {
    const ovrErrorType neg_one = (ovrErrorType) ((ovrErrorType) 0 - (ovrErrorType) 1), const_zero = (ovrErrorType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrErrorType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrErrorType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrErrorType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrErrorType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrErrorType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrErrorType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrEyeType(ovrEyeType value) {
    const ovrEyeType neg_one = (ovrEyeType) ((ovrEyeType) 0 - (ovrEyeType) 1), const_zero = (ovrEyeType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrEyeType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrEyeType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrEyeType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrEyeType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrEyeType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrEyeType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrHandType(ovrHandType value) {
    const ovrHandType neg_one = (ovrHandType) ((ovrHandType) 0 - (ovrHandType) 1), const_zero = (ovrHandType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrHandType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrHandType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrHandType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrHandType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrHandType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrHandType),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrTrackedDeviceType(ovrTrackedDeviceType value) {
    const ovrTrackedDeviceType neg_one = (ovrTrackedDeviceType) ((ovrTrackedDeviceType) 0 - (ovrTrackedDeviceType) 1), const_zero = (ovrTrackedDeviceType) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrTrackedDeviceType) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrTrackedDeviceType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrTrackedDeviceType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrTrackedDeviceType) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrTrackedDeviceType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrTrackedDeviceType),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int32_t(int32_t value) {
    const int32_t neg_one = (int32_t) ((int32_t) 0 - (int32_t) 1), const_zero = (int32_t) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int32_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int32_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int32_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int32_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int32_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_ovrBool(ovrBool value) {
    const ovrBool neg_one = (ovrBool) ((ovrBool) 0 - (ovrBool) 1), const_zero = (ovrBool) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(ovrBool) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(ovrBool) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrBool) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(ovrBool) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(ovrBool) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(ovrBool),
                                     little, !is_unsigned);
    }
}

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_enum__NPY_TYPES(enum NPY_TYPES value) {
    const enum NPY_TYPES neg_one = (enum NPY_TYPES) ((enum NPY_TYPES) 0 - (enum NPY_TYPES) 1), const_zero = (enum NPY_TYPES) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum NPY_TYPES) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum NPY_TYPES) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum NPY_TYPES) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(enum NPY_TYPES),
                                     little, !is_unsigned);
    }
}

/* MemviewSliceCopyTemplate */
    static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (from_mvs->suboffsets[i] >= 0) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) ((unsigned int) 0 - (unsigned int) 1), const_zero = (unsigned int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, digits[0])
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (unsigned int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (unsigned int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(unsigned int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(unsigned int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(unsigned int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE int32_t __Pyx_PyInt_As_int32_t(PyObject *x) {
    const int32_t neg_one = (int32_t) ((int32_t) 0 - (int32_t) 1), const_zero = (int32_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int32_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int32_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int32_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int32_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(int32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 2 * PyLong_SHIFT) {
                            return (int32_t) (((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 3 * PyLong_SHIFT) {
                            return (int32_t) (((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) >= 4 * PyLong_SHIFT) {
                            return (int32_t) (((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int32_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int32_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int32_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int32_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int32_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int32_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int32_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int32_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                            return (int32_t) ((((((int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int32_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int32_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                            return (int32_t) ((((((((int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int32_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int32_t) (((int32_t)-1)*(((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int32_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int32_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int32_t) - 1 > 4 * PyLong_SHIFT) {
                            return (int32_t) ((((((((((int32_t)digits[3]) << PyLong_SHIFT) | (int32_t)digits[2]) << PyLong_SHIFT) | (int32_t)digits[1]) << PyLong_SHIFT) | (int32_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int32_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int32_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int32_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int32_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int32_t) -1;
        }
    } else {
        int32_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int32_t) -1;
        val = __Pyx_PyInt_As_int32_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int32_t");
    return (int32_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int32_t");
    return (int32_t) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE ovrTrackedDeviceType __Pyx_PyInt_As_ovrTrackedDeviceType(PyObject *x) {
    const ovrTrackedDeviceType neg_one = (ovrTrackedDeviceType) ((ovrTrackedDeviceType) 0 - (ovrTrackedDeviceType) 1), const_zero = (ovrTrackedDeviceType) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(ovrTrackedDeviceType) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (ovrTrackedDeviceType) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ovrTrackedDeviceType) 0;
                case  1: __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, digit, digits[0])
                case 2:
                    if (8 * sizeof(ovrTrackedDeviceType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ovrTrackedDeviceType) >= 2 * PyLong_SHIFT) {
                            return (ovrTrackedDeviceType) (((((ovrTrackedDeviceType)digits[1]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ovrTrackedDeviceType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ovrTrackedDeviceType) >= 3 * PyLong_SHIFT) {
                            return (ovrTrackedDeviceType) (((((((ovrTrackedDeviceType)digits[2]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[1]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ovrTrackedDeviceType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ovrTrackedDeviceType) >= 4 * PyLong_SHIFT) {
                            return (ovrTrackedDeviceType) (((((((((ovrTrackedDeviceType)digits[3]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[2]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[1]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (ovrTrackedDeviceType) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(ovrTrackedDeviceType) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ovrTrackedDeviceType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ovrTrackedDeviceType) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ovrTrackedDeviceType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (ovrTrackedDeviceType) 0;
                case -1: __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(ovrTrackedDeviceType) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ovrTrackedDeviceType) - 1 > 2 * PyLong_SHIFT) {
                            return (ovrTrackedDeviceType) (((ovrTrackedDeviceType)-1)*(((((ovrTrackedDeviceType)digits[1]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(ovrTrackedDeviceType) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ovrTrackedDeviceType) - 1 > 2 * PyLong_SHIFT) {
                            return (ovrTrackedDeviceType) ((((((ovrTrackedDeviceType)digits[1]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(ovrTrackedDeviceType) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ovrTrackedDeviceType) - 1 > 3 * PyLong_SHIFT) {
                            return (ovrTrackedDeviceType) (((ovrTrackedDeviceType)-1)*(((((((ovrTrackedDeviceType)digits[2]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[1]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(ovrTrackedDeviceType) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ovrTrackedDeviceType) - 1 > 3 * PyLong_SHIFT) {
                            return (ovrTrackedDeviceType) ((((((((ovrTrackedDeviceType)digits[2]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[1]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(ovrTrackedDeviceType) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ovrTrackedDeviceType) - 1 > 4 * PyLong_SHIFT) {
                            return (ovrTrackedDeviceType) (((ovrTrackedDeviceType)-1)*(((((((((ovrTrackedDeviceType)digits[3]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[2]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[1]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(ovrTrackedDeviceType) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(ovrTrackedDeviceType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(ovrTrackedDeviceType) - 1 > 4 * PyLong_SHIFT) {
                            return (ovrTrackedDeviceType) ((((((((((ovrTrackedDeviceType)digits[3]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[2]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[1]) << PyLong_SHIFT) | (ovrTrackedDeviceType)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(ovrTrackedDeviceType) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(ovrTrackedDeviceType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(ovrTrackedDeviceType) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(ovrTrackedDeviceType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            ovrTrackedDeviceType val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (ovrTrackedDeviceType) -1;
        }
    } else {
        ovrTrackedDeviceType val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (ovrTrackedDeviceType) -1;
        val = __Pyx_PyInt_As_ovrTrackedDeviceType(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to ovrTrackedDeviceType");
    return (ovrTrackedDeviceType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to ovrTrackedDeviceType");
    return (ovrTrackedDeviceType) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
    const char neg_one = (char) ((char) 0 - (char) 1), const_zero = (char) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(char) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case  1: __PYX_VERIFY_RETURN_INT(char, digit, digits[0])
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 2 * PyLong_SHIFT) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 3 * PyLong_SHIFT) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) >= 4 * PyLong_SHIFT) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (char) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(char) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (char) 0;
                case -1: __PYX_VERIFY_RETURN_INT(char, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(char,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(char) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(char) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(char) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(char) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(char) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(char) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(char) - 1 > 4 * PyLong_SHIFT) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(char) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(char) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            char val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (char) -1;
        }
    } else {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* TypeInfoCompare */
    static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
    static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (buf->strides[dim] != sizeof(void *)) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (buf->strides[dim] != buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (stride < buf->itemsize) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (spec & (__Pyx_MEMVIEW_PTR)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (buf->suboffsets) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, CYTHON_UNUSED int ndim, int spec)
{
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (buf->suboffsets && buf->suboffsets[dim] >= 0) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (!buf->suboffsets || (buf->suboffsets[dim] < 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1)
            {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (stride * buf->itemsize != buf->strides[i] &&
                    buf->shape[i] > 1) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (buf->ndim != ndim) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
    }
    if ((unsigned) buf->itemsize != dtype->size) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    for (i = 0; i < ndim; i++) {
        spec = axes_specs[i];
        if (!__pyx_check_strides(buf, i, ndim, spec))
            goto fail;
        if (!__pyx_check_suboffsets(buf, i, ndim, spec))
            goto fail;
    }
    if (buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
    static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
